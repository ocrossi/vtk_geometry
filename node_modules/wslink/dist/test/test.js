/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./test/main.js-exposed");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babel-loader/lib/index.js?!./test/main.js":
/*!****************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--5-0!./test/main.js ***!
  \****************************************************************/
/*! exports provided: sendInput, sendImage, testNesting, sendMistake, sendServerQuit, toggleStream, wsclose, connect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sendInput", function() { return sendInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sendImage", function() { return sendImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "testNesting", function() { return testNesting; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sendMistake", function() { return sendMistake; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sendServerQuit", function() { return sendServerQuit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toggleStream", function() { return toggleStream; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wsclose", function() { return wsclose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connect", function() { return connect; });
/* harmony import */ var _src_WebsocketConnection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/WebsocketConnection */ "./src/WebsocketConnection/index.js");
/* harmony import */ var _src_SmartConnect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../src/SmartConnect */ "./src/SmartConnect/index.js");
/* global document */

 // this template allows us to use HtmlWebpackPlugin
// in webpack to generate our index.html
// expose-loader makes our 'export' functions part of the 'app' global

var htmlContent = "<button onClick=\"app.connect()\">Connect</button>\n<button onClick=\"app.wsclose()\">Disconnect</button>\n<br/>\n<input type=\"text\" value=\"1,2,3,4,5\" class=\"input\" />\n<button onClick=\"app.sendInput('add')\">Send Add</button>\n<button onClick=\"app.sendInput('mult')\">Send Mult</button>\n<button onClick=\"app.sendImage('unwrapped.image')\">Send Image</button>\n<button onClick=\"app.testNesting()\">Test Nesting</button>\n<button onClick=\"app.toggleStream()\">Sub/Unsub</button>\n<button onClick=\"app.sendMistake()\">Mistake</button>\n<button onClick=\"app.sendInput('special')\">Test NaN</button>\n<button onClick=\"app.sendServerQuit()\">Server Quit</button>\n<br/>\n<textarea class=\"output\" rows=\"12\" cols=\"50\"></textarea>\n<br/>\n<canvas class=\"imageCanvas\" width=\"300px\" height=\"300px\"></canvas>\n";
var rootContainer = document.querySelector('body');
var controlContainer = document.createElement('div');
rootContainer.appendChild(controlContainer);
controlContainer.innerHTML = htmlContent;
var inputElement = document.querySelector('.input');
var logOutput = document.querySelector('.output');
var ws = null;
var subscription = false;
var session = null;

function log(msg) {
  console.log(msg);
  logOutput.innerHTML += msg;
  logOutput.innerHTML += '\n';
}

function logerr(err) {
  console.error(err);
  logOutput.innerHTML += "error: ".concat(err.code, ", \"").concat(err.message, "\", ").concat(err.data);
  logOutput.innerHTML += '\n';
}

function sendInput(type) {
  if (!session) return;
  var data = JSON.parse('[' + inputElement.value + ']');
  session.call("myprotocol.".concat(type), [data]).then(function (result) {
    return log('result ' + result);
  }, function (err) {
    return logerr(err);
  });
}
function sendImage(type) {
  if (!session) return;
  session.call("myprotocol.".concat(type), []).then(function (result) {
    log('result ' + result);
    handleMessage(result);
  }, function (err) {
    return logerr(err);
  });
}

function handleMessage(inData) {
  var data = Array.isArray(inData) ? inData[0] : inData;
  var blob = data.blob || data;

  if (blob instanceof Blob) {
    var canvas = document.querySelector('.imageCanvas');
    var ctx = canvas.getContext('2d');
    var img = new Image();
    var reader = new FileReader();

    reader.onload = function (e) {
      img.onload = function () {
        return ctx.drawImage(img, 0, 0);
      };

      img.src = e.target.result;
    };

    reader.readAsDataURL(blob);
  } else {
    log('result ' + blob);
  }
}

function testNesting() {
  if (!session) return;
  session.call('myprotocol.nested.image', []).then(function (data) {
    if (data['image']) handleMessage(data['image']);

    var onload = function onload(e) {
      var arr = new Uint8Array(e.target.result);

      if (arr.length === 4) {
        arr.forEach(function (d, i) {
          if (d !== i + 1) console.error('mismatch4', d, i);
        });
      } else if (arr.length === 6) {
        arr.forEach(function (d, i) {
          if (d !== i + 5) console.error('mismatch4', d, i);
        });
      } else {
        console.error('Size mismatch', arr.length);
      }
    };

    data.bytesList.forEach(function (bl) {
      var reader = new FileReader();
      reader.onload = onload;
      reader.readAsArrayBuffer(bl);
    });
    console.log('Nesting:', data);
  }, function (err) {
    return logerr(err);
  });
}
function sendMistake() {
  if (!session) return;
  session.call('myprotocol.mistake.TYPO', ['ignored']).then(handleMessage, function (err) {
    return logerr(err);
  });
}
function sendServerQuit() {
  if (!session) return;
  session.call('application.exit.later', [5]).then(function (result) {
    return log('result ' + result);
  }, function (err) {
    return logerr(err);
  });
}
function toggleStream() {
  if (!subscription) {
    session.subscribe('image', handleMessage).then(function (result) {
      return subscription = result;
    });
    session.call('myprotocol.stream', ['image']).then(function (result) {
      return log('result ' + result);
    }, function (err) {
      return logerr(err);
    });
  } else {
    session.call('myprotocol.stop', ['image']).then(function (result) {
      return log('result ' + result);
    }, function (err) {
      return logerr(err);
    });
    session.unsubscribe(subscription);
    subscription = null;
  }
}
function wsclose() {
  if (!session) return;
  session.close(); // it's fine to destroy the WebsocketConnection, but you won't get the WS close message.
  // if (ws) ws.destroy();
  // ws = null;
}
function connect() {
  var direct = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  ws = null;

  if (direct) {
    ws = _src_WebsocketConnection__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance({
      urls: 'ws://localhost:8080/ws'
    });
  } else {
    var config = {
      application: 'simple'
    };
    ws = _src_SmartConnect__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
      config: config
    });
  }

  ws.onConnectionReady(function () {
    log('WS open');

    if (!session) {
      session = ws.getSession();
    }

    var canvas = document.querySelector('.imageCanvas');
    var ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, 300, 300);
  });
  ws.onConnectionClose(function () {
    log('WS close');
  });
  ws.onConnectionError(function (event) {
    log('WS error');
    console.error(event);
  });
  session = ws.connect();
}

/***/ }),

/***/ "./node_modules/json5/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/json5/dist/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  'use strict';

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var _global = createCommonjsModule(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
    : Function('return this')();

    if (typeof __g == 'number') {
      __g = global;
    } // eslint-disable-line no-undef

  });

  var _core = createCommonjsModule(function (module) {
    var core = module.exports = {
      version: '2.5.7'
    };

    if (typeof __e == 'number') {
      __e = core;
    } // eslint-disable-line no-undef

  });

  var _core_1 = _core.version;

  var _isObject = function _isObject(it) {
    return _typeof(it) === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function _anObject(it) {
    if (!_isObject(it)) {
      throw TypeError(it + ' is not an object!');
    }

    return it;
  };

  var _fails = function _fails(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  }; // Thank's IE8 for his funny defineProperty


  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  var document = _global.document; // typeof document.createElement is 'object' in old IE

  var is = _isObject(document) && _isObject(document.createElement);

  var _domCreate = function _domCreate(it) {
    return is ? document.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  }); // 7.1.1 ToPrimitive(input [, PreferredType])
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string


  var _toPrimitive = function _toPrimitive(it, S) {
    if (!_isObject(it)) {
      return it;
    }

    var fn, val;

    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) {
      return val;
    }

    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) {
      return val;
    }

    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) {
      return val;
    }

    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;
  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);

    P = _toPrimitive(P, true);

    _anObject(Attributes);

    if (_ie8DomDefine) {
      try {
        return dP(O, P, Attributes);
      } catch (e) {
        /* empty */
      }
    }

    if ('get' in Attributes || 'set' in Attributes) {
      throw TypeError('Accessors not supported!');
    }

    if ('value' in Attributes) {
      O[P] = Attributes.value;
    }

    return O;
  };
  var _objectDp = {
    f: f
  };

  var _propertyDesc = function _propertyDesc(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var hasOwnProperty = {}.hasOwnProperty;

  var _has = function _has(it, key) {
    return hasOwnProperty.call(it, key);
  };

  var id = 0;
  var px = Math.random();

  var _uid = function _uid(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var _redefine = createCommonjsModule(function (module) {
    var SRC = _uid('src');

    var TO_STRING = 'toString';
    var $toString = Function[TO_STRING];
    var TPL = ('' + $toString).split(TO_STRING);

    _core.inspectSource = function (it) {
      return $toString.call(it);
    };

    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';

      if (isFunction) {
        _has(val, 'name') || _hide(val, 'name', key);
      }

      if (O[key] === val) {
        return;
      }

      if (isFunction) {
        _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
      }

      if (O === _global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];

        _hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        _hide(O, key, val);
      } // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative

    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });
  });

  var _aFunction = function _aFunction(it) {
    if (typeof it != 'function') {
      throw TypeError(it + ' is not a function!');
    }

    return it;
  }; // optional / simple context binding


  var _ctx = function _ctx(fn, that, length) {
    _aFunction(fn);

    if (that === undefined) {
      return fn;
    }

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function ()
    /* ...args */
    {
      return fn.apply(that, arguments);
    };
  };

  var PROTOTYPE = 'prototype';

  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
    var key, own, out, exp;

    if (IS_GLOBAL) {
      source = name;
    }

    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined; // export native or passed

      out = (own ? target : source)[key]; // bind timers to global for call from export context

      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out; // extend global

      if (target) {
        _redefine(target, key, out, type & $export.U);
      } // export


      if (exports[key] != out) {
        _hide(exports, key, exp);
      }

      if (IS_PROTO && expProto[key] != out) {
        expProto[key] = out;
      }
    }
  };

  _global.core = _core; // type bitmap

  $export.F = 1; // forced

  $export.G = 2; // global

  $export.S = 4; // static

  $export.P = 8; // proto

  $export.B = 16; // bind

  $export.W = 32; // wrap

  $export.U = 64; // safe

  $export.R = 128; // real proto method for `library`

  var _export = $export; // 7.1.4 ToInteger

  var ceil = Math.ceil;
  var floor = Math.floor;

  var _toInteger = function _toInteger(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  }; // 7.2.1 RequireObjectCoercible(argument)


  var _defined = function _defined(it) {
    if (it == undefined) {
      throw TypeError("Can't call method on  " + it);
    }

    return it;
  }; // true  -> String#at
  // false -> String#codePointAt


  var _stringAt = function _stringAt(TO_STRING) {
    return function (that, pos) {
      var s = String(_defined(that));

      var i = _toInteger(pos);

      var l = s.length;
      var a, b;

      if (i < 0 || i >= l) {
        return TO_STRING ? '' : undefined;
      }

      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  var $at = _stringAt(false);

  _export(_export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos) {
      return $at(this, pos);
    }
  });

  var codePointAt = _core.String.codePointAt;
  var max = Math.max;
  var min = Math.min;

  var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };

  var fromCharCode = String.fromCharCode;
  var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

  _export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x) {
      var arguments$1 = arguments; // eslint-disable-line no-unused-vars

      var res = [];
      var aLen = arguments.length;
      var i = 0;
      var code;

      while (aLen > i) {
        code = +arguments$1[i++];

        if (_toAbsoluteIndex(code, 0x10ffff) !== code) {
          throw RangeError(code + ' is not a valid code point');
        }

        res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
      }

      return res.join('');
    }
  });

  var fromCodePoint = _core.String.fromCodePoint; // This is a generated file. Do not edit.

  var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
  var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
  var unicode = {
    Space_Separator: Space_Separator,
    ID_Start: ID_Start,
    ID_Continue: ID_Continue
  };
  var util = {
    isSpaceSeparator: function isSpaceSeparator(c) {
      return unicode.Space_Separator.test(c);
    },
    isIdStartChar: function isIdStartChar(c) {
      return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '$' || c === '_' || unicode.ID_Start.test(c);
    },
    isIdContinueChar: function isIdContinueChar(c) {
      return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '$' || c === '_' || c === "\u200C" || c === "\u200D" || unicode.ID_Continue.test(c);
    },
    isDigit: function isDigit(c) {
      return /[0-9]/.test(c);
    },
    isHexDigit: function isHexDigit(c) {
      return /[0-9A-Fa-f]/.test(c);
    }
  };
  var source;
  var parseState;
  var stack;
  var pos;
  var line;
  var column;
  var token;
  var key;
  var root;

  var parse = function parse(text, reviver) {
    source = String(text);
    parseState = 'start';
    stack = [];
    pos = 0;
    line = 1;
    column = 0;
    token = undefined;
    key = undefined;
    root = undefined;

    do {
      token = lex(); // This code is unreachable.
      // if (!parseStates[parseState]) {
      //     throw invalidParseState()
      // }

      parseStates[parseState]();
    } while (token.type !== 'eof');

    if (typeof reviver === 'function') {
      return internalize({
        '': root
      }, '', reviver);
    }

    return root;
  };

  function internalize(holder, name, reviver) {
    var value = holder[name];

    if (value != null && _typeof(value) === 'object') {
      for (var key in value) {
        var replacement = internalize(value, key, reviver);

        if (replacement === undefined) {
          delete value[key];
        } else {
          value[key] = replacement;
        }
      }
    }

    return reviver.call(holder, name, value);
  }

  var lexState;
  var buffer;
  var doubleQuote;
  var sign;
  var c;

  function lex() {
    lexState = 'default';
    buffer = '';
    doubleQuote = false;
    sign = 1;

    for (;;) {
      c = peek(); // This code is unreachable.
      // if (!lexStates[lexState]) {
      //     throw invalidLexState(lexState)
      // }

      var token = lexStates[lexState]();

      if (token) {
        return token;
      }
    }
  }

  function peek() {
    if (source[pos]) {
      return String.fromCodePoint(source.codePointAt(pos));
    }
  }

  function read() {
    var c = peek();

    if (c === '\n') {
      line++;
      column = 0;
    } else if (c) {
      column += c.length;
    } else {
      column++;
    }

    if (c) {
      pos += c.length;
    }

    return c;
  }

  var lexStates = {
    default: function default$1() {
      switch (c) {
        case '\t':
        case '\v':
        case '\f':
        case ' ':
        case "\xA0":
        case "\uFEFF":
        case '\n':
        case '\r':
        case "\u2028":
        case "\u2029":
          read();
          return;

        case '/':
          read();
          lexState = 'comment';
          return;

        case undefined:
          read();
          return newToken('eof');
      }

      if (util.isSpaceSeparator(c)) {
        read();
        return;
      } // This code is unreachable.
      // if (!lexStates[parseState]) {
      //     throw invalidLexState(parseState)
      // }


      return lexStates[parseState]();
    },
    comment: function comment() {
      switch (c) {
        case '*':
          read();
          lexState = 'multiLineComment';
          return;

        case '/':
          read();
          lexState = 'singleLineComment';
          return;
      }

      throw invalidChar(read());
    },
    multiLineComment: function multiLineComment() {
      switch (c) {
        case '*':
          read();
          lexState = 'multiLineCommentAsterisk';
          return;

        case undefined:
          throw invalidChar(read());
      }

      read();
    },
    multiLineCommentAsterisk: function multiLineCommentAsterisk() {
      switch (c) {
        case '*':
          read();
          return;

        case '/':
          read();
          lexState = 'default';
          return;

        case undefined:
          throw invalidChar(read());
      }

      read();
      lexState = 'multiLineComment';
    },
    singleLineComment: function singleLineComment() {
      switch (c) {
        case '\n':
        case '\r':
        case "\u2028":
        case "\u2029":
          read();
          lexState = 'default';
          return;

        case undefined:
          read();
          return newToken('eof');
      }

      read();
    },
    value: function value() {
      switch (c) {
        case '{':
        case '[':
          return newToken('punctuator', read());

        case 'n':
          read();
          literal('ull');
          return newToken('null', null);

        case 't':
          read();
          literal('rue');
          return newToken('boolean', true);

        case 'f':
          read();
          literal('alse');
          return newToken('boolean', false);

        case '-':
        case '+':
          if (read() === '-') {
            sign = -1;
          }

          lexState = 'sign';
          return;

        case '.':
          buffer = read();
          lexState = 'decimalPointLeading';
          return;

        case '0':
          buffer = read();
          lexState = 'zero';
          return;

        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          buffer = read();
          lexState = 'decimalInteger';
          return;

        case 'I':
          read();
          literal('nfinity');
          return newToken('numeric', Infinity);

        case 'N':
          read();
          literal('aN');
          return newToken('numeric', NaN);

        case '"':
        case "'":
          doubleQuote = read() === '"';
          buffer = '';
          lexState = 'string';
          return;
      }

      throw invalidChar(read());
    },
    identifierNameStartEscape: function identifierNameStartEscape() {
      if (c !== 'u') {
        throw invalidChar(read());
      }

      read();
      var u = unicodeEscape();

      switch (u) {
        case '$':
        case '_':
          break;

        default:
          if (!util.isIdStartChar(u)) {
            throw invalidIdentifier();
          }

          break;
      }

      buffer += u;
      lexState = 'identifierName';
    },
    identifierName: function identifierName() {
      switch (c) {
        case '$':
        case '_':
        case "\u200C":
        case "\u200D":
          buffer += read();
          return;

        case '\\':
          read();
          lexState = 'identifierNameEscape';
          return;
      }

      if (util.isIdContinueChar(c)) {
        buffer += read();
        return;
      }

      return newToken('identifier', buffer);
    },
    identifierNameEscape: function identifierNameEscape() {
      if (c !== 'u') {
        throw invalidChar(read());
      }

      read();
      var u = unicodeEscape();

      switch (u) {
        case '$':
        case '_':
        case "\u200C":
        case "\u200D":
          break;

        default:
          if (!util.isIdContinueChar(u)) {
            throw invalidIdentifier();
          }

          break;
      }

      buffer += u;
      lexState = 'identifierName';
    },
    sign: function sign$1() {
      switch (c) {
        case '.':
          buffer = read();
          lexState = 'decimalPointLeading';
          return;

        case '0':
          buffer = read();
          lexState = 'zero';
          return;

        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          buffer = read();
          lexState = 'decimalInteger';
          return;

        case 'I':
          read();
          literal('nfinity');
          return newToken('numeric', sign * Infinity);

        case 'N':
          read();
          literal('aN');
          return newToken('numeric', NaN);
      }

      throw invalidChar(read());
    },
    zero: function zero() {
      switch (c) {
        case '.':
          buffer += read();
          lexState = 'decimalPoint';
          return;

        case 'e':
        case 'E':
          buffer += read();
          lexState = 'decimalExponent';
          return;

        case 'x':
        case 'X':
          buffer += read();
          lexState = 'hexadecimal';
          return;
      }

      return newToken('numeric', sign * 0);
    },
    decimalInteger: function decimalInteger() {
      switch (c) {
        case '.':
          buffer += read();
          lexState = 'decimalPoint';
          return;

        case 'e':
        case 'E':
          buffer += read();
          lexState = 'decimalExponent';
          return;
      }

      if (util.isDigit(c)) {
        buffer += read();
        return;
      }

      return newToken('numeric', sign * Number(buffer));
    },
    decimalPointLeading: function decimalPointLeading() {
      if (util.isDigit(c)) {
        buffer += read();
        lexState = 'decimalFraction';
        return;
      }

      throw invalidChar(read());
    },
    decimalPoint: function decimalPoint() {
      switch (c) {
        case 'e':
        case 'E':
          buffer += read();
          lexState = 'decimalExponent';
          return;
      }

      if (util.isDigit(c)) {
        buffer += read();
        lexState = 'decimalFraction';
        return;
      }

      return newToken('numeric', sign * Number(buffer));
    },
    decimalFraction: function decimalFraction() {
      switch (c) {
        case 'e':
        case 'E':
          buffer += read();
          lexState = 'decimalExponent';
          return;
      }

      if (util.isDigit(c)) {
        buffer += read();
        return;
      }

      return newToken('numeric', sign * Number(buffer));
    },
    decimalExponent: function decimalExponent() {
      switch (c) {
        case '+':
        case '-':
          buffer += read();
          lexState = 'decimalExponentSign';
          return;
      }

      if (util.isDigit(c)) {
        buffer += read();
        lexState = 'decimalExponentInteger';
        return;
      }

      throw invalidChar(read());
    },
    decimalExponentSign: function decimalExponentSign() {
      if (util.isDigit(c)) {
        buffer += read();
        lexState = 'decimalExponentInteger';
        return;
      }

      throw invalidChar(read());
    },
    decimalExponentInteger: function decimalExponentInteger() {
      if (util.isDigit(c)) {
        buffer += read();
        return;
      }

      return newToken('numeric', sign * Number(buffer));
    },
    hexadecimal: function hexadecimal() {
      if (util.isHexDigit(c)) {
        buffer += read();
        lexState = 'hexadecimalInteger';
        return;
      }

      throw invalidChar(read());
    },
    hexadecimalInteger: function hexadecimalInteger() {
      if (util.isHexDigit(c)) {
        buffer += read();
        return;
      }

      return newToken('numeric', sign * Number(buffer));
    },
    string: function string() {
      switch (c) {
        case '\\':
          read();
          buffer += escape();
          return;

        case '"':
          if (doubleQuote) {
            read();
            return newToken('string', buffer);
          }

          buffer += read();
          return;

        case "'":
          if (!doubleQuote) {
            read();
            return newToken('string', buffer);
          }

          buffer += read();
          return;

        case '\n':
        case '\r':
          throw invalidChar(read());

        case "\u2028":
        case "\u2029":
          separatorChar(c);
          break;

        case undefined:
          throw invalidChar(read());
      }

      buffer += read();
    },
    start: function start() {
      switch (c) {
        case '{':
        case '[':
          return newToken('punctuator', read());
        // This code is unreachable since the default lexState handles eof.
        // case undefined:
        //     return newToken('eof')
      }

      lexState = 'value';
    },
    beforePropertyName: function beforePropertyName() {
      switch (c) {
        case '$':
        case '_':
          buffer = read();
          lexState = 'identifierName';
          return;

        case '\\':
          read();
          lexState = 'identifierNameStartEscape';
          return;

        case '}':
          return newToken('punctuator', read());

        case '"':
        case "'":
          doubleQuote = read() === '"';
          lexState = 'string';
          return;
      }

      if (util.isIdStartChar(c)) {
        buffer += read();
        lexState = 'identifierName';
        return;
      }

      throw invalidChar(read());
    },
    afterPropertyName: function afterPropertyName() {
      if (c === ':') {
        return newToken('punctuator', read());
      }

      throw invalidChar(read());
    },
    beforePropertyValue: function beforePropertyValue() {
      lexState = 'value';
    },
    afterPropertyValue: function afterPropertyValue() {
      switch (c) {
        case ',':
        case '}':
          return newToken('punctuator', read());
      }

      throw invalidChar(read());
    },
    beforeArrayValue: function beforeArrayValue() {
      if (c === ']') {
        return newToken('punctuator', read());
      }

      lexState = 'value';
    },
    afterArrayValue: function afterArrayValue() {
      switch (c) {
        case ',':
        case ']':
          return newToken('punctuator', read());
      }

      throw invalidChar(read());
    },
    end: function end() {
      // This code is unreachable since it's handled by the default lexState.
      // if (c === undefined) {
      //     read()
      //     return newToken('eof')
      // }
      throw invalidChar(read());
    }
  };

  function newToken(type, value) {
    return {
      type: type,
      value: value,
      line: line,
      column: column
    };
  }

  function literal(s) {
    for (var i = 0, list = s; i < list.length; i += 1) {
      var c = list[i];
      var p = peek();

      if (p !== c) {
        throw invalidChar(read());
      }

      read();
    }
  }

  function escape() {
    var c = peek();

    switch (c) {
      case 'b':
        read();
        return '\b';

      case 'f':
        read();
        return '\f';

      case 'n':
        read();
        return '\n';

      case 'r':
        read();
        return '\r';

      case 't':
        read();
        return '\t';

      case 'v':
        read();
        return '\v';

      case '0':
        read();

        if (util.isDigit(peek())) {
          throw invalidChar(read());
        }

        return '\0';

      case 'x':
        read();
        return hexEscape();

      case 'u':
        read();
        return unicodeEscape();

      case '\n':
      case "\u2028":
      case "\u2029":
        read();
        return '';

      case '\r':
        read();

        if (peek() === '\n') {
          read();
        }

        return '';

      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        throw invalidChar(read());

      case undefined:
        throw invalidChar(read());
    }

    return read();
  }

  function hexEscape() {
    var buffer = '';
    var c = peek();

    if (!util.isHexDigit(c)) {
      throw invalidChar(read());
    }

    buffer += read();
    c = peek();

    if (!util.isHexDigit(c)) {
      throw invalidChar(read());
    }

    buffer += read();
    return String.fromCodePoint(parseInt(buffer, 16));
  }

  function unicodeEscape() {
    var buffer = '';
    var count = 4;

    while (count-- > 0) {
      var c = peek();

      if (!util.isHexDigit(c)) {
        throw invalidChar(read());
      }

      buffer += read();
    }

    return String.fromCodePoint(parseInt(buffer, 16));
  }

  var parseStates = {
    start: function start() {
      if (token.type === 'eof') {
        throw invalidEOF();
      }

      push();
    },
    beforePropertyName: function beforePropertyName() {
      switch (token.type) {
        case 'identifier':
        case 'string':
          key = token.value;
          parseState = 'afterPropertyName';
          return;

        case 'punctuator':
          // This code is unreachable since it's handled by the lexState.
          // if (token.value !== '}') {
          //     throw invalidToken()
          // }
          pop();
          return;

        case 'eof':
          throw invalidEOF();
      } // This code is unreachable since it's handled by the lexState.
      // throw invalidToken()

    },
    afterPropertyName: function afterPropertyName() {
      // This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'punctuator' || token.value !== ':') {
      //     throw invalidToken()
      // }
      if (token.type === 'eof') {
        throw invalidEOF();
      }

      parseState = 'beforePropertyValue';
    },
    beforePropertyValue: function beforePropertyValue() {
      if (token.type === 'eof') {
        throw invalidEOF();
      }

      push();
    },
    beforeArrayValue: function beforeArrayValue() {
      if (token.type === 'eof') {
        throw invalidEOF();
      }

      if (token.type === 'punctuator' && token.value === ']') {
        pop();
        return;
      }

      push();
    },
    afterPropertyValue: function afterPropertyValue() {
      // This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'punctuator') {
      //     throw invalidToken()
      // }
      if (token.type === 'eof') {
        throw invalidEOF();
      }

      switch (token.value) {
        case ',':
          parseState = 'beforePropertyName';
          return;

        case '}':
          pop();
      } // This code is unreachable since it's handled by the lexState.
      // throw invalidToken()

    },
    afterArrayValue: function afterArrayValue() {
      // This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'punctuator') {
      //     throw invalidToken()
      // }
      if (token.type === 'eof') {
        throw invalidEOF();
      }

      switch (token.value) {
        case ',':
          parseState = 'beforeArrayValue';
          return;

        case ']':
          pop();
      } // This code is unreachable since it's handled by the lexState.
      // throw invalidToken()

    },
    end: function end() {// This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'eof') {
      //     throw invalidToken()
      // }
    }
  };

  function push() {
    var value;

    switch (token.type) {
      case 'punctuator':
        switch (token.value) {
          case '{':
            value = {};
            break;

          case '[':
            value = [];
            break;
        }

        break;

      case 'null':
      case 'boolean':
      case 'numeric':
      case 'string':
        value = token.value;
        break;
      // This code is unreachable.
      // default:
      //     throw invalidToken()
    }

    if (root === undefined) {
      root = value;
    } else {
      var parent = stack[stack.length - 1];

      if (Array.isArray(parent)) {
        parent.push(value);
      } else {
        parent[key] = value;
      }
    }

    if (value !== null && _typeof(value) === 'object') {
      stack.push(value);

      if (Array.isArray(value)) {
        parseState = 'beforeArrayValue';
      } else {
        parseState = 'beforePropertyName';
      }
    } else {
      var current = stack[stack.length - 1];

      if (current == null) {
        parseState = 'end';
      } else if (Array.isArray(current)) {
        parseState = 'afterArrayValue';
      } else {
        parseState = 'afterPropertyValue';
      }
    }
  }

  function pop() {
    stack.pop();
    var current = stack[stack.length - 1];

    if (current == null) {
      parseState = 'end';
    } else if (Array.isArray(current)) {
      parseState = 'afterArrayValue';
    } else {
      parseState = 'afterPropertyValue';
    }
  } // This code is unreachable.
  // function invalidParseState () {
  //     return new Error(`JSON5: invalid parse state '${parseState}'`)
  // }
  // This code is unreachable.
  // function invalidLexState (state) {
  //     return new Error(`JSON5: invalid lex state '${state}'`)
  // }


  function invalidChar(c) {
    if (c === undefined) {
      return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
    }

    return syntaxError("JSON5: invalid character '" + formatChar(c) + "' at " + line + ":" + column);
  }

  function invalidEOF() {
    return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
  } // This code is unreachable.
  // function invalidToken () {
  //     if (token.type === 'eof') {
  //         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
  //     }
  //     const c = String.fromCodePoint(token.value.codePointAt(0))
  //     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
  // }


  function invalidIdentifier() {
    column -= 5;
    return syntaxError("JSON5: invalid identifier character at " + line + ":" + column);
  }

  function separatorChar(c) {
    console.warn("JSON5: '" + formatChar(c) + "' in strings is not valid ECMAScript; consider escaping");
  }

  function formatChar(c) {
    var replacements = {
      "'": "\\'",
      '"': '\\"',
      '\\': '\\\\',
      '\b': '\\b',
      '\f': '\\f',
      '\n': '\\n',
      '\r': '\\r',
      '\t': '\\t',
      '\v': '\\v',
      '\0': '\\0',
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };

    if (replacements[c]) {
      return replacements[c];
    }

    if (c < ' ') {
      var hexString = c.charCodeAt(0).toString(16);
      return '\\x' + ('00' + hexString).substring(hexString.length);
    }

    return c;
  }

  function syntaxError(message) {
    var err = new SyntaxError(message);
    err.lineNumber = line;
    err.columnNumber = column;
    return err;
  }

  var stringify = function stringify(value, replacer, space) {
    var stack = [];
    var indent = '';
    var propertyList;
    var replacerFunc;
    var gap = '';
    var quote;

    if (replacer != null && _typeof(replacer) === 'object' && !Array.isArray(replacer)) {
      space = replacer.space;
      quote = replacer.quote;
      replacer = replacer.replacer;
    }

    if (typeof replacer === 'function') {
      replacerFunc = replacer;
    } else if (Array.isArray(replacer)) {
      propertyList = [];

      for (var i = 0, list = replacer; i < list.length; i += 1) {
        var v = list[i];
        var item = void 0;

        if (typeof v === 'string') {
          item = v;
        } else if (typeof v === 'number' || v instanceof String || v instanceof Number) {
          item = String(v);
        }

        if (item !== undefined && propertyList.indexOf(item) < 0) {
          propertyList.push(item);
        }
      }
    }

    if (space instanceof Number) {
      space = Number(space);
    } else if (space instanceof String) {
      space = String(space);
    }

    if (typeof space === 'number') {
      if (space > 0) {
        space = Math.min(10, Math.floor(space));
        gap = '          '.substr(0, space);
      }
    } else if (typeof space === 'string') {
      gap = space.substr(0, 10);
    }

    return serializeProperty('', {
      '': value
    });

    function serializeProperty(key, holder) {
      var value = holder[key];

      if (value != null) {
        if (typeof value.toJSON5 === 'function') {
          value = value.toJSON5(key);
        } else if (typeof value.toJSON === 'function') {
          value = value.toJSON(key);
        }
      }

      if (replacerFunc) {
        value = replacerFunc.call(holder, key, value);
      }

      if (value instanceof Number) {
        value = Number(value);
      } else if (value instanceof String) {
        value = String(value);
      } else if (value instanceof Boolean) {
        value = value.valueOf();
      }

      switch (value) {
        case null:
          return 'null';

        case true:
          return 'true';

        case false:
          return 'false';
      }

      if (typeof value === 'string') {
        return quoteString(value, false);
      }

      if (typeof value === 'number') {
        return String(value);
      }

      if (_typeof(value) === 'object') {
        return Array.isArray(value) ? serializeArray(value) : serializeObject(value);
      }

      return undefined;
    }

    function quoteString(value) {
      var quotes = {
        "'": 0.1,
        '"': 0.2
      };
      var replacements = {
        "'": "\\'",
        '"': '\\"',
        '\\': '\\\\',
        '\b': '\\b',
        '\f': '\\f',
        '\n': '\\n',
        '\r': '\\r',
        '\t': '\\t',
        '\v': '\\v',
        '\0': '\\0',
        "\u2028": "\\u2028",
        "\u2029": "\\u2029"
      };
      var product = '';

      for (var i = 0, list = value; i < list.length; i += 1) {
        var c = list[i];

        switch (c) {
          case "'":
          case '"':
            quotes[c]++;
            product += c;
            continue;
        }

        if (replacements[c]) {
          product += replacements[c];
          continue;
        }

        if (c < ' ') {
          var hexString = c.charCodeAt(0).toString(16);
          product += '\\x' + ('00' + hexString).substring(hexString.length);
          continue;
        }

        product += c;
      }

      var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) {
        return quotes[a] < quotes[b] ? a : b;
      });
      product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);
      return quoteChar + product + quoteChar;
    }

    function serializeObject(value) {
      if (stack.indexOf(value) >= 0) {
        throw TypeError('Converting circular structure to JSON5');
      }

      stack.push(value);
      var stepback = indent;
      indent = indent + gap;
      var keys = propertyList || Object.keys(value);
      var partial = [];

      for (var i = 0, list = keys; i < list.length; i += 1) {
        var key = list[i];
        var propertyString = serializeProperty(key, value);

        if (propertyString !== undefined) {
          var member = serializeKey(key) + ':';

          if (gap !== '') {
            member += ' ';
          }

          member += propertyString;
          partial.push(member);
        }
      }

      var final;

      if (partial.length === 0) {
        final = '{}';
      } else {
        var properties;

        if (gap === '') {
          properties = partial.join(',');
          final = '{' + properties + '}';
        } else {
          var separator = ',\n' + indent;
          properties = partial.join(separator);
          final = '{\n' + indent + properties + ',\n' + stepback + '}';
        }
      }

      stack.pop();
      indent = stepback;
      return final;
    }

    function serializeKey(key) {
      if (key.length === 0) {
        return quoteString(key, true);
      }

      var firstChar = String.fromCodePoint(key.codePointAt(0));

      if (!util.isIdStartChar(firstChar)) {
        return quoteString(key, true);
      }

      for (var i = firstChar.length; i < key.length; i++) {
        if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
          return quoteString(key, true);
        }
      }

      return key;
    }

    function serializeArray(value) {
      if (stack.indexOf(value) >= 0) {
        throw TypeError('Converting circular structure to JSON5');
      }

      stack.push(value);
      var stepback = indent;
      indent = indent + gap;
      var partial = [];

      for (var i = 0; i < value.length; i++) {
        var propertyString = serializeProperty(String(i), value);
        partial.push(propertyString !== undefined ? propertyString : 'null');
      }

      var final;

      if (partial.length === 0) {
        final = '[]';
      } else {
        if (gap === '') {
          var properties = partial.join(',');
          final = '[' + properties + ']';
        } else {
          var separator = ',\n' + indent;
          var properties$1 = partial.join(separator);
          final = '[\n' + indent + properties$1 + ',\n' + stepback + ']';
        }
      }

      stack.pop();
      indent = stepback;
      return final;
    }
  };

  var JSON5 = {
    parse: parse,
    stringify: stringify
  };
  var lib = JSON5;
  var es5 = lib;
  return es5;
});

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./src/CompositeClosureHelper/index.js":
/*!*********************************************!*\
  !*** ./src/CompositeClosureHelper/index.js ***!
  \*********************************************/
/*! exports provided: capitalize, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "capitalize", function() { return capitalize; });
// ----------------------------------------------------------------------------
// capitalize provided string
// ----------------------------------------------------------------------------
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
} // ----------------------------------------------------------------------------
// Add isA function and register your class name
// ----------------------------------------------------------------------------

function isA(publicAPI) {
  var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!model.isA) {
    model.isA = [];
  }

  if (name) {
    model.isA.push(name);
  }

  if (!publicAPI.isA) {
    publicAPI.isA = function (className) {
      return model.isA.indexOf(className) !== -1;
    };
  }
} // ----------------------------------------------------------------------------
// Basic setter
// ----------------------------------------------------------------------------


function set(publicAPI) {
  var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var names = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  names.forEach(function (name) {
    publicAPI["set".concat(capitalize(name))] = function (value) {
      model[name] = value;
    };
  });
} // ----------------------------------------------------------------------------
// Basic getter
// ----------------------------------------------------------------------------


function get(publicAPI) {
  var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var names = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  names.forEach(function (name) {
    publicAPI["get".concat(capitalize(name))] = function () {
      return model[name];
    };
  });
} // ----------------------------------------------------------------------------
// Add destroy function
// ----------------------------------------------------------------------------


function destroy(publicAPI) {
  var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var previousDestroy = publicAPI.destroy;

  if (!model.subscriptions) {
    model.subscriptions = [];
  }

  publicAPI.destroy = function () {
    if (previousDestroy) {
      previousDestroy();
    }

    while (model.subscriptions && model.subscriptions.length) {
      model.subscriptions.pop().unsubscribe();
    }

    Object.keys(model).forEach(function (field) {
      delete model[field];
    }); // Flag the instance beeing deleted

    model.deleted = true;
  };
} // ----------------------------------------------------------------------------
// Event handling: onXXX(callback), fireXXX(args...)
// ----------------------------------------------------------------------------


function event(publicAPI, model, eventName) {
  var asynchrounous = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var callbacks = [];
  var previousDestroy = publicAPI.destroy;

  function off(index) {
    callbacks[index] = null;
  }

  function on(index) {
    function unsubscribe() {
      off(index);
    }

    return Object.freeze({
      unsubscribe: unsubscribe
    });
  }

  publicAPI["fire".concat(capitalize(eventName))] = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (model.deleted) {
      console.log('instance deleted - can not call any method');
      return;
    }

    function processCallbacks() {
      callbacks.forEach(function (callback) {
        if (callback) {
          try {
            callback.apply(publicAPI, args);
          } catch (errObj) {
            console.log('Error event:', eventName, errObj);
          }
        }
      });
    }

    if (asynchrounous) {
      setTimeout(processCallbacks, 0);
    } else {
      processCallbacks();
    }
  };

  publicAPI["on".concat(capitalize(eventName))] = function (callback) {
    if (model.deleted) {
      console.log('instance deleted - can not call any method');
      return null;
    }

    var index = callbacks.length;
    callbacks.push(callback);
    return on(index);
  };

  publicAPI.destroy = function () {
    previousDestroy();
    callbacks.forEach(function (el, index) {
      return off(index);
    });
  };
} // ----------------------------------------------------------------------------
// Fetch handling: setXXXFetchCallback / return { addRequest }
// ----------------------------------------------------------------------------


function fetch(publicAPI, model, name) {
  var fetchCallback = null;
  var requestQueue = [];

  publicAPI["set".concat(capitalize(name), "FetchCallback")] = function (fetchMethod) {
    if (requestQueue.length) {
      fetchMethod(requestQueue);
    }

    fetchCallback = fetchMethod;
  };

  return {
    addRequest: function addRequest(request) {
      requestQueue.push(request);

      if (fetchCallback) {
        fetchCallback(requestQueue);
      }
    },
    resetRequests: function resetRequests(requestList) {
      while (requestQueue.length) {
        requestQueue.pop();
      }

      if (requestList) {
        // Rebuild request list
        requestList.forEach(function (req) {
          requestQueue.push(req);
        }); // Also trigger a request

        if (fetchCallback) {
          fetchCallback(requestQueue);
        }
      }
    }
  };
} // ----------------------------------------------------------------------------
// Dynamic array handler
//   - add${xxx}(item)
//   - remove${xxx}(item)
//   - get${xxx}() => [items...]
//   - removeAll${xxx}()
// ----------------------------------------------------------------------------


function dynamicArray(publicAPI, model, name) {
  if (!model[name]) {
    model[name] = [];
  }

  publicAPI["set".concat(capitalize(name))] = function (items) {
    model[name] = [].concat(items);
  };

  publicAPI["add".concat(capitalize(name))] = function (item) {
    model[name].push(item);
  };

  publicAPI["remove".concat(capitalize(name))] = function (item) {
    var index = model[name].indexOf(item);
    model[name].splice(index, 1);
  };

  publicAPI["get".concat(capitalize(name))] = function () {
    return model[name];
  };

  publicAPI["removeAll".concat(capitalize(name))] = function () {
    return model[name] = [];
  };
} // ----------------------------------------------------------------------------
// Chain function calls
// ----------------------------------------------------------------------------


function chain() {
  for (var _len2 = arguments.length, fn = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fn[_key2] = arguments[_key2];
  }

  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return fn.filter(function (i) {
      return !!i;
    }).forEach(function (i) {
      return i.apply(void 0, args);
    });
  };
} // ----------------------------------------------------------------------------
// Data Subscription
//   => dataHandler = {
//         // Set of default values you would expect in your metadata
//         defaultMetadata: {
//            numberOfBins: 32,
//         },
//
//         // Method used internally to store the data
//         set(model, data) { return !!sameAsBefore; }, // Return true if nothing has changed
//
//         // Method used internally to extract the data from the cache based on a given subscription
//         // This should return null/undefined if the data is not available (yet).
//         get(model, request, dataChanged) {},
//      }
// ----------------------------------------------------------------------------
// Methods generated with dataName = 'mutualInformation'
// => publicAPI
//     - onMutualInformationSubscriptionChange(callback) => subscription[unsubscribe() + update(variables = [], metadata = {})]
//     - fireMutualInformationSubscriptionChange(request)
//     - subscribeToMutualInformation(onDataReady, variables = [], metadata = {})
//     - setMutualInformation(data)
//     - hasMutualInformation(request, variable)
//     - destroy()
// ----------------------------------------------------------------------------


function dataSubscriber(publicAPI, model, dataName, dataHandler) {
  // Private members
  var dataSubscriptions = [];
  var forceFlushRequests = 0;
  var eventName = "".concat(dataName, "SubscriptionChange");
  var fireMethodName = "fire".concat(capitalize(eventName));
  var dataContainerName = "".concat(dataName, "_storage"); // Add data container to model if not exist

  if (!model[dataContainerName]) {
    model[dataContainerName] = {};
  } // Add event handling methods


  event(publicAPI, model, eventName);

  function off() {
    var count = dataSubscriptions.length;

    while (count) {
      count -= 1;
      dataSubscriptions[count] = null;
    }
  } // Internal function that will notify any subscriber with its data in a synchronous manner


  function flushDataToListener(dataListener, dataChanged) {
    try {
      if (dataListener) {
        var dataToForward = dataHandler.get(model[dataContainerName], dataListener.request, dataChanged);

        if (dataToForward && (JSON.stringify(dataToForward) !== dataListener.request.lastPush || dataListener.request.metadata.forceFlush)) {
          dataListener.request.lastPush = JSON.stringify(dataToForward);
          dataListener.onDataReady(dataToForward);
        }
      }
    } catch (err) {
      console.log("flush ".concat(dataName, " error caught:"), err);
    }
  } // onDataReady function will be called each time the setXXX method will be called and
  // when the actual subscription correspond to the data that has been set.
  // This is performed synchronously.
  // The default behavior is to avoid pushing data to subscribers if nothing has changed
  // since the last push.  However, by providing "forceFlush: true" in the metadata,
  // subscribers can indicate that they want data pushed to them even if there has been
  // no change since the last push.


  publicAPI["subscribeTo".concat(capitalize(dataName))] = function (onDataReady) {
    var variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var id = dataSubscriptions.length;
    var request = {
      id: id,
      variables: variables,
      metadata: Object.assign({}, dataHandler.defaultMetadata, metadata)
    };

    if (request.metadata.forceFlush) {
      forceFlushRequests += 1;
    }

    var dataListener = {
      onDataReady: onDataReady,
      request: request
    };
    dataSubscriptions.push(dataListener);
    publicAPI[fireMethodName](request);
    flushDataToListener(dataListener, null);
    return {
      unsubscribe: function unsubscribe() {
        request.action = 'unsubscribe';

        if (request.metadata.forceFlush) {
          forceFlushRequests -= 1;
        }

        publicAPI[fireMethodName](request);
        dataSubscriptions[id] = null;
      },
      update: function update(vars, meta) {
        request.variables = [].concat(vars);

        if (meta && meta.forceFlush !== request.metadata.forceFlush) {
          forceFlushRequests += meta.forceFlush ? 1 : -1;
        }

        request.metadata = Object.assign({}, request.metadata, meta);
        publicAPI[fireMethodName](request);
        flushDataToListener(dataListener, null);
      }
    };
  }; // Method use to store data


  publicAPI["set".concat(capitalize(dataName))] = function (data) {
    // Process all subscription to see if we can trigger a notification
    if (!dataHandler.set(model[dataContainerName], data) || forceFlushRequests > 0) {
      dataSubscriptions.forEach(function (dataListener) {
        return flushDataToListener(dataListener, data);
      });
    }
  }; // Retrieve data for a single variable from our cache, given current request.
  // Call from inside on{dataName}SubscriptionChange to find out if
  // cache needs to be updated.


  publicAPI["has".concat(capitalize(dataName))] = function (inRequest, variable) {
    try {
      if (inRequest) {
        var request = Object.assign({}, inRequest, {
          variables: [variable]
        });
        var dataToForward = dataHandler.get(model[dataContainerName], request, null);

        if (dataToForward) {
          return true;
        }
      }
    } catch (err) {
      console.log("has ".concat(dataName, " error caught:"), err);
    }

    return false;
  };

  publicAPI.destroy = chain(off, publicAPI.destroy);
} // ----------------------------------------------------------------------------
// newInstance
// ----------------------------------------------------------------------------


function newInstance(extend) {
  return function () {
    var initialValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = {};
    var publicAPI = {};
    extend(publicAPI, model, initialValues);
    return Object.freeze(publicAPI);
  };
}

/* harmony default export */ __webpack_exports__["default"] = ({
  chain: chain,
  dataSubscriber: dataSubscriber,
  destroy: destroy,
  dynamicArray: dynamicArray,
  event: event,
  fetch: fetch,
  get: get,
  isA: isA,
  newInstance: newInstance,
  set: set
});

/***/ }),

/***/ "./src/ProcessLauncher/index.js":
/*!**************************************!*\
  !*** ./src/ProcessLauncher/index.js ***!
  \**************************************/
/*! exports provided: extend, newInstance, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newInstance", function() { return newInstance; });
/* harmony import */ var _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CompositeClosureHelper */ "./src/CompositeClosureHelper/index.js");
/* global XMLHttpRequest */

var connections = [];

function ProcessLauncher(publicAPI, model) {
  var _this = this;

  publicAPI.start = function (config) {
    var xhr = new XMLHttpRequest(),
        url = model.endPoint;
    xhr.open('POST', url, true);
    xhr.responseType = 'json';
    var supportsJson = 'response' in xhr && xhr.responseType === 'json';

    xhr.onload = function (e) {
      var response = supportsJson ? xhr.response : JSON.parse(xhr.response);

      if (xhr.status === 200 && response && !response.error) {
        // Add connection to our global list
        connections.push(response);
        publicAPI.fireProcessReady(response);
        return;
      }

      publicAPI.fireError(xhr);
    };

    xhr.onerror = function (e) {
      publicAPI.fireError(xhr);
    };

    xhr.send(JSON.stringify(config));
  };

  publicAPI.fetchConnection = function (sessionId) {
    var xhr = new XMLHttpRequest(),
        url = [model.endPoint, sessionId].join('/');
    xhr.open('GET', url, true);
    xhr.responseType = 'json';
    var supportsJson = 'response' in xhr && xhr.responseType === 'json';

    xhr.onload = function (e) {
      if (_this.status === 200) {
        publicAPI.fireFetch(supportsJson ? xhr.response : JSON.parse(xhr.response));
        return;
      }

      publicAPI.fireError(xhr);
    };

    xhr.onerror = function (e) {
      publicAPI.fireError(xhr);
    };

    xhr.send();
  };

  publicAPI.stop = function (connection) {
    var xhr = new XMLHttpRequest(),
        url = [model.endPoint, connection.id].join('/');
    xhr.open('DELETE', url, true);
    xhr.responseType = 'json';
    var supportsJson = 'response' in xhr && xhr.responseType === 'json';

    xhr.onload = function (e) {
      if (_this.status === 200) {
        var response = supportsJson ? xhr.response : JSON.parse(xhr.response); // Remove connection from the list
        // FIXME / TODO

        publicAPI.fireProcessStopped(response);
        return;
      }

      publicAPI.fireError(xhr);
    };

    xhr.onerror = function (e) {
      publicAPI.fireError(xhr);
    };

    xhr.send();
  };

  publicAPI.listConnections = function () {
    return connections;
  };
}

var DEFAULT_VALUES = {
  endPoint: null
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].destroy(publicAPI, model);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ProcessReady');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ProcessStopped');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'Fetch');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'Error');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].isA(publicAPI, model, 'ProcessLauncher');
  ProcessLauncher(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend);
/* harmony default export */ __webpack_exports__["default"] = ({
  newInstance: newInstance,
  extend: extend
});

/***/ }),

/***/ "./src/SmartConnect/index.js":
/*!***********************************!*\
  !*** ./src/SmartConnect/index.js ***!
  \***********************************/
/*! exports provided: DEFAULT_SESSION_MANAGER_URL, DEFAULT_SESSION_URL, extend, newInstance, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SESSION_MANAGER_URL", function() { return DEFAULT_SESSION_MANAGER_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SESSION_URL", function() { return DEFAULT_SESSION_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newInstance", function() { return newInstance; });
/* harmony import */ var _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CompositeClosureHelper */ "./src/CompositeClosureHelper/index.js");
/* harmony import */ var _ProcessLauncher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ProcessLauncher */ "./src/ProcessLauncher/index.js");
/* harmony import */ var _WebsocketConnection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebsocketConnection */ "./src/WebsocketConnection/index.js");
/* global window */



var DEFAULT_SESSION_MANAGER_URL = "".concat(window.location.protocol, "//").concat(window.location.hostname, ":").concat(window.location.port, "/paraview/"),
    DEFAULT_SESSION_URL = "".concat(window.location.protocol === 'https' ? 'wss' : 'ws', "://").concat(window.location.hostname, ":").concat(window.location.port, "/ws");

function wsConnect(publicAPI, model) {
  var wsConnection = _WebsocketConnection__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
    urls: model.config.sessionURL,
    secret: model.config.secret,
    retry: model.config.retry
  });
  model.subscriptions.push(wsConnection.onConnectionReady(publicAPI.readyForwarder));
  model.subscriptions.push(wsConnection.onConnectionError(publicAPI.errorForwarder));
  model.subscriptions.push(wsConnection.onConnectionClose(publicAPI.closeForwarder)); // Add to the garbage collector

  model.gc.push(wsConnection);
  return wsConnection.connect();
}

function smartConnect(publicAPI, model) {
  var session = null;
  model.gc = []; // Event forwarders

  publicAPI.readyForwarder = function (data) {
    session = data.getSession();
    publicAPI.fireConnectionReady(data);
  };

  publicAPI.errorForwarder = function (data, err) {
    publicAPI.fireConnectionError(data, err);
  };

  publicAPI.closeForwarder = function (data) {
    publicAPI.fireConnectionClose(data);
  };

  publicAPI.connect = function () {
    if (model.configDecorator) {
      model.config = model.configDecorator(model.config);
    }

    if (model.config.sessionURL) {
      // We have a direct connection URL
      session = wsConnect(publicAPI, model);
    } else {
      // We need to use the Launcher
      var launcher = _ProcessLauncher__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
        endPoint: model.config.sessionManagerURL || DEFAULT_SESSION_MANAGER_URL
      });
      model.subscriptions.push(launcher.onProcessReady(function (data) {
        if (model.configDecorator) {
          model.config = model.configDecorator(Object.assign({}, model.config, data));
        } else {
          model.config = Object.assign({}, model.config, data);
        }

        session = wsConnect(publicAPI, model);
      }));
      model.subscriptions.push(launcher.onError(function (data) {
        if (data && data.response && data.response.error) {
          publicAPI.errorForwarder(data, data.response.error);
        } else {
          // Try to use standard connection URL
          model.config.sessionURL = DEFAULT_SESSION_URL;
          session = wsConnect(publicAPI, model);
        }
      }));
      launcher.start(model.config); // Add to the garbage collector

      model.gc.push(launcher);
    }
  };

  publicAPI.getSession = function () {
    return session;
  };

  function cleanUp() {
    if (session) {
      session.close();
    }

    session = null;

    while (model.gc.length) {
      model.gc.pop().destroy();
    }
  }

  publicAPI.destroy = _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].chain(cleanUp, publicAPI.destroy);
}

var DEFAULT_VALUES = {
  config: {} // configDecorator: null,

};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].destroy(publicAPI, model);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ConnectionReady');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ConnectionClose');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ConnectionError');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].isA(publicAPI, model, 'SmartConnect');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['config', 'configDecorator']);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].set(publicAPI, model, ['configDecorator']);
  smartConnect(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend);
/* harmony default export */ __webpack_exports__["default"] = ({
  newInstance: newInstance,
  extend: extend
});

/***/ }),

/***/ "./src/WebsocketConnection/index.js":
/*!******************************************!*\
  !*** ./src/WebsocketConnection/index.js ***!
  \******************************************/
/*! exports provided: extend, newInstance, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newInstance", function() { return newInstance; });
/* harmony import */ var _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CompositeClosureHelper */ "./src/CompositeClosureHelper/index.js");
/* harmony import */ var _session__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./session */ "./src/WebsocketConnection/session.js");
// Helper borrowed from paraviewweb/src/Common/Core


var DEFAULT_SECRET = 'wslink-secret';

function getTransportObject(url) {
  var idx = url.indexOf(':'),
      protocol = url.substring(0, idx);

  if (protocol === 'ws' || protocol === 'wss') {
    return {
      type: 'websocket',
      url: url
    };
  }

  throw new Error("Unknown protocol (".concat(protocol, ") for url (").concat(url, ").  Unable to create transport object."));
}

function WebsocketConnection(publicAPI, model) {
  // TODO Should we try to reconnect on error?
  publicAPI.connect = function () {
    // without a URL we can't do anything.
    if (!model.urls) return null; // concat allows a single url or a list.

    var uriList = [].concat(model.urls),
        transports = [];

    for (var i = 0; i < uriList.length; i += 1) {
      var url = uriList[i];

      try {
        var transport = getTransportObject(url);
        transports.push(transport);
      } catch (transportCreateError) {
        console.error(transportCreateError);
        publicAPI.fireConnectionError(publicAPI, transportCreateError);
        return null;
      }
    }

    if (model.connection) {
      if (model.connection.url !== transports[0].url) {
        model.connection.close();
      } else if (model.connection.readyState === 0 || model.connection.readyState === 1) {
        // already connected.
        return model.session;
      }
    }

    try {
      model.connection = new WebSocket(transports[0].url);
    } catch (err) {
      // If the server isn't running, we still don't enter here on Chrome -
      // console shows a net::ERR_CONNECTION_REFUSED error inside WebSocket
      console.error(err);
      publicAPI.fireConnectionError(publicAPI, err);
      return null;
    }

    model.connection.binaryType = 'blob';
    if (!model.secret) model.secret = DEFAULT_SECRET;
    model.session = _session__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
      ws: model.connection,
      secret: model.secret
    });

    model.connection.onopen = function (event) {
      if (model.session) {
        // sends handshake message - wait for reply before issuing ready()
        model.session.onconnect(event).then(function () {
          publicAPI.fireConnectionReady(publicAPI);
        }, function (err) {
          console.error('Connection error', err);
          publicAPI.fireConnectionError(publicAPI, err);
        });
      }
    };

    model.connection.onclose = function (event) {
      publicAPI.fireConnectionClose(publicAPI);
      model.connection = null; // return !model.retry; // true => Stop retry
    };

    model.connection.onerror = function (event) {
      publicAPI.fireConnectionError(publicAPI, event);
    }; // handle messages in the session.


    model.connection.onmessage = function (event) {
      model.session.onmessage(event);
    };

    return model.session;
  };

  publicAPI.getSession = function () {
    return model.session;
  };

  publicAPI.getUrl = function () {
    return model.connection ? model.connection.url : undefined;
  };

  function cleanUp() {
    var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

    if (model.session && timeout > 0) {
      model.session.call('application.exit.later', [timeout]);
    }

    if (model.connection) {
      model.connection.close();
    }

    model.connection = null;
  }

  publicAPI.destroy = _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].chain(cleanUp, publicAPI.destroy);
}

var DEFAULT_VALUES = {
  secret: DEFAULT_SECRET,
  connection: null,
  session: null,
  retry: false
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].destroy(publicAPI, model);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ConnectionReady');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ConnectionClose');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'ConnectionError');
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].isA(publicAPI, model, 'WebsocketConnection');
  WebsocketConnection(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

/* harmony default export */ __webpack_exports__["default"] = ({
  newInstance: newInstance,
  extend: extend
});

/***/ }),

/***/ "./src/WebsocketConnection/session.js":
/*!********************************************!*\
  !*** ./src/WebsocketConnection/session.js ***!
  \********************************************/
/*! exports provided: extend, newInstance, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newInstance", function() { return newInstance; });
/* harmony import */ var _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../CompositeClosureHelper */ "./src/CompositeClosureHelper/index.js");
/* harmony import */ var json5__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! json5 */ "./node_modules/json5/dist/index.js");
/* harmony import */ var json5__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(json5__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Helper borrowed from paraviewweb/src/Common/Core



function Session(publicAPI, model) {
  var CLIENT_ERROR = -32099;
  var msgCount = 0;
  var inFlightRpc = {};
  var attachments = [];
  var attachmentsToSend = {};
  var attachmentId = 1;
  var regexAttach = /^wslink_bin[\d]+$/; // matches 'rpc:client3:21'
  // client may be dot-separated and include '_'
  // number is message count - unique.
  // matches 'publish:dot.separated.topic:42'

  var regexRPC = /^(rpc|publish|system):(\w+(?:\.\w+)*):(?:\d+)$/;
  var subscriptions = {};
  var clientID = null;

  publicAPI.defer = function () {
    var deferred = {};
    deferred.promise = new Promise(function (resolve, reject) {
      deferred.resolve = resolve;
      deferred.reject = reject;
    });
    return deferred;
  };

  publicAPI.onconnect = function (event) {
    // send hello message
    var deferred = publicAPI.defer();
    var id = 'system:c0:0';
    inFlightRpc[id] = deferred;
    model.ws.send(JSON.stringify({
      wslink: '1.0',
      id: id,
      method: 'wslink.hello',
      args: [{
        secret: model.secret
      }],
      kwargs: {}
    }));
    return deferred.promise;
  };

  publicAPI.call = function (method) {
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var kwargs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    // create a promise that we will use to notify the caller of the result.
    var deferred = publicAPI.defer(); // readyState OPEN === 1

    if (model.ws && clientID && model.ws.readyState === 1) {
      var id = "rpc:".concat(clientID, ":").concat(msgCount++);
      inFlightRpc[id] = deferred;
      var msg = JSON.stringify({
        wslink: '1.0',
        id: id,
        method: method,
        args: args,
        kwargs: kwargs
      });

      if (Object.keys(attachmentsToSend).length) {
        var sendBinary = function sendBinary(key) {
          if (key in attachmentsToSend) {
            // binary header
            model.ws.send(JSON.stringify({
              wslink: '1.0',
              method: 'wslink.binary.attachment',
              args: [key]
            })); // send binary

            model.ws.send(attachmentsToSend[key], {
              binary: true
            });
            delete attachmentsToSend[key];
          }
        };

        var findBinary = function findBinary(o) {
          if (o) {
            if (Array.isArray(o)) {
              o.forEach(function (v) {
                return findBinary(v);
              });
            } else if (o.constructor === Object) {
              Object.keys(o).forEach(function (k) {
                return findBinary(o[k]);
              });
            } else if (regexAttach.test(o)) {
              sendBinary(o);
            }
          }

          ;
        };

        findBinary(args);
        findBinary(kwargs);
      }

      model.ws.send(JSON.stringify({
        wslink: '1.0',
        id: id,
        method: method,
        args: args,
        kwargs: kwargs
      }));
    } else {
      deferred.reject({
        code: CLIENT_ERROR,
        message: "RPC call ".concat(method, " unsuccessful: connection not open")
      });
    }

    return deferred.promise;
  };

  publicAPI.subscribe = function (topic, callback) {
    var deferred = publicAPI.defer();

    if (model.ws && clientID) {
      // we needs to track subscriptions, to trigger callback when publish is received.
      if (!subscriptions[topic]) subscriptions[topic] = [];
      subscriptions[topic].push(callback); // we can notify the server, but we don't need to, if the server always sends messages unconditionally.
      // model.ws.send(JSON.stringify({ wslink: '1.0', id: `subscribe:${msgCount++}`, method, args: [] }));

      deferred.resolve({
        topic: topic,
        callback: callback
      });
    } else {
      deferred.reject({
        code: CLIENT_ERROR,
        message: "Subscribe call ".concat(topic, " unsuccessful: connection not open")
      });
    }

    return deferred.promise;
  };

  publicAPI.unsubscribe = function (info) {
    var deferred = publicAPI.defer();
    var topic = info.topic,
        callback = info.callback;

    if (!subscriptions[topic]) {
      deferred.reject({
        code: CLIENT_ERROR,
        message: "Unsubscribe call ".concat(topic, " unsuccessful: not subscribed")
      });
      return deferred.promise;
    }

    var index = subscriptions[topic].indexOf(callback);

    if (index !== -1) {
      subscriptions[topic].splice(index, 1);
      deferred.resolve();
    } else {
      deferred.reject({
        code: CLIENT_ERROR,
        message: "Unsubscribe call ".concat(topic, " unsuccessful: callback not found")
      });
    }

    return deferred.promise;
  };

  publicAPI.close = function () {
    var deferred = publicAPI.defer(); // some transports might be able to close the session without closing the connection. Not true for websocket...

    model.ws.close();
    deferred.resolve();
    return deferred.promise;
  }; // split out to support a message with a bare binary attachment.


  function getAttachment(binaryKey) {
    // console.log('Adding binary attachment', binaryKey);
    var index = attachments.findIndex(function (att) {
      return att.key === binaryKey;
    });

    if (index !== -1) {
      var result = attachments[index].data; // TODO if attachment is sent mulitple times, we shouldn't remove it yet.

      attachments.splice(index, 1);
      return result;
    }

    console.error('Binary attachment key found without matching attachment');
    return null;
  } // To do a full traversal of nested objects/lists, we need recursion.


  function addAttachment(obj_list) {
    for (var key in obj_list) {
      if (typeof obj_list[key] === 'string' && regexAttach.test(obj_list[key])) {
        var binaryKey = obj_list[key];
        var replacement = getAttachment(binaryKey);
        if (replacement !== null) obj_list[key] = replacement;
      } else if (_typeof(obj_list[key]) === 'object') {
        // arrays are also 'object' with this test.
        addAttachment(obj_list[key]);
      }
    }
  }

  publicAPI.onmessage = function (event) {
    if (event.data instanceof ArrayBuffer || event.data instanceof Blob) {
      // we've gotten a header with the keys for this binary data.
      // we will soon receive a json message with embedded ids of the binary objects.
      // Save with it's key, in order.
      // console.log('Saving binary attachment');
      var foundIt = false;

      for (var i = 0; i < attachments.length; i++) {
        if (attachments[i].data === null) {
          attachments[i].data = event.data;
          foundIt = true;
          break;
        }
      }

      if (!foundIt) {
        console.error('Missing header for received binary message');
      }
    } else {
      var payload;

      try {
        payload = json5__WEBPACK_IMPORTED_MODULE_1___default.a.parse(event.data);
      } catch (e) {
        console.error("Malformed message: ", event.data); // debugger;
      }

      if (!payload) return;

      if (!payload.id) {
        // Notification-only message from the server - should be binary attachment header
        // console.log('Notify', payload);
        if (payload.method === 'wslink.binary.attachment') {
          payload.args.forEach(function (key) {
            attachments.push({
              key: key,
              data: null
            });
          });
        }

        return;
      }

      if (payload.error) {
        // kill any attachments
        attachments.length = 0;
        var deferred = inFlightRpc[payload.id];

        if (deferred) {
          deferred.reject(payload.error);
        } else {
          console.error('Server error:', payload.error);
        }
      } else {
        if (payload.result && attachments.length > 0) {
          if (typeof payload.result === 'string' && regexAttach.test(payload.result)) {
            var replacement = getAttachment(payload.result);
            if (replacement !== null) payload.result = replacement;
          } else {
            addAttachment(payload.result);
          }
        }

        var match = regexRPC.exec(payload.id);

        if (match) {
          var type = match[1];

          if (type === 'rpc') {
            var _deferred = inFlightRpc[payload.id];

            if (!_deferred) {
              console.log('session message id without matching call, dropped', payload);
              return;
            }

            _deferred.resolve(payload.result);
          } else if (type == 'publish') {
            console.assert(inFlightRpc[payload.id] === undefined, 'publish message received matching in-flight rpc call'); // regex extracts the topic for us.

            var topic = match[2];

            if (!subscriptions[topic]) {
              return;
            } // for each callback, provide the message data. Wrap in an array, for back-compatibility with WAMP


            subscriptions[topic].forEach(function (callback) {
              return callback([payload.result]);
            });
          } else if (type == 'system') {
            // console.log('DBG system:', payload.id, payload.result);
            var _deferred2 = inFlightRpc[payload.id];

            if (payload.id === 'system:c0:0') {
              clientID = payload.result.clientID;
              if (_deferred2) _deferred2.resolve(clientID);
            } else {
              console.error('Unknown system message', payload.id);
              if (_deferred2) _deferred2.reject({
                code: CLIENT_ERROR,
                message: "Unknown system message ".concat(payload.id)
              });
            }
          } else {
            console.error('Unknown rpc id format', payload.id);
          }
        }
      }

      delete inFlightRpc[payload.id];
    }
  };

  publicAPI.addAttachment = function (payload) {
    var binaryId = "wslink_bin".concat(attachmentId);
    attachmentsToSend[binaryId] = payload;
    attachmentId++;
    return binaryId;
  };
}

var DEFAULT_VALUES = {
  secret: 'wslink-secret',
  ws: null
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].destroy(publicAPI, model);
  _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].isA(publicAPI, model, 'Session');
  Session(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _CompositeClosureHelper__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

/* harmony default export */ __webpack_exports__["default"] = ({
  newInstance: newInstance,
  extend: extend
});

/***/ }),

/***/ "./test/main.js-exposed":
/*!******************************!*\
  !*** ./test/main.js-exposed ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["app"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--5-0!./main.js */ "./node_modules/babel-loader/lib/index.js?!./test/main.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9tYWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uNS9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvc2l0ZUNsb3N1cmVIZWxwZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Byb2Nlc3NMYXVuY2hlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU21hcnRDb25uZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9XZWJzb2NrZXRDb25uZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9XZWJzb2NrZXRDb25uZWN0aW9uL3Nlc3Npb24uanMiLCJ3ZWJwYWNrOi8vLy4vdGVzdC9tYWluLmpzLWV4cG9zZWQiXSwibmFtZXMiOlsiaHRtbENvbnRlbnQiLCJyb290Q29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udHJvbENvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImlubmVySFRNTCIsImlucHV0RWxlbWVudCIsImxvZ091dHB1dCIsIndzIiwic3Vic2NyaXB0aW9uIiwic2Vzc2lvbiIsImxvZyIsIm1zZyIsImNvbnNvbGUiLCJsb2dlcnIiLCJlcnIiLCJlcnJvciIsImNvZGUiLCJtZXNzYWdlIiwiZGF0YSIsInNlbmRJbnB1dCIsInR5cGUiLCJKU09OIiwicGFyc2UiLCJ2YWx1ZSIsImNhbGwiLCJ0aGVuIiwicmVzdWx0Iiwic2VuZEltYWdlIiwiaGFuZGxlTWVzc2FnZSIsImluRGF0YSIsIkFycmF5IiwiaXNBcnJheSIsImJsb2IiLCJCbG9iIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsImltZyIsIkltYWdlIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImUiLCJkcmF3SW1hZ2UiLCJzcmMiLCJ0YXJnZXQiLCJyZWFkQXNEYXRhVVJMIiwidGVzdE5lc3RpbmciLCJhcnIiLCJVaW50OEFycmF5IiwibGVuZ3RoIiwiZm9yRWFjaCIsImQiLCJpIiwiYnl0ZXNMaXN0IiwiYmwiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInNlbmRNaXN0YWtlIiwic2VuZFNlcnZlclF1aXQiLCJ0b2dnbGVTdHJlYW0iLCJzdWJzY3JpYmUiLCJ1bnN1YnNjcmliZSIsIndzY2xvc2UiLCJjbG9zZSIsImNvbm5lY3QiLCJkaXJlY3QiLCJXZWJzb2NrZXRDb25uZWN0aW9uIiwibmV3SW5zdGFuY2UiLCJ1cmxzIiwiY29uZmlnIiwiYXBwbGljYXRpb24iLCJTbWFydENvbm5lY3QiLCJvbkNvbm5lY3Rpb25SZWFkeSIsImdldFNlc3Npb24iLCJjbGVhclJlY3QiLCJvbkNvbm5lY3Rpb25DbG9zZSIsIm9uQ29ubmVjdGlvbkVycm9yIiwiZXZlbnQiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZm4iLCJfZ2xvYmFsIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsIl9jb3JlIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJfY29yZV8xIiwiX2lzT2JqZWN0IiwiaXQiLCJfYW5PYmplY3QiLCJUeXBlRXJyb3IiLCJfZmFpbHMiLCJleGVjIiwiX2Rlc2NyaXB0b3JzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJhIiwiaXMiLCJfZG9tQ3JlYXRlIiwiX2llOERvbURlZmluZSIsIl90b1ByaW1pdGl2ZSIsIlMiLCJ2YWwiLCJ0b1N0cmluZyIsInZhbHVlT2YiLCJkUCIsImYiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJfb2JqZWN0RHAiLCJfcHJvcGVydHlEZXNjIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2hpZGUiLCJvYmplY3QiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIl9oYXMiLCJpZCIsInB4IiwicmFuZG9tIiwiX3VpZCIsImNvbmNhdCIsInVuZGVmaW5lZCIsIl9yZWRlZmluZSIsIlNSQyIsIlRPX1NUUklORyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInByb3RvdHlwZSIsIl9hRnVuY3Rpb24iLCJfY3R4IiwidGhhdCIsImIiLCJjIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJQUk9UT1RZUEUiLCIkZXhwb3J0IiwibmFtZSIsInNvdXJjZSIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsImV4cFByb3RvIiwib3duIiwib3V0IiwiZXhwIiwiVSIsIlciLCJSIiwiX2V4cG9ydCIsImNlaWwiLCJmbG9vciIsIl90b0ludGVnZXIiLCJpc05hTiIsIl9kZWZpbmVkIiwiX3N0cmluZ0F0IiwicG9zIiwicyIsImwiLCJjaGFyQ29kZUF0IiwiY2hhckF0Iiwic2xpY2UiLCIkYXQiLCJjb2RlUG9pbnRBdCIsIm1heCIsIm1pbiIsIl90b0Fic29sdXRlSW5kZXgiLCJpbmRleCIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsIngiLCJhcmd1bWVudHMkMSIsInJlcyIsImFMZW4iLCJSYW5nZUVycm9yIiwicHVzaCIsIlNwYWNlX1NlcGFyYXRvciIsIklEX1N0YXJ0IiwiSURfQ29udGludWUiLCJ1bmljb2RlIiwidXRpbCIsImlzU3BhY2VTZXBhcmF0b3IiLCJ0ZXN0IiwiaXNJZFN0YXJ0Q2hhciIsImlzSWRDb250aW51ZUNoYXIiLCJpc0RpZ2l0IiwiaXNIZXhEaWdpdCIsInBhcnNlU3RhdGUiLCJzdGFjayIsImxpbmUiLCJjb2x1bW4iLCJ0b2tlbiIsInJvb3QiLCJ0ZXh0IiwicmV2aXZlciIsImxleCIsInBhcnNlU3RhdGVzIiwiaW50ZXJuYWxpemUiLCJob2xkZXIiLCJyZXBsYWNlbWVudCIsImxleFN0YXRlIiwiYnVmZmVyIiwiZG91YmxlUXVvdGUiLCJzaWduIiwicGVlayIsImxleFN0YXRlcyIsInJlYWQiLCJkZWZhdWx0IiwiZGVmYXVsdCQxIiwibmV3VG9rZW4iLCJjb21tZW50IiwiaW52YWxpZENoYXIiLCJtdWx0aUxpbmVDb21tZW50IiwibXVsdGlMaW5lQ29tbWVudEFzdGVyaXNrIiwic2luZ2xlTGluZUNvbW1lbnQiLCJsaXRlcmFsIiwiSW5maW5pdHkiLCJOYU4iLCJpZGVudGlmaWVyTmFtZVN0YXJ0RXNjYXBlIiwidSIsInVuaWNvZGVFc2NhcGUiLCJpbnZhbGlkSWRlbnRpZmllciIsImlkZW50aWZpZXJOYW1lIiwiaWRlbnRpZmllck5hbWVFc2NhcGUiLCJzaWduJDEiLCJ6ZXJvIiwiZGVjaW1hbEludGVnZXIiLCJOdW1iZXIiLCJkZWNpbWFsUG9pbnRMZWFkaW5nIiwiZGVjaW1hbFBvaW50IiwiZGVjaW1hbEZyYWN0aW9uIiwiZGVjaW1hbEV4cG9uZW50IiwiZGVjaW1hbEV4cG9uZW50U2lnbiIsImRlY2ltYWxFeHBvbmVudEludGVnZXIiLCJoZXhhZGVjaW1hbCIsImhleGFkZWNpbWFsSW50ZWdlciIsInN0cmluZyIsImVzY2FwZSIsInNlcGFyYXRvckNoYXIiLCJzdGFydCIsImJlZm9yZVByb3BlcnR5TmFtZSIsImFmdGVyUHJvcGVydHlOYW1lIiwiYmVmb3JlUHJvcGVydHlWYWx1ZSIsImFmdGVyUHJvcGVydHlWYWx1ZSIsImJlZm9yZUFycmF5VmFsdWUiLCJhZnRlckFycmF5VmFsdWUiLCJlbmQiLCJsaXN0IiwicCIsImhleEVzY2FwZSIsInBhcnNlSW50IiwiY291bnQiLCJpbnZhbGlkRU9GIiwicG9wIiwicGFyZW50IiwiY3VycmVudCIsInN5bnRheEVycm9yIiwiZm9ybWF0Q2hhciIsIndhcm4iLCJyZXBsYWNlbWVudHMiLCJoZXhTdHJpbmciLCJzdWJzdHJpbmciLCJTeW50YXhFcnJvciIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdHJpbmdpZnkiLCJyZXBsYWNlciIsInNwYWNlIiwiaW5kZW50IiwicHJvcGVydHlMaXN0IiwicmVwbGFjZXJGdW5jIiwiZ2FwIiwicXVvdGUiLCJ2IiwiaXRlbSIsImluZGV4T2YiLCJzdWJzdHIiLCJzZXJpYWxpemVQcm9wZXJ0eSIsInRvSlNPTjUiLCJ0b0pTT04iLCJCb29sZWFuIiwicXVvdGVTdHJpbmciLCJzZXJpYWxpemVBcnJheSIsInNlcmlhbGl6ZU9iamVjdCIsInF1b3RlcyIsInByb2R1Y3QiLCJxdW90ZUNoYXIiLCJrZXlzIiwicmVkdWNlIiwicmVwbGFjZSIsIlJlZ0V4cCIsInN0ZXBiYWNrIiwicGFydGlhbCIsInByb3BlcnR5U3RyaW5nIiwibWVtYmVyIiwic2VyaWFsaXplS2V5IiwiZmluYWwiLCJwcm9wZXJ0aWVzIiwic2VwYXJhdG9yIiwiZmlyc3RDaGFyIiwicHJvcGVydGllcyQxIiwiSlNPTjUiLCJsaWIiLCJlczUiLCJnIiwiZXZhbCIsImNhcGl0YWxpemUiLCJzdHIiLCJ0b1VwcGVyQ2FzZSIsImlzQSIsInB1YmxpY0FQSSIsIm1vZGVsIiwiY2xhc3NOYW1lIiwic2V0IiwibmFtZXMiLCJkZXN0cm95IiwicHJldmlvdXNEZXN0cm95Iiwic3Vic2NyaXB0aW9ucyIsImZpZWxkIiwiZGVsZXRlZCIsImV2ZW50TmFtZSIsImFzeW5jaHJvdW5vdXMiLCJjYWxsYmFja3MiLCJvZmYiLCJvbiIsImZyZWV6ZSIsImFyZ3MiLCJwcm9jZXNzQ2FsbGJhY2tzIiwiY2FsbGJhY2siLCJlcnJPYmoiLCJzZXRUaW1lb3V0IiwiZWwiLCJmZXRjaCIsImZldGNoQ2FsbGJhY2siLCJyZXF1ZXN0UXVldWUiLCJmZXRjaE1ldGhvZCIsImFkZFJlcXVlc3QiLCJyZXF1ZXN0IiwicmVzZXRSZXF1ZXN0cyIsInJlcXVlc3RMaXN0IiwicmVxIiwiZHluYW1pY0FycmF5IiwiaXRlbXMiLCJzcGxpY2UiLCJjaGFpbiIsImZpbHRlciIsImRhdGFTdWJzY3JpYmVyIiwiZGF0YU5hbWUiLCJkYXRhSGFuZGxlciIsImRhdGFTdWJzY3JpcHRpb25zIiwiZm9yY2VGbHVzaFJlcXVlc3RzIiwiZmlyZU1ldGhvZE5hbWUiLCJkYXRhQ29udGFpbmVyTmFtZSIsImZsdXNoRGF0YVRvTGlzdGVuZXIiLCJkYXRhTGlzdGVuZXIiLCJkYXRhQ2hhbmdlZCIsImRhdGFUb0ZvcndhcmQiLCJsYXN0UHVzaCIsIm1ldGFkYXRhIiwiZm9yY2VGbHVzaCIsIm9uRGF0YVJlYWR5IiwidmFyaWFibGVzIiwiYXNzaWduIiwiZGVmYXVsdE1ldGFkYXRhIiwiYWN0aW9uIiwidXBkYXRlIiwidmFycyIsIm1ldGEiLCJpblJlcXVlc3QiLCJ2YXJpYWJsZSIsImV4dGVuZCIsImluaXRpYWxWYWx1ZXMiLCJjb25uZWN0aW9ucyIsIlByb2Nlc3NMYXVuY2hlciIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwidXJsIiwiZW5kUG9pbnQiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwic3VwcG9ydHNKc29uIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJmaXJlUHJvY2Vzc1JlYWR5IiwiZmlyZUVycm9yIiwib25lcnJvciIsInNlbmQiLCJmZXRjaENvbm5lY3Rpb24iLCJzZXNzaW9uSWQiLCJmaXJlRmV0Y2giLCJzdG9wIiwiY29ubmVjdGlvbiIsImZpcmVQcm9jZXNzU3RvcHBlZCIsImxpc3RDb25uZWN0aW9ucyIsIkRFRkFVTFRfVkFMVUVTIiwiQ29tcG9zaXRlQ2xvc3VyZUhlbHBlciIsIkRFRkFVTFRfU0VTU0lPTl9NQU5BR0VSX1VSTCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBvcnQiLCJERUZBVUxUX1NFU1NJT05fVVJMIiwid3NDb25uZWN0Iiwid3NDb25uZWN0aW9uIiwic2Vzc2lvblVSTCIsInNlY3JldCIsInJldHJ5IiwicmVhZHlGb3J3YXJkZXIiLCJlcnJvckZvcndhcmRlciIsImNsb3NlRm9yd2FyZGVyIiwiZ2MiLCJzbWFydENvbm5lY3QiLCJmaXJlQ29ubmVjdGlvblJlYWR5IiwiZmlyZUNvbm5lY3Rpb25FcnJvciIsImZpcmVDb25uZWN0aW9uQ2xvc2UiLCJjb25maWdEZWNvcmF0b3IiLCJsYXVuY2hlciIsInNlc3Npb25NYW5hZ2VyVVJMIiwib25Qcm9jZXNzUmVhZHkiLCJvbkVycm9yIiwiY2xlYW5VcCIsIkRFRkFVTFRfU0VDUkVUIiwiZ2V0VHJhbnNwb3J0T2JqZWN0IiwiaWR4IiwiRXJyb3IiLCJ1cmlMaXN0IiwidHJhbnNwb3J0cyIsInRyYW5zcG9ydCIsInRyYW5zcG9ydENyZWF0ZUVycm9yIiwicmVhZHlTdGF0ZSIsIldlYlNvY2tldCIsImJpbmFyeVR5cGUiLCJTZXNzaW9uIiwib25vcGVuIiwib25jb25uZWN0Iiwib25jbG9zZSIsIm9ubWVzc2FnZSIsImdldFVybCIsInRpbWVvdXQiLCJDTElFTlRfRVJST1IiLCJtc2dDb3VudCIsImluRmxpZ2h0UnBjIiwiYXR0YWNobWVudHMiLCJhdHRhY2htZW50c1RvU2VuZCIsImF0dGFjaG1lbnRJZCIsInJlZ2V4QXR0YWNoIiwicmVnZXhSUEMiLCJjbGllbnRJRCIsImRlZmVyIiwiZGVmZXJyZWQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ3c2xpbmsiLCJtZXRob2QiLCJrd2FyZ3MiLCJzZW5kQmluYXJ5IiwiYmluYXJ5IiwiZmluZEJpbmFyeSIsIm8iLCJjb25zdHJ1Y3RvciIsImsiLCJ0b3BpYyIsImluZm8iLCJnZXRBdHRhY2htZW50IiwiYmluYXJ5S2V5IiwiZmluZEluZGV4IiwiYXR0IiwiYWRkQXR0YWNobWVudCIsIm9ial9saXN0IiwiQXJyYXlCdWZmZXIiLCJmb3VuZEl0IiwicGF5bG9hZCIsIm1hdGNoIiwiYXNzZXJ0IiwiYmluYXJ5SWQiXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7OztRQUdBO1FBQ0E7Ozs7Ozs7Ozs7Ozs7QUNsRkE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7Q0FHQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBTUEsV0FBVywrekJBQWpCO0FBa0JBLElBQU1DLGFBQWEsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE1BQXZCLENBQXRCO0FBQ0EsSUFBTUMsZ0JBQWdCLEdBQUdGLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixLQUF2QixDQUF6QjtBQUNBSixhQUFhLENBQUNLLFdBQWQsQ0FBMEJGLGdCQUExQjtBQUNBQSxnQkFBZ0IsQ0FBQ0csU0FBakIsR0FBNkJQLFdBQTdCO0FBRUEsSUFBTVEsWUFBWSxHQUFHTixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBckI7QUFDQSxJQUFNTSxTQUFTLEdBQUdQLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixTQUF2QixDQUFsQjtBQUNBLElBQUlPLEVBQUUsR0FBRyxJQUFUO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLEtBQW5CO0FBQ0EsSUFBSUMsT0FBTyxHQUFHLElBQWQ7O0FBRUEsU0FBU0MsR0FBVCxDQUFhQyxHQUFiLEVBQWtCO0FBQ2hCQyxTQUFPLENBQUNGLEdBQVIsQ0FBWUMsR0FBWjtBQUNBTCxXQUFTLENBQUNGLFNBQVYsSUFBdUJPLEdBQXZCO0FBQ0FMLFdBQVMsQ0FBQ0YsU0FBVixJQUF1QixJQUF2QjtBQUNEOztBQUNELFNBQVNTLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCO0FBQ25CRixTQUFPLENBQUNHLEtBQVIsQ0FBY0QsR0FBZDtBQUNBUixXQUFTLENBQUNGLFNBQVYscUJBQWlDVSxHQUFHLENBQUNFLElBQXJDLGlCQUErQ0YsR0FBRyxDQUFDRyxPQUFuRCxpQkFBZ0VILEdBQUcsQ0FBQ0ksSUFBcEU7QUFDQVosV0FBUyxDQUFDRixTQUFWLElBQXVCLElBQXZCO0FBQ0Q7O0FBRU0sU0FBU2UsU0FBVCxDQUFtQkMsSUFBbkIsRUFBeUI7QUFDOUIsTUFBSSxDQUFDWCxPQUFMLEVBQWM7QUFDZCxNQUFNUyxJQUFJLEdBQUdHLElBQUksQ0FBQ0MsS0FBTCxDQUFXLE1BQU1qQixZQUFZLENBQUNrQixLQUFuQixHQUEyQixHQUF0QyxDQUFiO0FBQ0FkLFNBQU8sQ0FBQ2UsSUFBUixzQkFBMkJKLElBQTNCLEdBQW1DLENBQUNGLElBQUQsQ0FBbkMsRUFDR08sSUFESCxDQUNRLFVBQUNDLE1BQUQ7QUFBQSxXQUFZaEIsR0FBRyxDQUFDLFlBQVlnQixNQUFiLENBQWY7QUFBQSxHQURSLEVBQzZDLFVBQUNaLEdBQUQ7QUFBQSxXQUFTRCxNQUFNLENBQUNDLEdBQUQsQ0FBZjtBQUFBLEdBRDdDO0FBRUQ7QUFDTSxTQUFTYSxTQUFULENBQW1CUCxJQUFuQixFQUF5QjtBQUM5QixNQUFJLENBQUNYLE9BQUwsRUFBYztBQUNkQSxTQUFPLENBQUNlLElBQVIsc0JBQTJCSixJQUEzQixHQUFtQyxFQUFuQyxFQUNHSyxJQURILENBQ1EsVUFBQ0MsTUFBRCxFQUFZO0FBQ2hCaEIsT0FBRyxDQUFDLFlBQVlnQixNQUFiLENBQUg7QUFDQUUsaUJBQWEsQ0FBQ0YsTUFBRCxDQUFiO0FBQ0QsR0FKSCxFQUlLLFVBQUNaLEdBQUQ7QUFBQSxXQUFTRCxNQUFNLENBQUNDLEdBQUQsQ0FBZjtBQUFBLEdBSkw7QUFLRDs7QUFDRCxTQUFTYyxhQUFULENBQXVCQyxNQUF2QixFQUErQjtBQUM3QixNQUFJWCxJQUFJLEdBQUdZLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixNQUFkLElBQXdCQSxNQUFNLENBQUMsQ0FBRCxDQUE5QixHQUFvQ0EsTUFBL0M7QUFDQSxNQUFJRyxJQUFJLEdBQUdkLElBQUksQ0FBQ2MsSUFBTCxJQUFhZCxJQUF4Qjs7QUFDQSxNQUFJYyxJQUFJLFlBQVlDLElBQXBCLEVBQTBCO0FBQ3hCLFFBQU1DLE1BQU0sR0FBR25DLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixjQUF2QixDQUFmO0FBQ0EsUUFBTW1DLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxVQUFQLENBQWtCLElBQWxCLENBQVo7QUFFQSxRQUFNQyxHQUFHLEdBQUcsSUFBSUMsS0FBSixFQUFaO0FBQ0EsUUFBTUMsTUFBTSxHQUFHLElBQUlDLFVBQUosRUFBZjs7QUFDQUQsVUFBTSxDQUFDRSxNQUFQLEdBQWdCLFVBQVNDLENBQVQsRUFBWTtBQUMxQkwsU0FBRyxDQUFDSSxNQUFKLEdBQWE7QUFBQSxlQUFNTixHQUFHLENBQUNRLFNBQUosQ0FBY04sR0FBZCxFQUFtQixDQUFuQixFQUFzQixDQUF0QixDQUFOO0FBQUEsT0FBYjs7QUFDQUEsU0FBRyxDQUFDTyxHQUFKLEdBQVVGLENBQUMsQ0FBQ0csTUFBRixDQUFTbkIsTUFBbkI7QUFDRCxLQUhEOztBQUlBYSxVQUFNLENBQUNPLGFBQVAsQ0FBcUJkLElBQXJCO0FBQ0QsR0FYRCxNQVdPO0FBQ0x0QixPQUFHLENBQUMsWUFBWXNCLElBQWIsQ0FBSDtBQUNEO0FBQ0Y7O0FBRU0sU0FBU2UsV0FBVCxHQUF1QjtBQUM1QixNQUFJLENBQUN0QyxPQUFMLEVBQWM7QUFDZEEsU0FBTyxDQUFDZSxJQUFSLENBQWEseUJBQWIsRUFBd0MsRUFBeEMsRUFDR0MsSUFESCxDQUNRLFVBQUNQLElBQUQsRUFBVTtBQUNkLFFBQUlBLElBQUksQ0FBQyxPQUFELENBQVIsRUFBbUJVLGFBQWEsQ0FBQ1YsSUFBSSxDQUFDLE9BQUQsQ0FBTCxDQUFiOztBQUNuQixRQUFNdUIsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBQ0MsQ0FBRCxFQUFPO0FBQ3BCLFVBQU1NLEdBQUcsR0FBRyxJQUFJQyxVQUFKLENBQWVQLENBQUMsQ0FBQ0csTUFBRixDQUFTbkIsTUFBeEIsQ0FBWjs7QUFDQSxVQUFJc0IsR0FBRyxDQUFDRSxNQUFKLEtBQWUsQ0FBbkIsRUFBc0I7QUFDcEJGLFdBQUcsQ0FBQ0csT0FBSixDQUFZLFVBQUNDLENBQUQsRUFBSUMsQ0FBSixFQUFVO0FBQ3BCLGNBQUlELENBQUMsS0FBS0MsQ0FBQyxHQUFHLENBQWQsRUFBaUJ6QyxPQUFPLENBQUNHLEtBQVIsQ0FBYyxXQUFkLEVBQTJCcUMsQ0FBM0IsRUFBOEJDLENBQTlCO0FBQ2xCLFNBRkQ7QUFHRCxPQUpELE1BSU8sSUFBSUwsR0FBRyxDQUFDRSxNQUFKLEtBQWUsQ0FBbkIsRUFBc0I7QUFDM0JGLFdBQUcsQ0FBQ0csT0FBSixDQUFZLFVBQUNDLENBQUQsRUFBSUMsQ0FBSixFQUFVO0FBQ3BCLGNBQUlELENBQUMsS0FBS0MsQ0FBQyxHQUFHLENBQWQsRUFBaUJ6QyxPQUFPLENBQUNHLEtBQVIsQ0FBYyxXQUFkLEVBQTJCcUMsQ0FBM0IsRUFBOEJDLENBQTlCO0FBQ2xCLFNBRkQ7QUFHRCxPQUpNLE1BSUE7QUFDTHpDLGVBQU8sQ0FBQ0csS0FBUixDQUFjLGVBQWQsRUFBK0JpQyxHQUFHLENBQUNFLE1BQW5DO0FBQ0Q7QUFDRixLQWJEOztBQWNBaEMsUUFBSSxDQUFDb0MsU0FBTCxDQUFlSCxPQUFmLENBQXVCLFVBQUFJLEVBQUUsRUFBSTtBQUMzQixVQUFNaEIsTUFBTSxHQUFHLElBQUlDLFVBQUosRUFBZjtBQUNBRCxZQUFNLENBQUNFLE1BQVAsR0FBZ0JBLE1BQWhCO0FBQ0FGLFlBQU0sQ0FBQ2lCLGlCQUFQLENBQXlCRCxFQUF6QjtBQUNELEtBSkQ7QUFNQTNDLFdBQU8sQ0FBQ0YsR0FBUixDQUFZLFVBQVosRUFBd0JRLElBQXhCO0FBQ0QsR0F4QkgsRUF3QkssVUFBQ0osR0FBRDtBQUFBLFdBQVNELE1BQU0sQ0FBQ0MsR0FBRCxDQUFmO0FBQUEsR0F4Qkw7QUF5QkQ7QUFFTSxTQUFTMkMsV0FBVCxHQUF1QjtBQUM1QixNQUFJLENBQUNoRCxPQUFMLEVBQWM7QUFDZEEsU0FBTyxDQUFDZSxJQUFSLENBQWEseUJBQWIsRUFBd0MsQ0FBQyxTQUFELENBQXhDLEVBQ0dDLElBREgsQ0FDUUcsYUFEUixFQUN1QixVQUFDZCxHQUFEO0FBQUEsV0FBU0QsTUFBTSxDQUFDQyxHQUFELENBQWY7QUFBQSxHQUR2QjtBQUVEO0FBRU0sU0FBUzRDLGNBQVQsR0FBMEI7QUFDL0IsTUFBSSxDQUFDakQsT0FBTCxFQUFjO0FBQ2RBLFNBQU8sQ0FBQ2UsSUFBUixDQUFhLHdCQUFiLEVBQXVDLENBQUMsQ0FBRCxDQUF2QyxFQUNHQyxJQURILENBQ1EsVUFBQ0MsTUFBRDtBQUFBLFdBQVloQixHQUFHLENBQUMsWUFBWWdCLE1BQWIsQ0FBZjtBQUFBLEdBRFIsRUFDNkMsVUFBQ1osR0FBRDtBQUFBLFdBQVNELE1BQU0sQ0FBQ0MsR0FBRCxDQUFmO0FBQUEsR0FEN0M7QUFFRDtBQUVNLFNBQVM2QyxZQUFULEdBQXdCO0FBQzdCLE1BQUksQ0FBQ25ELFlBQUwsRUFBbUI7QUFDakJDLFdBQU8sQ0FBQ21ELFNBQVIsQ0FBa0IsT0FBbEIsRUFBMkJoQyxhQUEzQixFQUEwQ0gsSUFBMUMsQ0FBK0MsVUFBQ0MsTUFBRDtBQUFBLGFBQWFsQixZQUFZLEdBQUdrQixNQUE1QjtBQUFBLEtBQS9DO0FBQ0FqQixXQUFPLENBQUNlLElBQVIsQ0FBYSxtQkFBYixFQUFrQyxDQUFDLE9BQUQsQ0FBbEMsRUFDR0MsSUFESCxDQUNRLFVBQUNDLE1BQUQ7QUFBQSxhQUFZaEIsR0FBRyxDQUFDLFlBQVlnQixNQUFiLENBQWY7QUFBQSxLQURSLEVBQzZDLFVBQUNaLEdBQUQ7QUFBQSxhQUFTRCxNQUFNLENBQUNDLEdBQUQsQ0FBZjtBQUFBLEtBRDdDO0FBRUQsR0FKRCxNQUlPO0FBQ0xMLFdBQU8sQ0FBQ2UsSUFBUixDQUFhLGlCQUFiLEVBQWdDLENBQUMsT0FBRCxDQUFoQyxFQUNHQyxJQURILENBQ1EsVUFBQ0MsTUFBRDtBQUFBLGFBQVloQixHQUFHLENBQUMsWUFBWWdCLE1BQWIsQ0FBZjtBQUFBLEtBRFIsRUFDNkMsVUFBQ1osR0FBRDtBQUFBLGFBQVNELE1BQU0sQ0FBQ0MsR0FBRCxDQUFmO0FBQUEsS0FEN0M7QUFFQUwsV0FBTyxDQUFDb0QsV0FBUixDQUFvQnJELFlBQXBCO0FBQ0FBLGdCQUFZLEdBQUcsSUFBZjtBQUNEO0FBQ0Y7QUFFTSxTQUFTc0QsT0FBVCxHQUFtQjtBQUN4QixNQUFJLENBQUNyRCxPQUFMLEVBQWM7QUFDZEEsU0FBTyxDQUFDc0QsS0FBUixHQUZ3QixDQUd4QjtBQUNBO0FBQ0E7QUFDRDtBQUVNLFNBQVNDLE9BQVQsR0FBK0I7QUFBQSxNQUFkQyxNQUFjLHVFQUFQLEtBQU87QUFDcEMxRCxJQUFFLEdBQUcsSUFBTDs7QUFDQSxNQUFJMEQsTUFBSixFQUFZO0FBQ1YxRCxNQUFFLEdBQUcyRCxnRUFBbUIsQ0FBQ0MsV0FBcEIsQ0FBZ0M7QUFBRUMsVUFBSSxFQUFFO0FBQVIsS0FBaEMsQ0FBTDtBQUNELEdBRkQsTUFFTztBQUNMLFFBQU1DLE1BQU0sR0FBRztBQUFFQyxpQkFBVyxFQUFFO0FBQWYsS0FBZjtBQUNBL0QsTUFBRSxHQUFHZ0UseURBQVksQ0FBQ0osV0FBYixDQUF5QjtBQUFFRSxZQUFNLEVBQU5BO0FBQUYsS0FBekIsQ0FBTDtBQUNEOztBQUNEOUQsSUFBRSxDQUFDaUUsaUJBQUgsQ0FBcUIsWUFBTTtBQUN6QjlELE9BQUcsQ0FBQyxTQUFELENBQUg7O0FBQ0EsUUFBSSxDQUFDRCxPQUFMLEVBQWM7QUFDWkEsYUFBTyxHQUFHRixFQUFFLENBQUNrRSxVQUFILEVBQVY7QUFDRDs7QUFDRCxRQUFNdkMsTUFBTSxHQUFHbkMsUUFBUSxDQUFDQyxhQUFULENBQXVCLGNBQXZCLENBQWY7QUFDQSxRQUFNbUMsR0FBRyxHQUFHRCxNQUFNLENBQUNFLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBWjtBQUNBRCxPQUFHLENBQUN1QyxTQUFKLENBQWMsQ0FBZCxFQUFpQixDQUFqQixFQUFvQixHQUFwQixFQUF5QixHQUF6QjtBQUNELEdBUkQ7QUFVQW5FLElBQUUsQ0FBQ29FLGlCQUFILENBQXFCLFlBQU07QUFDekJqRSxPQUFHLENBQUMsVUFBRCxDQUFIO0FBQ0QsR0FGRDtBQUlBSCxJQUFFLENBQUNxRSxpQkFBSCxDQUFxQixVQUFDQyxLQUFELEVBQVc7QUFDOUJuRSxPQUFHLENBQUMsVUFBRCxDQUFIO0FBQ0FFLFdBQU8sQ0FBQ0csS0FBUixDQUFjOEQsS0FBZDtBQUNELEdBSEQ7QUFLQXBFLFNBQU8sR0FBR0YsRUFBRSxDQUFDeUQsT0FBSCxFQUFWO0FBQ0QsQzs7Ozs7Ozs7Ozs7OztBQzFLQSxXQUFVYyxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQjtBQUMzQixnQ0FBT0MsT0FBUCxPQUFtQixRQUFuQixJQUErQixPQUFPQyxNQUFQLEtBQWtCLFdBQWpELEdBQStEQSxNQUFNLENBQUNELE9BQVAsR0FBaUJELE9BQU8sRUFBdkYsR0FDQSxRQUE2Q0csb0NBQU9ILE9BQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxvR0FBbkQsR0FDQ0QsU0FGRDtBQUdBLENBSkEsRUFJQyxJQUpELEVBSVEsWUFBWTtBQUFFOztBQUV0QixXQUFTSyxvQkFBVCxDQUE4QkMsRUFBOUIsRUFBa0NILE1BQWxDLEVBQTBDO0FBQ3pDLFdBQU9BLE1BQU0sR0FBRztBQUFFRCxhQUFPLEVBQUU7QUFBWCxLQUFULEVBQTBCSSxFQUFFLENBQUNILE1BQUQsRUFBU0EsTUFBTSxDQUFDRCxPQUFoQixDQUE1QixFQUFzREMsTUFBTSxDQUFDRCxPQUFwRTtBQUNBOztBQUVELE1BQUlLLE9BQU8sR0FBR0Ysb0JBQW9CLENBQUMsVUFBVUYsTUFBVixFQUFrQjtBQUNyRDtBQUNBLFFBQUlILE1BQU0sR0FBR0csTUFBTSxDQUFDRCxPQUFQLEdBQWlCLE9BQU9NLE1BQVAsSUFBaUIsV0FBakIsSUFBZ0NBLE1BQU0sQ0FBQ0MsSUFBUCxJQUFlQSxJQUEvQyxHQUMxQkQsTUFEMEIsR0FDakIsT0FBT0UsSUFBUCxJQUFlLFdBQWYsSUFBOEJBLElBQUksQ0FBQ0QsSUFBTCxJQUFhQSxJQUEzQyxHQUFrREMsSUFBbEQsQ0FDWDtBQURXLE1BRVRDLFFBQVEsQ0FBQyxhQUFELENBQVIsRUFISjs7QUFJQSxRQUFJLE9BQU9DLEdBQVAsSUFBYyxRQUFsQixFQUE0QjtBQUFFQSxTQUFHLEdBQUdaLE1BQU47QUFBZSxLQU5RLENBTVA7O0FBQzdDLEdBUGlDLENBQWxDOztBQVNBLE1BQUlhLEtBQUssR0FBR1Isb0JBQW9CLENBQUMsVUFBVUYsTUFBVixFQUFrQjtBQUNuRCxRQUFJVyxJQUFJLEdBQUdYLE1BQU0sQ0FBQ0QsT0FBUCxHQUFpQjtBQUFFYSxhQUFPLEVBQUU7QUFBWCxLQUE1Qjs7QUFDQSxRQUFJLE9BQU9DLEdBQVAsSUFBYyxRQUFsQixFQUE0QjtBQUFFQSxTQUFHLEdBQUdGLElBQU47QUFBYSxLQUZRLENBRVA7O0FBQzNDLEdBSCtCLENBQWhDOztBQUlBLE1BQUlHLE9BQU8sR0FBR0osS0FBSyxDQUFDRSxPQUFwQjs7QUFFQSxNQUFJRyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxFQUFWLEVBQWM7QUFDNUIsV0FBTyxRQUFPQSxFQUFQLE1BQWMsUUFBZCxHQUF5QkEsRUFBRSxLQUFLLElBQWhDLEdBQXVDLE9BQU9BLEVBQVAsS0FBYyxVQUE1RDtBQUNELEdBRkQ7O0FBSUEsTUFBSUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVUQsRUFBVixFQUFjO0FBQzVCLFFBQUksQ0FBQ0QsU0FBUyxDQUFDQyxFQUFELENBQWQsRUFBb0I7QUFBRSxZQUFNRSxTQUFTLENBQUNGLEVBQUUsR0FBRyxvQkFBTixDQUFmO0FBQTZDOztBQUNuRSxXQUFPQSxFQUFQO0FBQ0QsR0FIRDs7QUFLQSxNQUFJRyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFVQyxJQUFWLEVBQWdCO0FBQzNCLFFBQUk7QUFDRixhQUFPLENBQUMsQ0FBQ0EsSUFBSSxFQUFiO0FBQ0QsS0FGRCxDQUVFLE9BQU8zRCxDQUFQLEVBQVU7QUFDVixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTkQsQ0E5Qm9CLENBc0NwQjs7O0FBQ0EsTUFBSTRELFlBQVksR0FBRyxDQUFDRixNQUFNLENBQUMsWUFBWTtBQUNyQyxXQUFPRyxNQUFNLENBQUNDLGNBQVAsQ0FBc0IsRUFBdEIsRUFBMEIsR0FBMUIsRUFBK0I7QUFBRUMsU0FBRyxFQUFFLGVBQVk7QUFBRSxlQUFPLENBQVA7QUFBVztBQUFoQyxLQUEvQixFQUFtRUMsQ0FBbkUsSUFBd0UsQ0FBL0U7QUFDRCxHQUZ5QixDQUExQjs7QUFJQSxNQUFJM0csUUFBUSxHQUFHc0YsT0FBTyxDQUFDdEYsUUFBdkIsQ0EzQ29CLENBNENwQjs7QUFDQSxNQUFJNEcsRUFBRSxHQUFHWCxTQUFTLENBQUNqRyxRQUFELENBQVQsSUFBdUJpRyxTQUFTLENBQUNqRyxRQUFRLENBQUNHLGFBQVYsQ0FBekM7O0FBQ0EsTUFBSTBHLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVVYLEVBQVYsRUFBYztBQUM3QixXQUFPVSxFQUFFLEdBQUc1RyxRQUFRLENBQUNHLGFBQVQsQ0FBdUIrRixFQUF2QixDQUFILEdBQWdDLEVBQXpDO0FBQ0QsR0FGRDs7QUFJQSxNQUFJWSxhQUFhLEdBQUcsQ0FBQ1AsWUFBRCxJQUFpQixDQUFDRixNQUFNLENBQUMsWUFBWTtBQUN2RCxXQUFPRyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JJLFVBQVUsQ0FBQyxLQUFELENBQWhDLEVBQXlDLEdBQXpDLEVBQThDO0FBQUVILFNBQUcsRUFBRSxlQUFZO0FBQUUsZUFBTyxDQUFQO0FBQVc7QUFBaEMsS0FBOUMsRUFBa0ZDLENBQWxGLElBQXVGLENBQTlGO0FBQ0QsR0FGMkMsQ0FBNUMsQ0FsRG9CLENBc0RwQjtBQUVBO0FBQ0E7OztBQUNBLE1BQUlJLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVViLEVBQVYsRUFBY2MsQ0FBZCxFQUFpQjtBQUNsQyxRQUFJLENBQUNmLFNBQVMsQ0FBQ0MsRUFBRCxDQUFkLEVBQW9CO0FBQUUsYUFBT0EsRUFBUDtBQUFZOztBQUNsQyxRQUFJYixFQUFKLEVBQVE0QixHQUFSOztBQUNBLFFBQUlELENBQUMsSUFBSSxRQUFRM0IsRUFBRSxHQUFHYSxFQUFFLENBQUNnQixRQUFoQixLQUE2QixVQUFsQyxJQUFnRCxDQUFDakIsU0FBUyxDQUFDZ0IsR0FBRyxHQUFHNUIsRUFBRSxDQUFDNUQsSUFBSCxDQUFReUUsRUFBUixDQUFQLENBQTlELEVBQW1GO0FBQUUsYUFBT2UsR0FBUDtBQUFhOztBQUNsRyxRQUFJLFFBQVE1QixFQUFFLEdBQUdhLEVBQUUsQ0FBQ2lCLE9BQWhCLEtBQTRCLFVBQTVCLElBQTBDLENBQUNsQixTQUFTLENBQUNnQixHQUFHLEdBQUc1QixFQUFFLENBQUM1RCxJQUFILENBQVF5RSxFQUFSLENBQVAsQ0FBeEQsRUFBNkU7QUFBRSxhQUFPZSxHQUFQO0FBQWE7O0FBQzVGLFFBQUksQ0FBQ0QsQ0FBRCxJQUFNLFFBQVEzQixFQUFFLEdBQUdhLEVBQUUsQ0FBQ2dCLFFBQWhCLEtBQTZCLFVBQW5DLElBQWlELENBQUNqQixTQUFTLENBQUNnQixHQUFHLEdBQUc1QixFQUFFLENBQUM1RCxJQUFILENBQVF5RSxFQUFSLENBQVAsQ0FBL0QsRUFBb0Y7QUFBRSxhQUFPZSxHQUFQO0FBQWE7O0FBQ25HLFVBQU1iLFNBQVMsQ0FBQyx5Q0FBRCxDQUFmO0FBQ0QsR0FQRDs7QUFTQSxNQUFJZ0IsRUFBRSxHQUFHWixNQUFNLENBQUNDLGNBQWhCO0FBRUEsTUFBSVksQ0FBQyxHQUFHZCxZQUFZLEdBQUdDLE1BQU0sQ0FBQ0MsY0FBVixHQUEyQixTQUFTQSxjQUFULENBQXdCYSxDQUF4QixFQUEyQkMsQ0FBM0IsRUFBOEJDLFVBQTlCLEVBQTBDO0FBQ3ZGckIsYUFBUyxDQUFDbUIsQ0FBRCxDQUFUOztBQUNBQyxLQUFDLEdBQUdSLFlBQVksQ0FBQ1EsQ0FBRCxFQUFJLElBQUosQ0FBaEI7O0FBQ0FwQixhQUFTLENBQUNxQixVQUFELENBQVQ7O0FBQ0EsUUFBSVYsYUFBSixFQUFtQjtBQUFFLFVBQUk7QUFDdkIsZUFBT00sRUFBRSxDQUFDRSxDQUFELEVBQUlDLENBQUosRUFBT0MsVUFBUCxDQUFUO0FBQ0QsT0FGb0IsQ0FFbkIsT0FBTzdFLENBQVAsRUFBVTtBQUFFO0FBQWE7QUFBRTs7QUFDN0IsUUFBSSxTQUFTNkUsVUFBVCxJQUF1QixTQUFTQSxVQUFwQyxFQUFnRDtBQUFFLFlBQU1wQixTQUFTLENBQUMsMEJBQUQsQ0FBZjtBQUE4Qzs7QUFDaEcsUUFBSSxXQUFXb0IsVUFBZixFQUEyQjtBQUFFRixPQUFDLENBQUNDLENBQUQsQ0FBRCxHQUFPQyxVQUFVLENBQUNoRyxLQUFsQjtBQUEwQjs7QUFDdkQsV0FBTzhGLENBQVA7QUFDRCxHQVZEO0FBWUEsTUFBSUcsU0FBUyxHQUFHO0FBQ2ZKLEtBQUMsRUFBRUE7QUFEWSxHQUFoQjs7QUFJQSxNQUFJSyxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVVDLE1BQVYsRUFBa0JuRyxLQUFsQixFQUF5QjtBQUMzQyxXQUFPO0FBQ0xvRyxnQkFBVSxFQUFFLEVBQUVELE1BQU0sR0FBRyxDQUFYLENBRFA7QUFFTEUsa0JBQVksRUFBRSxFQUFFRixNQUFNLEdBQUcsQ0FBWCxDQUZUO0FBR0xHLGNBQVEsRUFBRSxFQUFFSCxNQUFNLEdBQUcsQ0FBWCxDQUhMO0FBSUxuRyxXQUFLLEVBQUVBO0FBSkYsS0FBUDtBQU1ELEdBUEQ7O0FBU0EsTUFBSXVHLEtBQUssR0FBR3hCLFlBQVksR0FBRyxVQUFVeUIsTUFBVixFQUFrQkMsR0FBbEIsRUFBdUJ6RyxLQUF2QixFQUE4QjtBQUN2RCxXQUFPaUcsU0FBUyxDQUFDSixDQUFWLENBQVlXLE1BQVosRUFBb0JDLEdBQXBCLEVBQXlCUCxhQUFhLENBQUMsQ0FBRCxFQUFJbEcsS0FBSixDQUF0QyxDQUFQO0FBQ0QsR0FGdUIsR0FFcEIsVUFBVXdHLE1BQVYsRUFBa0JDLEdBQWxCLEVBQXVCekcsS0FBdkIsRUFBOEI7QUFDaEN3RyxVQUFNLENBQUNDLEdBQUQsQ0FBTixHQUFjekcsS0FBZDtBQUNBLFdBQU93RyxNQUFQO0FBQ0QsR0FMRDs7QUFPQSxNQUFJRSxjQUFjLEdBQUcsR0FBR0EsY0FBeEI7O0FBQ0EsTUFBSUMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBVWpDLEVBQVYsRUFBYytCLEdBQWQsRUFBbUI7QUFDNUIsV0FBT0MsY0FBYyxDQUFDekcsSUFBZixDQUFvQnlFLEVBQXBCLEVBQXdCK0IsR0FBeEIsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsTUFBSUcsRUFBRSxHQUFHLENBQVQ7QUFDQSxNQUFJQyxFQUFFLEdBQUc3QyxJQUFJLENBQUM4QyxNQUFMLEVBQVQ7O0FBQ0EsTUFBSUMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBVU4sR0FBVixFQUFlO0FBQ3hCLFdBQU8sVUFBVU8sTUFBVixDQUFpQlAsR0FBRyxLQUFLUSxTQUFSLEdBQW9CLEVBQXBCLEdBQXlCUixHQUExQyxFQUErQyxJQUEvQyxFQUFxRCxDQUFDLEVBQUVHLEVBQUYsR0FBT0MsRUFBUixFQUFZbkIsUUFBWixDQUFxQixFQUFyQixDQUFyRCxDQUFQO0FBQ0QsR0FGRDs7QUFJQSxNQUFJd0IsU0FBUyxHQUFHdEQsb0JBQW9CLENBQUMsVUFBVUYsTUFBVixFQUFrQjtBQUN2RCxRQUFJeUQsR0FBRyxHQUFHSixJQUFJLENBQUMsS0FBRCxDQUFkOztBQUNBLFFBQUlLLFNBQVMsR0FBRyxVQUFoQjtBQUNBLFFBQUlDLFNBQVMsR0FBR25ELFFBQVEsQ0FBQ2tELFNBQUQsQ0FBeEI7QUFDQSxRQUFJRSxHQUFHLEdBQUcsQ0FBQyxLQUFLRCxTQUFOLEVBQWlCRSxLQUFqQixDQUF1QkgsU0FBdkIsQ0FBVjs7QUFFQWhELFNBQUssQ0FBQ29ELGFBQU4sR0FBc0IsVUFBVTlDLEVBQVYsRUFBYztBQUNsQyxhQUFPMkMsU0FBUyxDQUFDcEgsSUFBVixDQUFleUUsRUFBZixDQUFQO0FBQ0QsS0FGRDs7QUFJQSxLQUFDaEIsTUFBTSxDQUFDRCxPQUFQLEdBQWlCLFVBQVVxQyxDQUFWLEVBQWFXLEdBQWIsRUFBa0JoQixHQUFsQixFQUF1QmdDLElBQXZCLEVBQTZCO0FBQzdDLFVBQUlDLFVBQVUsR0FBRyxPQUFPakMsR0FBUCxJQUFjLFVBQS9COztBQUNBLFVBQUlpQyxVQUFKLEVBQWdCO0FBQUVmLFlBQUksQ0FBQ2xCLEdBQUQsRUFBTSxNQUFOLENBQUosSUFBcUJjLEtBQUssQ0FBQ2QsR0FBRCxFQUFNLE1BQU4sRUFBY2dCLEdBQWQsQ0FBMUI7QUFBK0M7O0FBQ2pFLFVBQUlYLENBQUMsQ0FBQ1csR0FBRCxDQUFELEtBQVdoQixHQUFmLEVBQW9CO0FBQUU7QUFBUzs7QUFDL0IsVUFBSWlDLFVBQUosRUFBZ0I7QUFBRWYsWUFBSSxDQUFDbEIsR0FBRCxFQUFNMEIsR0FBTixDQUFKLElBQWtCWixLQUFLLENBQUNkLEdBQUQsRUFBTTBCLEdBQU4sRUFBV3JCLENBQUMsQ0FBQ1csR0FBRCxDQUFELEdBQVMsS0FBS1gsQ0FBQyxDQUFDVyxHQUFELENBQWYsR0FBdUJhLEdBQUcsQ0FBQ0ssSUFBSixDQUFTQyxNQUFNLENBQUNuQixHQUFELENBQWYsQ0FBbEMsQ0FBdkI7QUFBa0Y7O0FBQ3BHLFVBQUlYLENBQUMsS0FBS2hDLE9BQVYsRUFBbUI7QUFDakJnQyxTQUFDLENBQUNXLEdBQUQsQ0FBRCxHQUFTaEIsR0FBVDtBQUNELE9BRkQsTUFFTyxJQUFJLENBQUNnQyxJQUFMLEVBQVc7QUFDaEIsZUFBTzNCLENBQUMsQ0FBQ1csR0FBRCxDQUFSOztBQUNBRixhQUFLLENBQUNULENBQUQsRUFBSVcsR0FBSixFQUFTaEIsR0FBVCxDQUFMO0FBQ0QsT0FITSxNQUdBLElBQUlLLENBQUMsQ0FBQ1csR0FBRCxDQUFMLEVBQVk7QUFDakJYLFNBQUMsQ0FBQ1csR0FBRCxDQUFELEdBQVNoQixHQUFUO0FBQ0QsT0FGTSxNQUVBO0FBQ0xjLGFBQUssQ0FBQ1QsQ0FBRCxFQUFJVyxHQUFKLEVBQVNoQixHQUFULENBQUw7QUFDRCxPQWQ0QyxDQWUvQzs7QUFDQyxLQWhCRCxFQWdCR3ZCLFFBQVEsQ0FBQzJELFNBaEJaLEVBZ0J1QlQsU0FoQnZCLEVBZ0JrQyxTQUFTMUIsUUFBVCxHQUFvQjtBQUNwRCxhQUFPLE9BQU8sSUFBUCxJQUFlLFVBQWYsSUFBNkIsS0FBS3lCLEdBQUwsQ0FBN0IsSUFBMENFLFNBQVMsQ0FBQ3BILElBQVYsQ0FBZSxJQUFmLENBQWpEO0FBQ0QsS0FsQkQ7QUFtQkMsR0E3Qm1DLENBQXBDOztBQStCQSxNQUFJNkgsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVXBELEVBQVYsRUFBYztBQUM3QixRQUFJLE9BQU9BLEVBQVAsSUFBYSxVQUFqQixFQUE2QjtBQUFFLFlBQU1FLFNBQVMsQ0FBQ0YsRUFBRSxHQUFHLHFCQUFOLENBQWY7QUFBOEM7O0FBQzdFLFdBQU9BLEVBQVA7QUFDRCxHQUhELENBL0lvQixDQW9KcEI7OztBQUVBLE1BQUlxRCxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFVbEUsRUFBVixFQUFjbUUsSUFBZCxFQUFvQnJHLE1BQXBCLEVBQTRCO0FBQ3JDbUcsY0FBVSxDQUFDakUsRUFBRCxDQUFWOztBQUNBLFFBQUltRSxJQUFJLEtBQUtmLFNBQWIsRUFBd0I7QUFBRSxhQUFPcEQsRUFBUDtBQUFZOztBQUN0QyxZQUFRbEMsTUFBUjtBQUNFLFdBQUssQ0FBTDtBQUFRLGVBQU8sVUFBVXdELENBQVYsRUFBYTtBQUMxQixpQkFBT3RCLEVBQUUsQ0FBQzVELElBQUgsQ0FBUStILElBQVIsRUFBYzdDLENBQWQsQ0FBUDtBQUNELFNBRk87O0FBR1IsV0FBSyxDQUFMO0FBQVEsZUFBTyxVQUFVQSxDQUFWLEVBQWE4QyxDQUFiLEVBQWdCO0FBQzdCLGlCQUFPcEUsRUFBRSxDQUFDNUQsSUFBSCxDQUFRK0gsSUFBUixFQUFjN0MsQ0FBZCxFQUFpQjhDLENBQWpCLENBQVA7QUFDRCxTQUZPOztBQUdSLFdBQUssQ0FBTDtBQUFRLGVBQU8sVUFBVTlDLENBQVYsRUFBYThDLENBQWIsRUFBZ0JDLENBQWhCLEVBQW1CO0FBQ2hDLGlCQUFPckUsRUFBRSxDQUFDNUQsSUFBSCxDQUFRK0gsSUFBUixFQUFjN0MsQ0FBZCxFQUFpQjhDLENBQWpCLEVBQW9CQyxDQUFwQixDQUFQO0FBQ0QsU0FGTztBQVBWOztBQVdBLFdBQU87QUFBVTtBQUFlO0FBQzlCLGFBQU9yRSxFQUFFLENBQUNzRSxLQUFILENBQVNILElBQVQsRUFBZUksU0FBZixDQUFQO0FBQ0QsS0FGRDtBQUdELEdBakJEOztBQW1CQSxNQUFJQyxTQUFTLEdBQUcsV0FBaEI7O0FBRUEsTUFBSUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVXpJLElBQVYsRUFBZ0IwSSxJQUFoQixFQUFzQkMsTUFBdEIsRUFBOEI7QUFDMUMsUUFBSUMsU0FBUyxHQUFHNUksSUFBSSxHQUFHeUksT0FBTyxDQUFDSSxDQUEvQjtBQUNBLFFBQUlDLFNBQVMsR0FBRzlJLElBQUksR0FBR3lJLE9BQU8sQ0FBQ00sQ0FBL0I7QUFDQSxRQUFJQyxTQUFTLEdBQUdoSixJQUFJLEdBQUd5SSxPQUFPLENBQUM5QyxDQUEvQjtBQUNBLFFBQUlzRCxRQUFRLEdBQUdqSixJQUFJLEdBQUd5SSxPQUFPLENBQUN2QyxDQUE5QjtBQUNBLFFBQUlnRCxPQUFPLEdBQUdsSixJQUFJLEdBQUd5SSxPQUFPLENBQUNVLENBQTdCO0FBQ0EsUUFBSTFILE1BQU0sR0FBR3FILFNBQVMsR0FBRzdFLE9BQUgsR0FBYStFLFNBQVMsR0FBRy9FLE9BQU8sQ0FBQ3lFLElBQUQsQ0FBUCxLQUFrQnpFLE9BQU8sQ0FBQ3lFLElBQUQsQ0FBUCxHQUFnQixFQUFsQyxDQUFILEdBQTJDLENBQUN6RSxPQUFPLENBQUN5RSxJQUFELENBQVAsSUFBaUIsRUFBbEIsRUFBc0JGLFNBQXRCLENBQXZGO0FBQ0EsUUFBSTVFLE9BQU8sR0FBR2tGLFNBQVMsR0FBR3ZFLEtBQUgsR0FBV0EsS0FBSyxDQUFDbUUsSUFBRCxDQUFMLEtBQWdCbkUsS0FBSyxDQUFDbUUsSUFBRCxDQUFMLEdBQWMsRUFBOUIsQ0FBbEM7QUFDQSxRQUFJVSxRQUFRLEdBQUd4RixPQUFPLENBQUM0RSxTQUFELENBQVAsS0FBdUI1RSxPQUFPLENBQUM0RSxTQUFELENBQVAsR0FBcUIsRUFBNUMsQ0FBZjtBQUNBLFFBQUk1QixHQUFKLEVBQVN5QyxHQUFULEVBQWNDLEdBQWQsRUFBbUJDLEdBQW5COztBQUNBLFFBQUlULFNBQUosRUFBZTtBQUFFSCxZQUFNLEdBQUdELElBQVQ7QUFBZ0I7O0FBQ2pDLFNBQUs5QixHQUFMLElBQVkrQixNQUFaLEVBQW9CO0FBQ2xCO0FBQ0FVLFNBQUcsR0FBRyxDQUFDVCxTQUFELElBQWNuSCxNQUFkLElBQXdCQSxNQUFNLENBQUNtRixHQUFELENBQU4sS0FBZ0JRLFNBQTlDLENBRmtCLENBR2xCOztBQUNBa0MsU0FBRyxHQUFHLENBQUNELEdBQUcsR0FBRzVILE1BQUgsR0FBWWtILE1BQWhCLEVBQXdCL0IsR0FBeEIsQ0FBTixDQUprQixDQUtsQjs7QUFDQTJDLFNBQUcsR0FBR0wsT0FBTyxJQUFJRyxHQUFYLEdBQWlCbkIsSUFBSSxDQUFDb0IsR0FBRCxFQUFNckYsT0FBTixDQUFyQixHQUFzQ2dGLFFBQVEsSUFBSSxPQUFPSyxHQUFQLElBQWMsVUFBMUIsR0FBdUNwQixJQUFJLENBQUM3RCxRQUFRLENBQUNqRSxJQUFWLEVBQWdCa0osR0FBaEIsQ0FBM0MsR0FBa0VBLEdBQTlHLENBTmtCLENBT2xCOztBQUNBLFVBQUk3SCxNQUFKLEVBQVk7QUFBRTRGLGlCQUFTLENBQUM1RixNQUFELEVBQVNtRixHQUFULEVBQWMwQyxHQUFkLEVBQW1CdEosSUFBSSxHQUFHeUksT0FBTyxDQUFDZSxDQUFsQyxDQUFUO0FBQWdELE9BUjVDLENBU2xCOzs7QUFDQSxVQUFJNUYsT0FBTyxDQUFDZ0QsR0FBRCxDQUFQLElBQWdCMEMsR0FBcEIsRUFBeUI7QUFBRTVDLGFBQUssQ0FBQzlDLE9BQUQsRUFBVWdELEdBQVYsRUFBZTJDLEdBQWYsQ0FBTDtBQUEyQjs7QUFDdEQsVUFBSU4sUUFBUSxJQUFJRyxRQUFRLENBQUN4QyxHQUFELENBQVIsSUFBaUIwQyxHQUFqQyxFQUFzQztBQUFFRixnQkFBUSxDQUFDeEMsR0FBRCxDQUFSLEdBQWdCMEMsR0FBaEI7QUFBc0I7QUFDL0Q7QUFDRixHQXhCRDs7QUF5QkFyRixTQUFPLENBQUNPLElBQVIsR0FBZUQsS0FBZixDQXBNb0IsQ0FxTXBCOztBQUNBa0UsU0FBTyxDQUFDSSxDQUFSLEdBQVksQ0FBWixDQXRNb0IsQ0FzTUg7O0FBQ2pCSixTQUFPLENBQUNNLENBQVIsR0FBWSxDQUFaLENBdk1vQixDQXVNSDs7QUFDakJOLFNBQU8sQ0FBQzlDLENBQVIsR0FBWSxDQUFaLENBeE1vQixDQXdNSDs7QUFDakI4QyxTQUFPLENBQUN2QyxDQUFSLEdBQVksQ0FBWixDQXpNb0IsQ0F5TUg7O0FBQ2pCdUMsU0FBTyxDQUFDVSxDQUFSLEdBQVksRUFBWixDQTFNb0IsQ0EwTUg7O0FBQ2pCVixTQUFPLENBQUNnQixDQUFSLEdBQVksRUFBWixDQTNNb0IsQ0EyTUg7O0FBQ2pCaEIsU0FBTyxDQUFDZSxDQUFSLEdBQVksRUFBWixDQTVNb0IsQ0E0TUg7O0FBQ2pCZixTQUFPLENBQUNpQixDQUFSLEdBQVksR0FBWixDQTdNb0IsQ0E2TUg7O0FBQ2pCLE1BQUlDLE9BQU8sR0FBR2xCLE9BQWQsQ0E5TW9CLENBZ05wQjs7QUFDQSxNQUFJbUIsSUFBSSxHQUFHekYsSUFBSSxDQUFDeUYsSUFBaEI7QUFDQSxNQUFJQyxLQUFLLEdBQUcxRixJQUFJLENBQUMwRixLQUFqQjs7QUFDQSxNQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFVakYsRUFBVixFQUFjO0FBQzdCLFdBQU9rRixLQUFLLENBQUNsRixFQUFFLEdBQUcsQ0FBQ0EsRUFBUCxDQUFMLEdBQWtCLENBQWxCLEdBQXNCLENBQUNBLEVBQUUsR0FBRyxDQUFMLEdBQVNnRixLQUFULEdBQWlCRCxJQUFsQixFQUF3Qi9FLEVBQXhCLENBQTdCO0FBQ0QsR0FGRCxDQW5Ob0IsQ0F1TnBCOzs7QUFDQSxNQUFJbUYsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBVW5GLEVBQVYsRUFBYztBQUMzQixRQUFJQSxFQUFFLElBQUl1QyxTQUFWLEVBQXFCO0FBQUUsWUFBTXJDLFNBQVMsQ0FBQywyQkFBMkJGLEVBQTVCLENBQWY7QUFBaUQ7O0FBQ3hFLFdBQU9BLEVBQVA7QUFDRCxHQUhELENBeE5vQixDQTZOcEI7QUFDQTs7O0FBQ0EsTUFBSW9GLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVUxQyxTQUFWLEVBQXFCO0FBQ25DLFdBQU8sVUFBVVksSUFBVixFQUFnQitCLEdBQWhCLEVBQXFCO0FBQzFCLFVBQUlDLENBQUMsR0FBR3BDLE1BQU0sQ0FBQ2lDLFFBQVEsQ0FBQzdCLElBQUQsQ0FBVCxDQUFkOztBQUNBLFVBQUlsRyxDQUFDLEdBQUc2SCxVQUFVLENBQUNJLEdBQUQsQ0FBbEI7O0FBQ0EsVUFBSUUsQ0FBQyxHQUFHRCxDQUFDLENBQUNySSxNQUFWO0FBQ0EsVUFBSXdELENBQUosRUFBTzhDLENBQVA7O0FBQ0EsVUFBSW5HLENBQUMsR0FBRyxDQUFKLElBQVNBLENBQUMsSUFBSW1JLENBQWxCLEVBQXFCO0FBQUUsZUFBTzdDLFNBQVMsR0FBRyxFQUFILEdBQVFILFNBQXhCO0FBQW9DOztBQUMzRDlCLE9BQUMsR0FBRzZFLENBQUMsQ0FBQ0UsVUFBRixDQUFhcEksQ0FBYixDQUFKO0FBQ0EsYUFBT3FELENBQUMsR0FBRyxNQUFKLElBQWNBLENBQUMsR0FBRyxNQUFsQixJQUE0QnJELENBQUMsR0FBRyxDQUFKLEtBQVVtSSxDQUF0QyxJQUEyQyxDQUFDaEMsQ0FBQyxHQUFHK0IsQ0FBQyxDQUFDRSxVQUFGLENBQWFwSSxDQUFDLEdBQUcsQ0FBakIsQ0FBTCxJQUE0QixNQUF2RSxJQUFpRm1HLENBQUMsR0FBRyxNQUFyRixHQUNIYixTQUFTLEdBQUc0QyxDQUFDLENBQUNHLE1BQUYsQ0FBU3JJLENBQVQsQ0FBSCxHQUFpQnFELENBRHZCLEdBRUhpQyxTQUFTLEdBQUc0QyxDQUFDLENBQUNJLEtBQUYsQ0FBUXRJLENBQVIsRUFBV0EsQ0FBQyxHQUFHLENBQWYsQ0FBSCxHQUF1QixDQUFDcUQsQ0FBQyxHQUFHLE1BQUosSUFBYyxFQUFmLEtBQXNCOEMsQ0FBQyxHQUFHLE1BQTFCLElBQW9DLE9BRnhFO0FBR0QsS0FWRDtBQVdELEdBWkQ7O0FBY0EsTUFBSW9DLEdBQUcsR0FBR1AsU0FBUyxDQUFDLEtBQUQsQ0FBbkI7O0FBQ0FOLFNBQU8sQ0FBQ0EsT0FBTyxDQUFDekQsQ0FBVCxFQUFZLFFBQVosRUFBc0I7QUFDM0I7QUFDQXVFLGVBQVcsRUFBRSxTQUFTQSxXQUFULENBQXFCUCxHQUFyQixFQUEwQjtBQUNyQyxhQUFPTSxHQUFHLENBQUMsSUFBRCxFQUFPTixHQUFQLENBQVY7QUFDRDtBQUowQixHQUF0QixDQUFQOztBQU9BLE1BQUlPLFdBQVcsR0FBR2xHLEtBQUssQ0FBQ3dELE1BQU4sQ0FBYTBDLFdBQS9CO0FBRUEsTUFBSUMsR0FBRyxHQUFHdkcsSUFBSSxDQUFDdUcsR0FBZjtBQUNBLE1BQUlDLEdBQUcsR0FBR3hHLElBQUksQ0FBQ3dHLEdBQWY7O0FBQ0EsTUFBSUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFVQyxLQUFWLEVBQWlCL0ksTUFBakIsRUFBeUI7QUFDOUMrSSxTQUFLLEdBQUdmLFVBQVUsQ0FBQ2UsS0FBRCxDQUFsQjtBQUNBLFdBQU9BLEtBQUssR0FBRyxDQUFSLEdBQVlILEdBQUcsQ0FBQ0csS0FBSyxHQUFHL0ksTUFBVCxFQUFpQixDQUFqQixDQUFmLEdBQXFDNkksR0FBRyxDQUFDRSxLQUFELEVBQVEvSSxNQUFSLENBQS9DO0FBQ0QsR0FIRDs7QUFLQSxNQUFJZ0osWUFBWSxHQUFHL0MsTUFBTSxDQUFDK0MsWUFBMUI7QUFDQSxNQUFJQyxjQUFjLEdBQUdoRCxNQUFNLENBQUNpRCxhQUE1QixDQS9Qb0IsQ0FpUXBCOztBQUNBckIsU0FBTyxDQUFDQSxPQUFPLENBQUNoRSxDQUFSLEdBQVlnRSxPQUFPLENBQUNkLENBQVIsSUFBYSxDQUFDLENBQUNrQyxjQUFGLElBQW9CQSxjQUFjLENBQUNqSixNQUFmLElBQXlCLENBQTFELENBQWIsRUFBMkUsUUFBM0UsRUFBcUY7QUFDMUY7QUFDQWtKLGlCQUFhLEVBQUUsU0FBU0EsYUFBVCxDQUF1QkMsQ0FBdkIsRUFBMEI7QUFDdkMsVUFBSUMsV0FBVyxHQUFHM0MsU0FBbEIsQ0FEdUMsQ0FFMUM7O0FBQ0csVUFBSTRDLEdBQUcsR0FBRyxFQUFWO0FBQ0EsVUFBSUMsSUFBSSxHQUFHN0MsU0FBUyxDQUFDekcsTUFBckI7QUFDQSxVQUFJRyxDQUFDLEdBQUcsQ0FBUjtBQUNBLFVBQUlyQyxJQUFKOztBQUNBLGFBQU93TCxJQUFJLEdBQUduSixDQUFkLEVBQWlCO0FBQ2ZyQyxZQUFJLEdBQUcsQ0FBQ3NMLFdBQVcsQ0FBQ2pKLENBQUMsRUFBRixDQUFuQjs7QUFDQSxZQUFJMkksZ0JBQWdCLENBQUNoTCxJQUFELEVBQU8sUUFBUCxDQUFoQixLQUFxQ0EsSUFBekMsRUFBK0M7QUFBRSxnQkFBTXlMLFVBQVUsQ0FBQ3pMLElBQUksR0FBRyw0QkFBUixDQUFoQjtBQUF3RDs7QUFDekd1TCxXQUFHLENBQUNHLElBQUosQ0FBUzFMLElBQUksR0FBRyxPQUFQLEdBQ0xrTCxZQUFZLENBQUNsTCxJQUFELENBRFAsR0FFTGtMLFlBQVksQ0FBQyxDQUFDLENBQUNsTCxJQUFJLElBQUksT0FBVCxLQUFxQixFQUF0QixJQUE0QixNQUE3QixFQUFxQ0EsSUFBSSxHQUFHLEtBQVAsR0FBZSxNQUFwRCxDQUZoQjtBQUlEOztBQUFDLGFBQU91TCxHQUFHLENBQUNyRCxJQUFKLENBQVMsRUFBVCxDQUFQO0FBQ0g7QUFqQnlGLEdBQXJGLENBQVA7O0FBb0JBLE1BQUlrRCxhQUFhLEdBQUd6RyxLQUFLLENBQUN3RCxNQUFOLENBQWFpRCxhQUFqQyxDQXRSb0IsQ0F3UnBCOztBQUNBLE1BQUlPLGVBQWUsR0FBRyx5Q0FBdEI7QUFDQSxNQUFJQyxRQUFRLEdBQUcscTdOQUFmO0FBQ0EsTUFBSUMsV0FBVyxHQUFHLG8yUUFBbEI7QUFFQSxNQUFJQyxPQUFPLEdBQUc7QUFDYkgsbUJBQWUsRUFBRUEsZUFESjtBQUViQyxZQUFRLEVBQUVBLFFBRkc7QUFHYkMsZUFBVyxFQUFFQTtBQUhBLEdBQWQ7QUFNQSxNQUFJRSxJQUFJLEdBQUc7QUFDUEMsb0JBQWdCLEVBQUUsU0FBU0EsZ0JBQVQsQ0FBMkJ2RCxDQUEzQixFQUE4QjtBQUM1QyxhQUFPcUQsT0FBTyxDQUFDSCxlQUFSLENBQXdCTSxJQUF4QixDQUE2QnhELENBQTdCLENBQVA7QUFDSCxLQUhNO0FBS1B5RCxpQkFBYSxFQUFFLFNBQVNBLGFBQVQsQ0FBd0J6RCxDQUF4QixFQUEyQjtBQUN0QyxhQUNLQSxDQUFDLElBQUksR0FBTCxJQUFZQSxDQUFDLElBQUksR0FBbEIsSUFDSEEsQ0FBQyxJQUFJLEdBQUwsSUFBWUEsQ0FBQyxJQUFJLEdBRGQsSUFFSEEsQ0FBQyxLQUFLLEdBRkgsSUFFWUEsQ0FBQyxLQUFLLEdBRmxCLElBR0pxRCxPQUFPLENBQUNGLFFBQVIsQ0FBaUJLLElBQWpCLENBQXNCeEQsQ0FBdEIsQ0FKQTtBQU1ILEtBWk07QUFjUDBELG9CQUFnQixFQUFFLFNBQVNBLGdCQUFULENBQTJCMUQsQ0FBM0IsRUFBOEI7QUFDNUMsYUFDS0EsQ0FBQyxJQUFJLEdBQUwsSUFBWUEsQ0FBQyxJQUFJLEdBQWxCLElBQ0hBLENBQUMsSUFBSSxHQUFMLElBQVlBLENBQUMsSUFBSSxHQURkLElBRUhBLENBQUMsSUFBSSxHQUFMLElBQVlBLENBQUMsSUFBSSxHQUZkLElBR0hBLENBQUMsS0FBSyxHQUhILElBR1lBLENBQUMsS0FBSyxHQUhsQixJQUlIQSxDQUFDLEtBQUssUUFKSCxJQUlpQkEsQ0FBQyxLQUFLLFFBSnZCLElBS0pxRCxPQUFPLENBQUNELFdBQVIsQ0FBb0JJLElBQXBCLENBQXlCeEQsQ0FBekIsQ0FOQTtBQVFILEtBdkJNO0FBeUJQMkQsV0FBTyxFQUFFLFNBQVNBLE9BQVQsQ0FBa0IzRCxDQUFsQixFQUFxQjtBQUMxQixhQUFPLFFBQVF3RCxJQUFSLENBQWF4RCxDQUFiLENBQVA7QUFDSCxLQTNCTTtBQTZCUDRELGNBQVUsRUFBRSxTQUFTQSxVQUFULENBQXFCNUQsQ0FBckIsRUFBd0I7QUFDaEMsYUFBTyxjQUFjd0QsSUFBZCxDQUFtQnhELENBQW5CLENBQVA7QUFDSDtBQS9CTSxHQUFYO0FBa0NBLE1BQUlNLE1BQUo7QUFDQSxNQUFJdUQsVUFBSjtBQUNBLE1BQUlDLEtBQUo7QUFDQSxNQUFJakMsR0FBSjtBQUNBLE1BQUlrQyxJQUFKO0FBQ0EsTUFBSUMsTUFBSjtBQUNBLE1BQUlDLEtBQUo7QUFDQSxNQUFJMUYsR0FBSjtBQUNBLE1BQUkyRixJQUFKOztBQUVBLE1BQUlyTSxLQUFLLEdBQUcsU0FBU0EsS0FBVCxDQUFnQnNNLElBQWhCLEVBQXNCQyxPQUF0QixFQUErQjtBQUN2QzlELFVBQU0sR0FBR1osTUFBTSxDQUFDeUUsSUFBRCxDQUFmO0FBQ0FOLGNBQVUsR0FBRyxPQUFiO0FBQ0FDLFNBQUssR0FBRyxFQUFSO0FBQ0FqQyxPQUFHLEdBQUcsQ0FBTjtBQUNBa0MsUUFBSSxHQUFHLENBQVA7QUFDQUMsVUFBTSxHQUFHLENBQVQ7QUFDQUMsU0FBSyxHQUFHbEYsU0FBUjtBQUNBUixPQUFHLEdBQUdRLFNBQU47QUFDQW1GLFFBQUksR0FBR25GLFNBQVA7O0FBRUEsT0FBRztBQUNDa0YsV0FBSyxHQUFHSSxHQUFHLEVBQVgsQ0FERCxDQUdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBQyxpQkFBVyxDQUFDVCxVQUFELENBQVg7QUFDSCxLQVRELFFBU1NJLEtBQUssQ0FBQ3RNLElBQU4sS0FBZSxLQVR4Qjs7QUFXQSxRQUFJLE9BQU95TSxPQUFQLEtBQW1CLFVBQXZCLEVBQW1DO0FBQy9CLGFBQU9HLFdBQVcsQ0FBQztBQUFDLFlBQUlMO0FBQUwsT0FBRCxFQUFhLEVBQWIsRUFBaUJFLE9BQWpCLENBQWxCO0FBQ0g7O0FBRUQsV0FBT0YsSUFBUDtBQUNILEdBM0JEOztBQTZCQSxXQUFTSyxXQUFULENBQXNCQyxNQUF0QixFQUE4Qm5FLElBQTlCLEVBQW9DK0QsT0FBcEMsRUFBNkM7QUFDekMsUUFBSXRNLEtBQUssR0FBRzBNLE1BQU0sQ0FBQ25FLElBQUQsQ0FBbEI7O0FBQ0EsUUFBSXZJLEtBQUssSUFBSSxJQUFULElBQWlCLFFBQU9BLEtBQVAsTUFBaUIsUUFBdEMsRUFBZ0Q7QUFDNUMsV0FBSyxJQUFJeUcsR0FBVCxJQUFnQnpHLEtBQWhCLEVBQXVCO0FBQ25CLFlBQUkyTSxXQUFXLEdBQUdGLFdBQVcsQ0FBQ3pNLEtBQUQsRUFBUXlHLEdBQVIsRUFBYTZGLE9BQWIsQ0FBN0I7O0FBQ0EsWUFBSUssV0FBVyxLQUFLMUYsU0FBcEIsRUFBK0I7QUFDM0IsaUJBQU9qSCxLQUFLLENBQUN5RyxHQUFELENBQVo7QUFDSCxTQUZELE1BRU87QUFDSHpHLGVBQUssQ0FBQ3lHLEdBQUQsQ0FBTCxHQUFha0csV0FBYjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxXQUFPTCxPQUFPLENBQUNyTSxJQUFSLENBQWF5TSxNQUFiLEVBQXFCbkUsSUFBckIsRUFBMkJ2SSxLQUEzQixDQUFQO0FBQ0g7O0FBRUQsTUFBSTRNLFFBQUo7QUFDQSxNQUFJQyxNQUFKO0FBQ0EsTUFBSUMsV0FBSjtBQUNBLE1BQUlDLElBQUo7QUFDQSxNQUFJN0UsQ0FBSjs7QUFFQSxXQUFTcUUsR0FBVCxHQUFnQjtBQUNaSyxZQUFRLEdBQUcsU0FBWDtBQUNBQyxVQUFNLEdBQUcsRUFBVDtBQUNBQyxlQUFXLEdBQUcsS0FBZDtBQUNBQyxRQUFJLEdBQUcsQ0FBUDs7QUFFQSxhQUFTO0FBQ0w3RSxPQUFDLEdBQUc4RSxJQUFJLEVBQVIsQ0FESyxDQUdMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQUliLEtBQUssR0FBR2MsU0FBUyxDQUFDTCxRQUFELENBQVQsRUFBWjs7QUFDQSxVQUFJVCxLQUFKLEVBQVc7QUFDUCxlQUFPQSxLQUFQO0FBQ0g7QUFDSjtBQUNKOztBQUVELFdBQVNhLElBQVQsR0FBaUI7QUFDYixRQUFJeEUsTUFBTSxDQUFDdUIsR0FBRCxDQUFWLEVBQWlCO0FBQ2IsYUFBT25DLE1BQU0sQ0FBQ2lELGFBQVAsQ0FBcUJyQyxNQUFNLENBQUM4QixXQUFQLENBQW1CUCxHQUFuQixDQUFyQixDQUFQO0FBQ0g7QUFDSjs7QUFFRCxXQUFTbUQsSUFBVCxHQUFpQjtBQUNiLFFBQUloRixDQUFDLEdBQUc4RSxJQUFJLEVBQVo7O0FBRUEsUUFBSTlFLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ1orRCxVQUFJO0FBQ0pDLFlBQU0sR0FBRyxDQUFUO0FBQ0gsS0FIRCxNQUdPLElBQUloRSxDQUFKLEVBQU87QUFDVmdFLFlBQU0sSUFBSWhFLENBQUMsQ0FBQ3ZHLE1BQVo7QUFDSCxLQUZNLE1BRUE7QUFDSHVLLFlBQU07QUFDVDs7QUFFRCxRQUFJaEUsQ0FBSixFQUFPO0FBQ0g2QixTQUFHLElBQUk3QixDQUFDLENBQUN2RyxNQUFUO0FBQ0g7O0FBRUQsV0FBT3VHLENBQVA7QUFDSDs7QUFFRCxNQUFJK0UsU0FBUyxHQUFHO0FBQ1pFLFdBQU8sRUFBRSxTQUFTQyxTQUFULEdBQXNCO0FBQzNCLGNBQVFsRixDQUFSO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsYUFBSyxNQUFMO0FBQ0EsYUFBSyxRQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxJQUFMO0FBQ0EsYUFBSyxRQUFMO0FBQ0EsYUFBSyxRQUFMO0FBQ0lnRixjQUFJO0FBQ0o7O0FBRUosYUFBSyxHQUFMO0FBQ0lBLGNBQUk7QUFDSk4sa0JBQVEsR0FBRyxTQUFYO0FBQ0E7O0FBRUosYUFBSzNGLFNBQUw7QUFDSWlHLGNBQUk7QUFDSixpQkFBT0csUUFBUSxDQUFDLEtBQUQsQ0FBZjtBQXJCSjs7QUF3QkEsVUFBSTdCLElBQUksQ0FBQ0MsZ0JBQUwsQ0FBc0J2RCxDQUF0QixDQUFKLEVBQThCO0FBQzFCZ0YsWUFBSTtBQUNKO0FBQ0gsT0E1QjBCLENBOEIzQjtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsYUFBT0QsU0FBUyxDQUFDbEIsVUFBRCxDQUFULEVBQVA7QUFDSCxLQXJDVztBQXVDWnVCLFdBQU8sRUFBRSxTQUFTQSxPQUFULEdBQW9CO0FBQ3pCLGNBQVFwRixDQUFSO0FBQ0EsYUFBSyxHQUFMO0FBQ0lnRixjQUFJO0FBQ0pOLGtCQUFRLEdBQUcsa0JBQVg7QUFDQTs7QUFFSixhQUFLLEdBQUw7QUFDSU0sY0FBSTtBQUNKTixrQkFBUSxHQUFHLG1CQUFYO0FBQ0E7QUFUSjs7QUFZQSxZQUFNVyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNILEtBckRXO0FBdURaTSxvQkFBZ0IsRUFBRSxTQUFTQSxnQkFBVCxHQUE2QjtBQUMzQyxjQUFRdEYsQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNJZ0YsY0FBSTtBQUNKTixrQkFBUSxHQUFHLDBCQUFYO0FBQ0E7O0FBRUosYUFBSzNGLFNBQUw7QUFDSSxnQkFBTXNHLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBUEo7O0FBVUFBLFVBQUk7QUFDUCxLQW5FVztBQXFFWk8sNEJBQXdCLEVBQUUsU0FBU0Esd0JBQVQsR0FBcUM7QUFDM0QsY0FBUXZGLENBQVI7QUFDQSxhQUFLLEdBQUw7QUFDSWdGLGNBQUk7QUFDSjs7QUFFSixhQUFLLEdBQUw7QUFDSUEsY0FBSTtBQUNKTixrQkFBUSxHQUFHLFNBQVg7QUFDQTs7QUFFSixhQUFLM0YsU0FBTDtBQUNJLGdCQUFNc0csV0FBVyxDQUFDTCxJQUFJLEVBQUwsQ0FBakI7QUFYSjs7QUFjQUEsVUFBSTtBQUNKTixjQUFRLEdBQUcsa0JBQVg7QUFDSCxLQXRGVztBQXdGWmMscUJBQWlCLEVBQUUsU0FBU0EsaUJBQVQsR0FBOEI7QUFDN0MsY0FBUXhGLENBQVI7QUFDQSxhQUFLLElBQUw7QUFDQSxhQUFLLElBQUw7QUFDQSxhQUFLLFFBQUw7QUFDQSxhQUFLLFFBQUw7QUFDSWdGLGNBQUk7QUFDSk4sa0JBQVEsR0FBRyxTQUFYO0FBQ0E7O0FBRUosYUFBSzNGLFNBQUw7QUFDSWlHLGNBQUk7QUFDSixpQkFBT0csUUFBUSxDQUFDLEtBQUQsQ0FBZjtBQVhKOztBQWNBSCxVQUFJO0FBQ1AsS0F4R1c7QUEwR1psTixTQUFLLEVBQUUsU0FBU0EsS0FBVCxHQUFrQjtBQUNyQixjQUFRa0ksQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJLGlCQUFPbUYsUUFBUSxDQUFDLFlBQUQsRUFBZUgsSUFBSSxFQUFuQixDQUFmOztBQUVKLGFBQUssR0FBTDtBQUNJQSxjQUFJO0FBQ0pTLGlCQUFPLENBQUMsS0FBRCxDQUFQO0FBQ0EsaUJBQU9OLFFBQVEsQ0FBQyxNQUFELEVBQVMsSUFBVCxDQUFmOztBQUVKLGFBQUssR0FBTDtBQUNJSCxjQUFJO0FBQ0pTLGlCQUFPLENBQUMsS0FBRCxDQUFQO0FBQ0EsaUJBQU9OLFFBQVEsQ0FBQyxTQUFELEVBQVksSUFBWixDQUFmOztBQUVKLGFBQUssR0FBTDtBQUNJSCxjQUFJO0FBQ0pTLGlCQUFPLENBQUMsTUFBRCxDQUFQO0FBQ0EsaUJBQU9OLFFBQVEsQ0FBQyxTQUFELEVBQVksS0FBWixDQUFmOztBQUVKLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJLGNBQUlILElBQUksT0FBTyxHQUFmLEVBQW9CO0FBQ2hCSCxnQkFBSSxHQUFHLENBQUMsQ0FBUjtBQUNIOztBQUVESCxrQkFBUSxHQUFHLE1BQVg7QUFDQTs7QUFFSixhQUFLLEdBQUw7QUFDSUMsZ0JBQU0sR0FBR0ssSUFBSSxFQUFiO0FBQ0FOLGtCQUFRLEdBQUcscUJBQVg7QUFDQTs7QUFFSixhQUFLLEdBQUw7QUFDSUMsZ0JBQU0sR0FBR0ssSUFBSSxFQUFiO0FBQ0FOLGtCQUFRLEdBQUcsTUFBWDtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJQyxnQkFBTSxHQUFHSyxJQUFJLEVBQWI7QUFDQU4sa0JBQVEsR0FBRyxnQkFBWDtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNJTSxjQUFJO0FBQ0pTLGlCQUFPLENBQUMsU0FBRCxDQUFQO0FBQ0EsaUJBQU9OLFFBQVEsQ0FBQyxTQUFELEVBQVlPLFFBQVosQ0FBZjs7QUFFSixhQUFLLEdBQUw7QUFDSVYsY0FBSTtBQUNKUyxpQkFBTyxDQUFDLElBQUQsQ0FBUDtBQUNBLGlCQUFPTixRQUFRLENBQUMsU0FBRCxFQUFZUSxHQUFaLENBQWY7O0FBRUosYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0lmLHFCQUFXLEdBQUlJLElBQUksT0FBTyxHQUExQjtBQUNBTCxnQkFBTSxHQUFHLEVBQVQ7QUFDQUQsa0JBQVEsR0FBRyxRQUFYO0FBQ0E7QUFuRUo7O0FBc0VBLFlBQU1XLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0gsS0FsTFc7QUFvTFpZLDZCQUF5QixFQUFFLFNBQVNBLHlCQUFULEdBQXNDO0FBQzdELFVBQUk1RixDQUFDLEtBQUssR0FBVixFQUFlO0FBQ1gsY0FBTXFGLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0g7O0FBRURBLFVBQUk7QUFDSixVQUFJYSxDQUFDLEdBQUdDLGFBQWEsRUFBckI7O0FBQ0EsY0FBUUQsQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJOztBQUVKO0FBQ0ksY0FBSSxDQUFDdkMsSUFBSSxDQUFDRyxhQUFMLENBQW1Cb0MsQ0FBbkIsQ0FBTCxFQUE0QjtBQUN4QixrQkFBTUUsaUJBQWlCLEVBQXZCO0FBQ0g7O0FBRUQ7QUFWSjs7QUFhQXBCLFlBQU0sSUFBSWtCLENBQVY7QUFDQW5CLGNBQVEsR0FBRyxnQkFBWDtBQUNILEtBMU1XO0FBNE1ac0Isa0JBQWMsRUFBRSxTQUFTQSxjQUFULEdBQTJCO0FBQ3ZDLGNBQVFoRyxDQUFSO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsYUFBSyxRQUFMO0FBQ0EsYUFBSyxRQUFMO0FBQ0kyRSxnQkFBTSxJQUFJSyxJQUFJLEVBQWQ7QUFDQTs7QUFFSixhQUFLLElBQUw7QUFDSUEsY0FBSTtBQUNKTixrQkFBUSxHQUFHLHNCQUFYO0FBQ0E7QUFYSjs7QUFjQSxVQUFJcEIsSUFBSSxDQUFDSSxnQkFBTCxDQUFzQjFELENBQXRCLENBQUosRUFBOEI7QUFDMUIyRSxjQUFNLElBQUlLLElBQUksRUFBZDtBQUNBO0FBQ0g7O0FBRUQsYUFBT0csUUFBUSxDQUFDLFlBQUQsRUFBZVIsTUFBZixDQUFmO0FBQ0gsS0FqT1c7QUFtT1pzQix3QkFBb0IsRUFBRSxTQUFTQSxvQkFBVCxHQUFpQztBQUNuRCxVQUFJakcsQ0FBQyxLQUFLLEdBQVYsRUFBZTtBQUNYLGNBQU1xRixXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNIOztBQUVEQSxVQUFJO0FBQ0osVUFBSWEsQ0FBQyxHQUFHQyxhQUFhLEVBQXJCOztBQUNBLGNBQVFELENBQVI7QUFDQSxhQUFLLEdBQUw7QUFDQSxhQUFLLEdBQUw7QUFDQSxhQUFLLFFBQUw7QUFDQSxhQUFLLFFBQUw7QUFDSTs7QUFFSjtBQUNJLGNBQUksQ0FBQ3ZDLElBQUksQ0FBQ0ksZ0JBQUwsQ0FBc0JtQyxDQUF0QixDQUFMLEVBQStCO0FBQzNCLGtCQUFNRSxpQkFBaUIsRUFBdkI7QUFDSDs7QUFFRDtBQVpKOztBQWVBcEIsWUFBTSxJQUFJa0IsQ0FBVjtBQUNBbkIsY0FBUSxHQUFHLGdCQUFYO0FBQ0gsS0EzUFc7QUE2UFpHLFFBQUksRUFBRSxTQUFTcUIsTUFBVCxHQUFtQjtBQUNyQixjQUFRbEcsQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNJMkUsZ0JBQU0sR0FBR0ssSUFBSSxFQUFiO0FBQ0FOLGtCQUFRLEdBQUcscUJBQVg7QUFDQTs7QUFFSixhQUFLLEdBQUw7QUFDSUMsZ0JBQU0sR0FBR0ssSUFBSSxFQUFiO0FBQ0FOLGtCQUFRLEdBQUcsTUFBWDtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJQyxnQkFBTSxHQUFHSyxJQUFJLEVBQWI7QUFDQU4sa0JBQVEsR0FBRyxnQkFBWDtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNJTSxjQUFJO0FBQ0pTLGlCQUFPLENBQUMsU0FBRCxDQUFQO0FBQ0EsaUJBQU9OLFFBQVEsQ0FBQyxTQUFELEVBQVlOLElBQUksR0FBR2EsUUFBbkIsQ0FBZjs7QUFFSixhQUFLLEdBQUw7QUFDSVYsY0FBSTtBQUNKUyxpQkFBTyxDQUFDLElBQUQsQ0FBUDtBQUNBLGlCQUFPTixRQUFRLENBQUMsU0FBRCxFQUFZUSxHQUFaLENBQWY7QUFoQ0o7O0FBbUNBLFlBQU1OLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0gsS0FsU1c7QUFvU1ptQixRQUFJLEVBQUUsU0FBU0EsSUFBVCxHQUFpQjtBQUNuQixjQUFRbkcsQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNJMkUsZ0JBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0FOLGtCQUFRLEdBQUcsY0FBWDtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJQyxnQkFBTSxJQUFJSyxJQUFJLEVBQWQ7QUFDQU4sa0JBQVEsR0FBRyxpQkFBWDtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJQyxnQkFBTSxJQUFJSyxJQUFJLEVBQWQ7QUFDQU4sa0JBQVEsR0FBRyxhQUFYO0FBQ0E7QUFoQko7O0FBbUJBLGFBQU9TLFFBQVEsQ0FBQyxTQUFELEVBQVlOLElBQUksR0FBRyxDQUFuQixDQUFmO0FBQ0gsS0F6VFc7QUEyVFp1QixrQkFBYyxFQUFFLFNBQVNBLGNBQVQsR0FBMkI7QUFDdkMsY0FBUXBHLENBQVI7QUFDQSxhQUFLLEdBQUw7QUFDSTJFLGdCQUFNLElBQUlLLElBQUksRUFBZDtBQUNBTixrQkFBUSxHQUFHLGNBQVg7QUFDQTs7QUFFSixhQUFLLEdBQUw7QUFDQSxhQUFLLEdBQUw7QUFDSUMsZ0JBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0FOLGtCQUFRLEdBQUcsaUJBQVg7QUFDQTtBQVZKOztBQWFBLFVBQUlwQixJQUFJLENBQUNLLE9BQUwsQ0FBYTNELENBQWIsQ0FBSixFQUFxQjtBQUNqQjJFLGNBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0E7QUFDSDs7QUFFRCxhQUFPRyxRQUFRLENBQUMsU0FBRCxFQUFZTixJQUFJLEdBQUd3QixNQUFNLENBQUMxQixNQUFELENBQXpCLENBQWY7QUFDSCxLQS9VVztBQWlWWjJCLHVCQUFtQixFQUFFLFNBQVNBLG1CQUFULEdBQWdDO0FBQ2pELFVBQUloRCxJQUFJLENBQUNLLE9BQUwsQ0FBYTNELENBQWIsQ0FBSixFQUFxQjtBQUNqQjJFLGNBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0FOLGdCQUFRLEdBQUcsaUJBQVg7QUFDQTtBQUNIOztBQUVELFlBQU1XLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0gsS0F6Vlc7QUEyVlp1QixnQkFBWSxFQUFFLFNBQVNBLFlBQVQsR0FBeUI7QUFDbkMsY0FBUXZHLENBQVI7QUFDQSxhQUFLLEdBQUw7QUFDQSxhQUFLLEdBQUw7QUFDSTJFLGdCQUFNLElBQUlLLElBQUksRUFBZDtBQUNBTixrQkFBUSxHQUFHLGlCQUFYO0FBQ0E7QUFMSjs7QUFRQSxVQUFJcEIsSUFBSSxDQUFDSyxPQUFMLENBQWEzRCxDQUFiLENBQUosRUFBcUI7QUFDakIyRSxjQUFNLElBQUlLLElBQUksRUFBZDtBQUNBTixnQkFBUSxHQUFHLGlCQUFYO0FBQ0E7QUFDSDs7QUFFRCxhQUFPUyxRQUFRLENBQUMsU0FBRCxFQUFZTixJQUFJLEdBQUd3QixNQUFNLENBQUMxQixNQUFELENBQXpCLENBQWY7QUFDSCxLQTNXVztBQTZXWjZCLG1CQUFlLEVBQUUsU0FBU0EsZUFBVCxHQUE0QjtBQUN6QyxjQUFReEcsQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJMkUsZ0JBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0FOLGtCQUFRLEdBQUcsaUJBQVg7QUFDQTtBQUxKOztBQVFBLFVBQUlwQixJQUFJLENBQUNLLE9BQUwsQ0FBYTNELENBQWIsQ0FBSixFQUFxQjtBQUNqQjJFLGNBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0E7QUFDSDs7QUFFRCxhQUFPRyxRQUFRLENBQUMsU0FBRCxFQUFZTixJQUFJLEdBQUd3QixNQUFNLENBQUMxQixNQUFELENBQXpCLENBQWY7QUFDSCxLQTVYVztBQThYWjhCLG1CQUFlLEVBQUUsU0FBU0EsZUFBVCxHQUE0QjtBQUN6QyxjQUFRekcsQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssR0FBTDtBQUNJMkUsZ0JBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0FOLGtCQUFRLEdBQUcscUJBQVg7QUFDQTtBQUxKOztBQVFBLFVBQUlwQixJQUFJLENBQUNLLE9BQUwsQ0FBYTNELENBQWIsQ0FBSixFQUFxQjtBQUNqQjJFLGNBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0FOLGdCQUFRLEdBQUcsd0JBQVg7QUFDQTtBQUNIOztBQUVELFlBQU1XLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0gsS0E5WVc7QUFnWlowQix1QkFBbUIsRUFBRSxTQUFTQSxtQkFBVCxHQUFnQztBQUNqRCxVQUFJcEQsSUFBSSxDQUFDSyxPQUFMLENBQWEzRCxDQUFiLENBQUosRUFBcUI7QUFDakIyRSxjQUFNLElBQUlLLElBQUksRUFBZDtBQUNBTixnQkFBUSxHQUFHLHdCQUFYO0FBQ0E7QUFDSDs7QUFFRCxZQUFNVyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNILEtBeFpXO0FBMFpaMkIsMEJBQXNCLEVBQUUsU0FBU0Esc0JBQVQsR0FBbUM7QUFDdkQsVUFBSXJELElBQUksQ0FBQ0ssT0FBTCxDQUFhM0QsQ0FBYixDQUFKLEVBQXFCO0FBQ2pCMkUsY0FBTSxJQUFJSyxJQUFJLEVBQWQ7QUFDQTtBQUNIOztBQUVELGFBQU9HLFFBQVEsQ0FBQyxTQUFELEVBQVlOLElBQUksR0FBR3dCLE1BQU0sQ0FBQzFCLE1BQUQsQ0FBekIsQ0FBZjtBQUNILEtBamFXO0FBbWFaaUMsZUFBVyxFQUFFLFNBQVNBLFdBQVQsR0FBd0I7QUFDakMsVUFBSXRELElBQUksQ0FBQ00sVUFBTCxDQUFnQjVELENBQWhCLENBQUosRUFBd0I7QUFDcEIyRSxjQUFNLElBQUlLLElBQUksRUFBZDtBQUNBTixnQkFBUSxHQUFHLG9CQUFYO0FBQ0E7QUFDSDs7QUFFRCxZQUFNVyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNILEtBM2FXO0FBNmFaNkIsc0JBQWtCLEVBQUUsU0FBU0Esa0JBQVQsR0FBK0I7QUFDL0MsVUFBSXZELElBQUksQ0FBQ00sVUFBTCxDQUFnQjVELENBQWhCLENBQUosRUFBd0I7QUFDcEIyRSxjQUFNLElBQUlLLElBQUksRUFBZDtBQUNBO0FBQ0g7O0FBRUQsYUFBT0csUUFBUSxDQUFDLFNBQUQsRUFBWU4sSUFBSSxHQUFHd0IsTUFBTSxDQUFDMUIsTUFBRCxDQUF6QixDQUFmO0FBQ0gsS0FwYlc7QUFzYlptQyxVQUFNLEVBQUUsU0FBU0EsTUFBVCxHQUFtQjtBQUN2QixjQUFROUcsQ0FBUjtBQUNBLGFBQUssSUFBTDtBQUNJZ0YsY0FBSTtBQUNKTCxnQkFBTSxJQUFJb0MsTUFBTSxFQUFoQjtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNJLGNBQUluQyxXQUFKLEVBQWlCO0FBQ2JJLGdCQUFJO0FBQ0osbUJBQU9HLFFBQVEsQ0FBQyxRQUFELEVBQVdSLE1BQVgsQ0FBZjtBQUNIOztBQUVEQSxnQkFBTSxJQUFJSyxJQUFJLEVBQWQ7QUFDQTs7QUFFSixhQUFLLEdBQUw7QUFDSSxjQUFJLENBQUNKLFdBQUwsRUFBa0I7QUFDZEksZ0JBQUk7QUFDSixtQkFBT0csUUFBUSxDQUFDLFFBQUQsRUFBV1IsTUFBWCxDQUFmO0FBQ0g7O0FBRURBLGdCQUFNLElBQUlLLElBQUksRUFBZDtBQUNBOztBQUVKLGFBQUssSUFBTDtBQUNBLGFBQUssSUFBTDtBQUNJLGdCQUFNSyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjs7QUFFSixhQUFLLFFBQUw7QUFDQSxhQUFLLFFBQUw7QUFDSWdDLHVCQUFhLENBQUNoSCxDQUFELENBQWI7QUFDQTs7QUFFSixhQUFLakIsU0FBTDtBQUNJLGdCQUFNc0csV0FBVyxDQUFDTCxJQUFJLEVBQUwsQ0FBakI7QUFsQ0o7O0FBcUNBTCxZQUFNLElBQUlLLElBQUksRUFBZDtBQUNILEtBN2RXO0FBK2RaaUMsU0FBSyxFQUFFLFNBQVNBLEtBQVQsR0FBa0I7QUFDckIsY0FBUWpILENBQVI7QUFDQSxhQUFLLEdBQUw7QUFDQSxhQUFLLEdBQUw7QUFDSSxpQkFBT21GLFFBQVEsQ0FBQyxZQUFELEVBQWVILElBQUksRUFBbkIsQ0FBZjtBQUVKO0FBQ0E7QUFDQTtBQVBBOztBQVVBTixjQUFRLEdBQUcsT0FBWDtBQUNILEtBM2VXO0FBNmVad0Msc0JBQWtCLEVBQUUsU0FBU0Esa0JBQVQsR0FBK0I7QUFDL0MsY0FBUWxILENBQVI7QUFDQSxhQUFLLEdBQUw7QUFDQSxhQUFLLEdBQUw7QUFDSTJFLGdCQUFNLEdBQUdLLElBQUksRUFBYjtBQUNBTixrQkFBUSxHQUFHLGdCQUFYO0FBQ0E7O0FBRUosYUFBSyxJQUFMO0FBQ0lNLGNBQUk7QUFDSk4sa0JBQVEsR0FBRywyQkFBWDtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNJLGlCQUFPUyxRQUFRLENBQUMsWUFBRCxFQUFlSCxJQUFJLEVBQW5CLENBQWY7O0FBRUosYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0lKLHFCQUFXLEdBQUlJLElBQUksT0FBTyxHQUExQjtBQUNBTixrQkFBUSxHQUFHLFFBQVg7QUFDQTtBQW5CSjs7QUFzQkEsVUFBSXBCLElBQUksQ0FBQ0csYUFBTCxDQUFtQnpELENBQW5CLENBQUosRUFBMkI7QUFDdkIyRSxjQUFNLElBQUlLLElBQUksRUFBZDtBQUNBTixnQkFBUSxHQUFHLGdCQUFYO0FBQ0E7QUFDSDs7QUFFRCxZQUFNVyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNILEtBM2dCVztBQTZnQlptQyxxQkFBaUIsRUFBRSxTQUFTQSxpQkFBVCxHQUE4QjtBQUM3QyxVQUFJbkgsQ0FBQyxLQUFLLEdBQVYsRUFBZTtBQUNYLGVBQU9tRixRQUFRLENBQUMsWUFBRCxFQUFlSCxJQUFJLEVBQW5CLENBQWY7QUFDSDs7QUFFRCxZQUFNSyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNILEtBbmhCVztBQXFoQlpvQyx1QkFBbUIsRUFBRSxTQUFTQSxtQkFBVCxHQUFnQztBQUNqRDFDLGNBQVEsR0FBRyxPQUFYO0FBQ0gsS0F2aEJXO0FBeWhCWjJDLHNCQUFrQixFQUFFLFNBQVNBLGtCQUFULEdBQStCO0FBQy9DLGNBQVFySCxDQUFSO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0ksaUJBQU9tRixRQUFRLENBQUMsWUFBRCxFQUFlSCxJQUFJLEVBQW5CLENBQWY7QUFISjs7QUFNQSxZQUFNSyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNILEtBamlCVztBQW1pQlpzQyxvQkFBZ0IsRUFBRSxTQUFTQSxnQkFBVCxHQUE2QjtBQUMzQyxVQUFJdEgsQ0FBQyxLQUFLLEdBQVYsRUFBZTtBQUNYLGVBQU9tRixRQUFRLENBQUMsWUFBRCxFQUFlSCxJQUFJLEVBQW5CLENBQWY7QUFDSDs7QUFFRE4sY0FBUSxHQUFHLE9BQVg7QUFDSCxLQXppQlc7QUEyaUJaNkMsbUJBQWUsRUFBRSxTQUFTQSxlQUFULEdBQTRCO0FBQ3pDLGNBQVF2SCxDQUFSO0FBQ0EsYUFBSyxHQUFMO0FBQ0EsYUFBSyxHQUFMO0FBQ0ksaUJBQU9tRixRQUFRLENBQUMsWUFBRCxFQUFlSCxJQUFJLEVBQW5CLENBQWY7QUFISjs7QUFNQSxZQUFNSyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNILEtBbmpCVztBQXFqQlp3QyxPQUFHLEVBQUUsU0FBU0EsR0FBVCxHQUFnQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsWUFBTW5DLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0g7QUE3akJXLEdBQWhCOztBQWdrQkEsV0FBU0csUUFBVCxDQUFtQnhOLElBQW5CLEVBQXlCRyxLQUF6QixFQUFnQztBQUM1QixXQUFPO0FBQ0hILFVBQUksRUFBRUEsSUFESDtBQUVIRyxXQUFLLEVBQUVBLEtBRko7QUFHSGlNLFVBQUksRUFBRUEsSUFISDtBQUlIQyxZQUFNLEVBQUVBO0FBSkwsS0FBUDtBQU1IOztBQUVELFdBQVN5QixPQUFULENBQWtCM0QsQ0FBbEIsRUFBcUI7QUFDakIsU0FBSyxJQUFJbEksQ0FBQyxHQUFHLENBQVIsRUFBVzZOLElBQUksR0FBRzNGLENBQXZCLEVBQTBCbEksQ0FBQyxHQUFHNk4sSUFBSSxDQUFDaE8sTUFBbkMsRUFBMkNHLENBQUMsSUFBSSxDQUFoRCxFQUFtRDtBQUMvQyxVQUFJb0csQ0FBQyxHQUFHeUgsSUFBSSxDQUFDN04sQ0FBRCxDQUFaO0FBRUEsVUFBSThOLENBQUMsR0FBRzVDLElBQUksRUFBWjs7QUFFQSxVQUFJNEMsQ0FBQyxLQUFLMUgsQ0FBVixFQUFhO0FBQ1QsY0FBTXFGLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0g7O0FBRURBLFVBQUk7QUFDUDtBQUNKOztBQUVELFdBQVMrQixNQUFULEdBQW1CO0FBQ2YsUUFBSS9HLENBQUMsR0FBRzhFLElBQUksRUFBWjs7QUFDQSxZQUFROUUsQ0FBUjtBQUNBLFdBQUssR0FBTDtBQUNJZ0YsWUFBSTtBQUNKLGVBQU8sSUFBUDs7QUFFSixXQUFLLEdBQUw7QUFDSUEsWUFBSTtBQUNKLGVBQU8sSUFBUDs7QUFFSixXQUFLLEdBQUw7QUFDSUEsWUFBSTtBQUNKLGVBQU8sSUFBUDs7QUFFSixXQUFLLEdBQUw7QUFDSUEsWUFBSTtBQUNKLGVBQU8sSUFBUDs7QUFFSixXQUFLLEdBQUw7QUFDSUEsWUFBSTtBQUNKLGVBQU8sSUFBUDs7QUFFSixXQUFLLEdBQUw7QUFDSUEsWUFBSTtBQUNKLGVBQU8sSUFBUDs7QUFFSixXQUFLLEdBQUw7QUFDSUEsWUFBSTs7QUFDSixZQUFJMUIsSUFBSSxDQUFDSyxPQUFMLENBQWFtQixJQUFJLEVBQWpCLENBQUosRUFBMEI7QUFDdEIsZ0JBQU1PLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0g7O0FBRUQsZUFBTyxJQUFQOztBQUVKLFdBQUssR0FBTDtBQUNJQSxZQUFJO0FBQ0osZUFBTzJDLFNBQVMsRUFBaEI7O0FBRUosV0FBSyxHQUFMO0FBQ0kzQyxZQUFJO0FBQ0osZUFBT2MsYUFBYSxFQUFwQjs7QUFFSixXQUFLLElBQUw7QUFDQSxXQUFLLFFBQUw7QUFDQSxXQUFLLFFBQUw7QUFDSWQsWUFBSTtBQUNKLGVBQU8sRUFBUDs7QUFFSixXQUFLLElBQUw7QUFDSUEsWUFBSTs7QUFDSixZQUFJRixJQUFJLE9BQU8sSUFBZixFQUFxQjtBQUNqQkUsY0FBSTtBQUNQOztBQUVELGVBQU8sRUFBUDs7QUFFSixXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDQSxXQUFLLEdBQUw7QUFDSSxjQUFNSyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjs7QUFFSixXQUFLakcsU0FBTDtBQUNJLGNBQU1zRyxXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQW5FSjs7QUFzRUEsV0FBT0EsSUFBSSxFQUFYO0FBQ0g7O0FBRUQsV0FBUzJDLFNBQVQsR0FBc0I7QUFDbEIsUUFBSWhELE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBSTNFLENBQUMsR0FBRzhFLElBQUksRUFBWjs7QUFFQSxRQUFJLENBQUN4QixJQUFJLENBQUNNLFVBQUwsQ0FBZ0I1RCxDQUFoQixDQUFMLEVBQXlCO0FBQ3JCLFlBQU1xRixXQUFXLENBQUNMLElBQUksRUFBTCxDQUFqQjtBQUNIOztBQUVETCxVQUFNLElBQUlLLElBQUksRUFBZDtBQUVBaEYsS0FBQyxHQUFHOEUsSUFBSSxFQUFSOztBQUNBLFFBQUksQ0FBQ3hCLElBQUksQ0FBQ00sVUFBTCxDQUFnQjVELENBQWhCLENBQUwsRUFBeUI7QUFDckIsWUFBTXFGLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0g7O0FBRURMLFVBQU0sSUFBSUssSUFBSSxFQUFkO0FBRUEsV0FBT3RGLE1BQU0sQ0FBQ2lELGFBQVAsQ0FBcUJpRixRQUFRLENBQUNqRCxNQUFELEVBQVMsRUFBVCxDQUE3QixDQUFQO0FBQ0g7O0FBRUQsV0FBU21CLGFBQVQsR0FBMEI7QUFDdEIsUUFBSW5CLE1BQU0sR0FBRyxFQUFiO0FBQ0EsUUFBSWtELEtBQUssR0FBRyxDQUFaOztBQUVBLFdBQU9BLEtBQUssS0FBSyxDQUFqQixFQUFvQjtBQUNoQixVQUFJN0gsQ0FBQyxHQUFHOEUsSUFBSSxFQUFaOztBQUNBLFVBQUksQ0FBQ3hCLElBQUksQ0FBQ00sVUFBTCxDQUFnQjVELENBQWhCLENBQUwsRUFBeUI7QUFDckIsY0FBTXFGLFdBQVcsQ0FBQ0wsSUFBSSxFQUFMLENBQWpCO0FBQ0g7O0FBRURMLFlBQU0sSUFBSUssSUFBSSxFQUFkO0FBQ0g7O0FBRUQsV0FBT3RGLE1BQU0sQ0FBQ2lELGFBQVAsQ0FBcUJpRixRQUFRLENBQUNqRCxNQUFELEVBQVMsRUFBVCxDQUE3QixDQUFQO0FBQ0g7O0FBRUQsTUFBSUwsV0FBVyxHQUFHO0FBQ2QyQyxTQUFLLEVBQUUsU0FBU0EsS0FBVCxHQUFrQjtBQUNyQixVQUFJaEQsS0FBSyxDQUFDdE0sSUFBTixLQUFlLEtBQW5CLEVBQTBCO0FBQ3RCLGNBQU1tUSxVQUFVLEVBQWhCO0FBQ0g7O0FBRUQ3RSxVQUFJO0FBQ1AsS0FQYTtBQVNkaUUsc0JBQWtCLEVBQUUsU0FBU0Esa0JBQVQsR0FBK0I7QUFDL0MsY0FBUWpELEtBQUssQ0FBQ3RNLElBQWQ7QUFDQSxhQUFLLFlBQUw7QUFDQSxhQUFLLFFBQUw7QUFDSTRHLGFBQUcsR0FBRzBGLEtBQUssQ0FBQ25NLEtBQVo7QUFDQStMLG9CQUFVLEdBQUcsbUJBQWI7QUFDQTs7QUFFSixhQUFLLFlBQUw7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUVBa0UsYUFBRztBQUNIOztBQUVKLGFBQUssS0FBTDtBQUNJLGdCQUFNRCxVQUFVLEVBQWhCO0FBakJKLE9BRCtDLENBcUIvQztBQUNBOztBQUNILEtBaENhO0FBa0NkWCxxQkFBaUIsRUFBRSxTQUFTQSxpQkFBVCxHQUE4QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUVBLFVBQUlsRCxLQUFLLENBQUN0TSxJQUFOLEtBQWUsS0FBbkIsRUFBMEI7QUFDdEIsY0FBTW1RLFVBQVUsRUFBaEI7QUFDSDs7QUFFRGpFLGdCQUFVLEdBQUcscUJBQWI7QUFDSCxLQTdDYTtBQStDZHVELHVCQUFtQixFQUFFLFNBQVNBLG1CQUFULEdBQWdDO0FBQ2pELFVBQUluRCxLQUFLLENBQUN0TSxJQUFOLEtBQWUsS0FBbkIsRUFBMEI7QUFDdEIsY0FBTW1RLFVBQVUsRUFBaEI7QUFDSDs7QUFFRDdFLFVBQUk7QUFDUCxLQXJEYTtBQXVEZHFFLG9CQUFnQixFQUFFLFNBQVNBLGdCQUFULEdBQTZCO0FBQzNDLFVBQUlyRCxLQUFLLENBQUN0TSxJQUFOLEtBQWUsS0FBbkIsRUFBMEI7QUFDdEIsY0FBTW1RLFVBQVUsRUFBaEI7QUFDSDs7QUFFRCxVQUFJN0QsS0FBSyxDQUFDdE0sSUFBTixLQUFlLFlBQWYsSUFBK0JzTSxLQUFLLENBQUNuTSxLQUFOLEtBQWdCLEdBQW5ELEVBQXdEO0FBQ3BEaVEsV0FBRztBQUNIO0FBQ0g7O0FBRUQ5RSxVQUFJO0FBQ1AsS0FsRWE7QUFvRWRvRSxzQkFBa0IsRUFBRSxTQUFTQSxrQkFBVCxHQUErQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUVBLFVBQUlwRCxLQUFLLENBQUN0TSxJQUFOLEtBQWUsS0FBbkIsRUFBMEI7QUFDdEIsY0FBTW1RLFVBQVUsRUFBaEI7QUFDSDs7QUFFRCxjQUFRN0QsS0FBSyxDQUFDbk0sS0FBZDtBQUNBLGFBQUssR0FBTDtBQUNJK0wsb0JBQVUsR0FBRyxvQkFBYjtBQUNBOztBQUVKLGFBQUssR0FBTDtBQUNJa0UsYUFBRztBQU5QLE9BVitDLENBbUIvQztBQUNBOztBQUNILEtBekZhO0FBMkZkUixtQkFBZSxFQUFFLFNBQVNBLGVBQVQsR0FBNEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFFQSxVQUFJdEQsS0FBSyxDQUFDdE0sSUFBTixLQUFlLEtBQW5CLEVBQTBCO0FBQ3RCLGNBQU1tUSxVQUFVLEVBQWhCO0FBQ0g7O0FBRUQsY0FBUTdELEtBQUssQ0FBQ25NLEtBQWQ7QUFDQSxhQUFLLEdBQUw7QUFDSStMLG9CQUFVLEdBQUcsa0JBQWI7QUFDQTs7QUFFSixhQUFLLEdBQUw7QUFDSWtFLGFBQUc7QUFOUCxPQVZ5QyxDQW1CekM7QUFDQTs7QUFDSCxLQWhIYTtBQWtIZFAsT0FBRyxFQUFFLFNBQVNBLEdBQVQsR0FBZ0IsQ0FDakI7QUFDQTtBQUNBO0FBQ0E7QUFDSDtBQXZIYSxHQUFsQjs7QUEwSEEsV0FBU3ZFLElBQVQsR0FBaUI7QUFDYixRQUFJbkwsS0FBSjs7QUFFQSxZQUFRbU0sS0FBSyxDQUFDdE0sSUFBZDtBQUNBLFdBQUssWUFBTDtBQUNJLGdCQUFRc00sS0FBSyxDQUFDbk0sS0FBZDtBQUNBLGVBQUssR0FBTDtBQUNJQSxpQkFBSyxHQUFHLEVBQVI7QUFDQTs7QUFFSixlQUFLLEdBQUw7QUFDSUEsaUJBQUssR0FBRyxFQUFSO0FBQ0E7QUFQSjs7QUFVQTs7QUFFSixXQUFLLE1BQUw7QUFDQSxXQUFLLFNBQUw7QUFDQSxXQUFLLFNBQUw7QUFDQSxXQUFLLFFBQUw7QUFDSUEsYUFBSyxHQUFHbU0sS0FBSyxDQUFDbk0sS0FBZDtBQUNBO0FBRUo7QUFDQTtBQUNBO0FBdkJBOztBQTBCQSxRQUFJb00sSUFBSSxLQUFLbkYsU0FBYixFQUF3QjtBQUNwQm1GLFVBQUksR0FBR3BNLEtBQVA7QUFDSCxLQUZELE1BRU87QUFDSCxVQUFJa1EsTUFBTSxHQUFHbEUsS0FBSyxDQUFDQSxLQUFLLENBQUNySyxNQUFOLEdBQWUsQ0FBaEIsQ0FBbEI7O0FBQ0EsVUFBSXBCLEtBQUssQ0FBQ0MsT0FBTixDQUFjMFAsTUFBZCxDQUFKLEVBQTJCO0FBQ3ZCQSxjQUFNLENBQUMvRSxJQUFQLENBQVluTCxLQUFaO0FBQ0gsT0FGRCxNQUVPO0FBQ0hrUSxjQUFNLENBQUN6SixHQUFELENBQU4sR0FBY3pHLEtBQWQ7QUFDSDtBQUNKOztBQUVELFFBQUlBLEtBQUssS0FBSyxJQUFWLElBQWtCLFFBQU9BLEtBQVAsTUFBaUIsUUFBdkMsRUFBaUQ7QUFDN0NnTSxXQUFLLENBQUNiLElBQU4sQ0FBV25MLEtBQVg7O0FBRUEsVUFBSU8sS0FBSyxDQUFDQyxPQUFOLENBQWNSLEtBQWQsQ0FBSixFQUEwQjtBQUN0QitMLGtCQUFVLEdBQUcsa0JBQWI7QUFDSCxPQUZELE1BRU87QUFDSEEsa0JBQVUsR0FBRyxvQkFBYjtBQUNIO0FBQ0osS0FSRCxNQVFPO0FBQ0gsVUFBSW9FLE9BQU8sR0FBR25FLEtBQUssQ0FBQ0EsS0FBSyxDQUFDckssTUFBTixHQUFlLENBQWhCLENBQW5COztBQUNBLFVBQUl3TyxPQUFPLElBQUksSUFBZixFQUFxQjtBQUNqQnBFLGtCQUFVLEdBQUcsS0FBYjtBQUNILE9BRkQsTUFFTyxJQUFJeEwsS0FBSyxDQUFDQyxPQUFOLENBQWMyUCxPQUFkLENBQUosRUFBNEI7QUFDL0JwRSxrQkFBVSxHQUFHLGlCQUFiO0FBQ0gsT0FGTSxNQUVBO0FBQ0hBLGtCQUFVLEdBQUcsb0JBQWI7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsV0FBU2tFLEdBQVQsR0FBZ0I7QUFDWmpFLFNBQUssQ0FBQ2lFLEdBQU47QUFFQSxRQUFJRSxPQUFPLEdBQUduRSxLQUFLLENBQUNBLEtBQUssQ0FBQ3JLLE1BQU4sR0FBZSxDQUFoQixDQUFuQjs7QUFDQSxRQUFJd08sT0FBTyxJQUFJLElBQWYsRUFBcUI7QUFDakJwRSxnQkFBVSxHQUFHLEtBQWI7QUFDSCxLQUZELE1BRU8sSUFBSXhMLEtBQUssQ0FBQ0MsT0FBTixDQUFjMlAsT0FBZCxDQUFKLEVBQTRCO0FBQy9CcEUsZ0JBQVUsR0FBRyxpQkFBYjtBQUNILEtBRk0sTUFFQTtBQUNIQSxnQkFBVSxHQUFHLG9CQUFiO0FBQ0g7QUFDSixHQXZ6Q21CLENBeXpDcEI7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsV0FBU3dCLFdBQVQsQ0FBc0JyRixDQUF0QixFQUF5QjtBQUNyQixRQUFJQSxDQUFDLEtBQUtqQixTQUFWLEVBQXFCO0FBQ2pCLGFBQU9tSixXQUFXLENBQUUsb0NBQW9DbkUsSUFBcEMsR0FBMkMsR0FBM0MsR0FBaURDLE1BQW5ELENBQWxCO0FBQ0g7O0FBRUQsV0FBT2tFLFdBQVcsQ0FBRSwrQkFBZ0NDLFVBQVUsQ0FBQ25JLENBQUQsQ0FBMUMsR0FBaUQsT0FBakQsR0FBMkQrRCxJQUEzRCxHQUFrRSxHQUFsRSxHQUF3RUMsTUFBMUUsQ0FBbEI7QUFDSDs7QUFFRCxXQUFTOEQsVUFBVCxHQUF1QjtBQUNuQixXQUFPSSxXQUFXLENBQUUsb0NBQW9DbkUsSUFBcEMsR0FBMkMsR0FBM0MsR0FBaURDLE1BQW5ELENBQWxCO0FBQ0gsR0E3MENtQixDQSswQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7OztBQUVBLFdBQVMrQixpQkFBVCxHQUE4QjtBQUMxQi9CLFVBQU0sSUFBSSxDQUFWO0FBQ0EsV0FBT2tFLFdBQVcsQ0FBRSw0Q0FBNENuRSxJQUE1QyxHQUFtRCxHQUFuRCxHQUF5REMsTUFBM0QsQ0FBbEI7QUFDSDs7QUFFRCxXQUFTZ0QsYUFBVCxDQUF3QmhILENBQXhCLEVBQTJCO0FBQ3ZCN0ksV0FBTyxDQUFDaVIsSUFBUixDQUFjLGFBQWNELFVBQVUsQ0FBQ25JLENBQUQsQ0FBeEIsR0FBK0IseURBQTdDO0FBQ0g7O0FBRUQsV0FBU21JLFVBQVQsQ0FBcUJuSSxDQUFyQixFQUF3QjtBQUNwQixRQUFJcUksWUFBWSxHQUFHO0FBQ2YsV0FBSyxLQURVO0FBRWYsV0FBSyxLQUZVO0FBR2YsWUFBTSxNQUhTO0FBSWYsWUFBTSxLQUpTO0FBS2YsWUFBTSxLQUxTO0FBTWYsWUFBTSxLQU5TO0FBT2YsWUFBTSxLQVBTO0FBUWYsWUFBTSxLQVJTO0FBU2YsWUFBTSxLQVRTO0FBVWYsWUFBTSxLQVZTO0FBV2YsZ0JBQVUsU0FYSztBQVlmLGdCQUFVO0FBWkssS0FBbkI7O0FBZUEsUUFBSUEsWUFBWSxDQUFDckksQ0FBRCxDQUFoQixFQUFxQjtBQUNqQixhQUFPcUksWUFBWSxDQUFDckksQ0FBRCxDQUFuQjtBQUNIOztBQUVELFFBQUlBLENBQUMsR0FBRyxHQUFSLEVBQWE7QUFDVCxVQUFJc0ksU0FBUyxHQUFHdEksQ0FBQyxDQUFDZ0MsVUFBRixDQUFhLENBQWIsRUFBZ0J4RSxRQUFoQixDQUF5QixFQUF6QixDQUFoQjtBQUNBLGFBQU8sUUFBUSxDQUFDLE9BQU84SyxTQUFSLEVBQW1CQyxTQUFuQixDQUE2QkQsU0FBUyxDQUFDN08sTUFBdkMsQ0FBZjtBQUNIOztBQUVELFdBQU91RyxDQUFQO0FBQ0g7O0FBRUQsV0FBU2tJLFdBQVQsQ0FBc0IxUSxPQUF0QixFQUErQjtBQUMzQixRQUFJSCxHQUFHLEdBQUcsSUFBSW1SLFdBQUosQ0FBZ0JoUixPQUFoQixDQUFWO0FBQ0FILE9BQUcsQ0FBQ29SLFVBQUosR0FBaUIxRSxJQUFqQjtBQUNBMU0sT0FBRyxDQUFDcVIsWUFBSixHQUFtQjFFLE1BQW5CO0FBQ0EsV0FBTzNNLEdBQVA7QUFDSDs7QUFFRCxNQUFJc1IsU0FBUyxHQUFHLFNBQVNBLFNBQVQsQ0FBb0I3USxLQUFwQixFQUEyQjhRLFFBQTNCLEVBQXFDQyxLQUFyQyxFQUE0QztBQUN4RCxRQUFJL0UsS0FBSyxHQUFHLEVBQVo7QUFDQSxRQUFJZ0YsTUFBTSxHQUFHLEVBQWI7QUFDQSxRQUFJQyxZQUFKO0FBQ0EsUUFBSUMsWUFBSjtBQUNBLFFBQUlDLEdBQUcsR0FBRyxFQUFWO0FBQ0EsUUFBSUMsS0FBSjs7QUFFQSxRQUNJTixRQUFRLElBQUksSUFBWixJQUNBLFFBQU9BLFFBQVAsTUFBb0IsUUFEcEIsSUFFQSxDQUFDdlEsS0FBSyxDQUFDQyxPQUFOLENBQWNzUSxRQUFkLENBSEwsRUFJRTtBQUNFQyxXQUFLLEdBQUdELFFBQVEsQ0FBQ0MsS0FBakI7QUFDQUssV0FBSyxHQUFHTixRQUFRLENBQUNNLEtBQWpCO0FBQ0FOLGNBQVEsR0FBR0EsUUFBUSxDQUFDQSxRQUFwQjtBQUNIOztBQUVELFFBQUksT0FBT0EsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNoQ0ksa0JBQVksR0FBR0osUUFBZjtBQUNILEtBRkQsTUFFTyxJQUFJdlEsS0FBSyxDQUFDQyxPQUFOLENBQWNzUSxRQUFkLENBQUosRUFBNkI7QUFDaENHLGtCQUFZLEdBQUcsRUFBZjs7QUFDQSxXQUFLLElBQUluUCxDQUFDLEdBQUcsQ0FBUixFQUFXNk4sSUFBSSxHQUFHbUIsUUFBdkIsRUFBaUNoUCxDQUFDLEdBQUc2TixJQUFJLENBQUNoTyxNQUExQyxFQUFrREcsQ0FBQyxJQUFJLENBQXZELEVBQTBEO0FBQ3RELFlBQUl1UCxDQUFDLEdBQUcxQixJQUFJLENBQUM3TixDQUFELENBQVo7QUFFQSxZQUFJd1AsSUFBSSxHQUFJLEtBQUssQ0FBakI7O0FBRUEsWUFBSSxPQUFPRCxDQUFQLEtBQWEsUUFBakIsRUFBMkI7QUFDdkJDLGNBQUksR0FBR0QsQ0FBUDtBQUNILFNBRkQsTUFFTyxJQUNILE9BQU9BLENBQVAsS0FBYSxRQUFiLElBQ0FBLENBQUMsWUFBWXpKLE1BRGIsSUFFQXlKLENBQUMsWUFBWTlDLE1BSFYsRUFJTDtBQUNFK0MsY0FBSSxHQUFHMUosTUFBTSxDQUFDeUosQ0FBRCxDQUFiO0FBQ0g7O0FBRUQsWUFBSUMsSUFBSSxLQUFLckssU0FBVCxJQUFzQmdLLFlBQVksQ0FBQ00sT0FBYixDQUFxQkQsSUFBckIsSUFBNkIsQ0FBdkQsRUFBMEQ7QUFDdERMLHNCQUFZLENBQUM5RixJQUFiLENBQWtCbUcsSUFBbEI7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsUUFBSVAsS0FBSyxZQUFZeEMsTUFBckIsRUFBNkI7QUFDekJ3QyxXQUFLLEdBQUd4QyxNQUFNLENBQUN3QyxLQUFELENBQWQ7QUFDSCxLQUZELE1BRU8sSUFBSUEsS0FBSyxZQUFZbkosTUFBckIsRUFBNkI7QUFDaENtSixXQUFLLEdBQUduSixNQUFNLENBQUNtSixLQUFELENBQWQ7QUFDSDs7QUFFRCxRQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDM0IsVUFBSUEsS0FBSyxHQUFHLENBQVosRUFBZTtBQUNYQSxhQUFLLEdBQUcvTSxJQUFJLENBQUN3RyxHQUFMLENBQVMsRUFBVCxFQUFheEcsSUFBSSxDQUFDMEYsS0FBTCxDQUFXcUgsS0FBWCxDQUFiLENBQVI7QUFDQUksV0FBRyxHQUFHLGFBQWFLLE1BQWIsQ0FBb0IsQ0FBcEIsRUFBdUJULEtBQXZCLENBQU47QUFDSDtBQUNKLEtBTEQsTUFLTyxJQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDbENJLFNBQUcsR0FBR0osS0FBSyxDQUFDUyxNQUFOLENBQWEsQ0FBYixFQUFnQixFQUFoQixDQUFOO0FBQ0g7O0FBRUQsV0FBT0MsaUJBQWlCLENBQUMsRUFBRCxFQUFLO0FBQUMsVUFBSXpSO0FBQUwsS0FBTCxDQUF4Qjs7QUFFQSxhQUFTeVIsaUJBQVQsQ0FBNEJoTCxHQUE1QixFQUFpQ2lHLE1BQWpDLEVBQXlDO0FBQ3JDLFVBQUkxTSxLQUFLLEdBQUcwTSxNQUFNLENBQUNqRyxHQUFELENBQWxCOztBQUNBLFVBQUl6RyxLQUFLLElBQUksSUFBYixFQUFtQjtBQUNmLFlBQUksT0FBT0EsS0FBSyxDQUFDMFIsT0FBYixLQUF5QixVQUE3QixFQUF5QztBQUNyQzFSLGVBQUssR0FBR0EsS0FBSyxDQUFDMFIsT0FBTixDQUFjakwsR0FBZCxDQUFSO0FBQ0gsU0FGRCxNQUVPLElBQUksT0FBT3pHLEtBQUssQ0FBQzJSLE1BQWIsS0FBd0IsVUFBNUIsRUFBd0M7QUFDM0MzUixlQUFLLEdBQUdBLEtBQUssQ0FBQzJSLE1BQU4sQ0FBYWxMLEdBQWIsQ0FBUjtBQUNIO0FBQ0o7O0FBRUQsVUFBSXlLLFlBQUosRUFBa0I7QUFDZGxSLGFBQUssR0FBR2tSLFlBQVksQ0FBQ2pSLElBQWIsQ0FBa0J5TSxNQUFsQixFQUEwQmpHLEdBQTFCLEVBQStCekcsS0FBL0IsQ0FBUjtBQUNIOztBQUVELFVBQUlBLEtBQUssWUFBWXVPLE1BQXJCLEVBQTZCO0FBQ3pCdk8sYUFBSyxHQUFHdU8sTUFBTSxDQUFDdk8sS0FBRCxDQUFkO0FBQ0gsT0FGRCxNQUVPLElBQUlBLEtBQUssWUFBWTRILE1BQXJCLEVBQTZCO0FBQ2hDNUgsYUFBSyxHQUFHNEgsTUFBTSxDQUFDNUgsS0FBRCxDQUFkO0FBQ0gsT0FGTSxNQUVBLElBQUlBLEtBQUssWUFBWTRSLE9BQXJCLEVBQThCO0FBQ2pDNVIsYUFBSyxHQUFHQSxLQUFLLENBQUMyRixPQUFOLEVBQVI7QUFDSDs7QUFFRCxjQUFRM0YsS0FBUjtBQUNBLGFBQUssSUFBTDtBQUFXLGlCQUFPLE1BQVA7O0FBQ1gsYUFBSyxJQUFMO0FBQVcsaUJBQU8sTUFBUDs7QUFDWCxhQUFLLEtBQUw7QUFBWSxpQkFBTyxPQUFQO0FBSFo7O0FBTUEsVUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzNCLGVBQU82UixXQUFXLENBQUM3UixLQUFELEVBQVEsS0FBUixDQUFsQjtBQUNIOztBQUVELFVBQUksT0FBT0EsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUMzQixlQUFPNEgsTUFBTSxDQUFDNUgsS0FBRCxDQUFiO0FBQ0g7O0FBRUQsVUFBSSxRQUFPQSxLQUFQLE1BQWlCLFFBQXJCLEVBQStCO0FBQzNCLGVBQU9PLEtBQUssQ0FBQ0MsT0FBTixDQUFjUixLQUFkLElBQXVCOFIsY0FBYyxDQUFDOVIsS0FBRCxDQUFyQyxHQUErQytSLGVBQWUsQ0FBQy9SLEtBQUQsQ0FBckU7QUFDSDs7QUFFRCxhQUFPaUgsU0FBUDtBQUNIOztBQUVELGFBQVM0SyxXQUFULENBQXNCN1IsS0FBdEIsRUFBNkI7QUFDekIsVUFBSWdTLE1BQU0sR0FBRztBQUNULGFBQUssR0FESTtBQUVULGFBQUs7QUFGSSxPQUFiO0FBS0EsVUFBSXpCLFlBQVksR0FBRztBQUNmLGFBQUssS0FEVTtBQUVmLGFBQUssS0FGVTtBQUdmLGNBQU0sTUFIUztBQUlmLGNBQU0sS0FKUztBQUtmLGNBQU0sS0FMUztBQU1mLGNBQU0sS0FOUztBQU9mLGNBQU0sS0FQUztBQVFmLGNBQU0sS0FSUztBQVNmLGNBQU0sS0FUUztBQVVmLGNBQU0sS0FWUztBQVdmLGtCQUFVLFNBWEs7QUFZZixrQkFBVTtBQVpLLE9BQW5CO0FBZUEsVUFBSTBCLE9BQU8sR0FBRyxFQUFkOztBQUVBLFdBQUssSUFBSW5RLENBQUMsR0FBRyxDQUFSLEVBQVc2TixJQUFJLEdBQUczUCxLQUF2QixFQUE4QjhCLENBQUMsR0FBRzZOLElBQUksQ0FBQ2hPLE1BQXZDLEVBQStDRyxDQUFDLElBQUksQ0FBcEQsRUFBdUQ7QUFDbkQsWUFBSW9HLENBQUMsR0FBR3lILElBQUksQ0FBQzdOLENBQUQsQ0FBWjs7QUFFQSxnQkFBUW9HLENBQVI7QUFDQSxlQUFLLEdBQUw7QUFDQSxlQUFLLEdBQUw7QUFDSThKLGtCQUFNLENBQUM5SixDQUFELENBQU47QUFDQStKLG1CQUFPLElBQUkvSixDQUFYO0FBQ0E7QUFMSjs7QUFRQSxZQUFJcUksWUFBWSxDQUFDckksQ0FBRCxDQUFoQixFQUFxQjtBQUNqQitKLGlCQUFPLElBQUkxQixZQUFZLENBQUNySSxDQUFELENBQXZCO0FBQ0E7QUFDSDs7QUFFRCxZQUFJQSxDQUFDLEdBQUcsR0FBUixFQUFhO0FBQ1QsY0FBSXNJLFNBQVMsR0FBR3RJLENBQUMsQ0FBQ2dDLFVBQUYsQ0FBYSxDQUFiLEVBQWdCeEUsUUFBaEIsQ0FBeUIsRUFBekIsQ0FBaEI7QUFDQXVNLGlCQUFPLElBQUksUUFBUSxDQUFDLE9BQU96QixTQUFSLEVBQW1CQyxTQUFuQixDQUE2QkQsU0FBUyxDQUFDN08sTUFBdkMsQ0FBbkI7QUFDQTtBQUNIOztBQUVEc1EsZUFBTyxJQUFJL0osQ0FBWDtBQUNIOztBQUVELFVBQUlnSyxTQUFTLEdBQUdkLEtBQUssSUFBSXBNLE1BQU0sQ0FBQ21OLElBQVAsQ0FBWUgsTUFBWixFQUFvQkksTUFBcEIsQ0FBMkIsVUFBVWpOLENBQVYsRUFBYThDLENBQWIsRUFBZ0I7QUFBRSxlQUFRK0osTUFBTSxDQUFDN00sQ0FBRCxDQUFOLEdBQVk2TSxNQUFNLENBQUMvSixDQUFELENBQW5CLEdBQTBCOUMsQ0FBMUIsR0FBOEI4QyxDQUFyQztBQUF5QyxPQUF0RixDQUF6QjtBQUVBZ0ssYUFBTyxHQUFHQSxPQUFPLENBQUNJLE9BQVIsQ0FBZ0IsSUFBSUMsTUFBSixDQUFXSixTQUFYLEVBQXNCLEdBQXRCLENBQWhCLEVBQTRDM0IsWUFBWSxDQUFDMkIsU0FBRCxDQUF4RCxDQUFWO0FBRUEsYUFBT0EsU0FBUyxHQUFHRCxPQUFaLEdBQXNCQyxTQUE3QjtBQUNIOztBQUVELGFBQVNILGVBQVQsQ0FBMEIvUixLQUExQixFQUFpQztBQUM3QixVQUFJZ00sS0FBSyxDQUFDdUYsT0FBTixDQUFjdlIsS0FBZCxLQUF3QixDQUE1QixFQUErQjtBQUMzQixjQUFNNEUsU0FBUyxDQUFDLHdDQUFELENBQWY7QUFDSDs7QUFFRG9ILFdBQUssQ0FBQ2IsSUFBTixDQUFXbkwsS0FBWDtBQUVBLFVBQUl1UyxRQUFRLEdBQUd2QixNQUFmO0FBQ0FBLFlBQU0sR0FBR0EsTUFBTSxHQUFHRyxHQUFsQjtBQUVBLFVBQUlnQixJQUFJLEdBQUdsQixZQUFZLElBQUlqTSxNQUFNLENBQUNtTixJQUFQLENBQVluUyxLQUFaLENBQTNCO0FBQ0EsVUFBSXdTLE9BQU8sR0FBRyxFQUFkOztBQUNBLFdBQUssSUFBSTFRLENBQUMsR0FBRyxDQUFSLEVBQVc2TixJQUFJLEdBQUd3QyxJQUF2QixFQUE2QnJRLENBQUMsR0FBRzZOLElBQUksQ0FBQ2hPLE1BQXRDLEVBQThDRyxDQUFDLElBQUksQ0FBbkQsRUFBc0Q7QUFDbEQsWUFBSTJFLEdBQUcsR0FBR2tKLElBQUksQ0FBQzdOLENBQUQsQ0FBZDtBQUVBLFlBQUkyUSxjQUFjLEdBQUdoQixpQkFBaUIsQ0FBQ2hMLEdBQUQsRUFBTXpHLEtBQU4sQ0FBdEM7O0FBQ0EsWUFBSXlTLGNBQWMsS0FBS3hMLFNBQXZCLEVBQWtDO0FBQzlCLGNBQUl5TCxNQUFNLEdBQUdDLFlBQVksQ0FBQ2xNLEdBQUQsQ0FBWixHQUFvQixHQUFqQzs7QUFDQSxjQUFJMEssR0FBRyxLQUFLLEVBQVosRUFBZ0I7QUFDWnVCLGtCQUFNLElBQUksR0FBVjtBQUNIOztBQUNEQSxnQkFBTSxJQUFJRCxjQUFWO0FBQ0FELGlCQUFPLENBQUNySCxJQUFSLENBQWF1SCxNQUFiO0FBQ0g7QUFDSjs7QUFFRCxVQUFJRSxLQUFKOztBQUNBLFVBQUlKLE9BQU8sQ0FBQzdRLE1BQVIsS0FBbUIsQ0FBdkIsRUFBMEI7QUFDdEJpUixhQUFLLEdBQUcsSUFBUjtBQUNILE9BRkQsTUFFTztBQUNILFlBQUlDLFVBQUo7O0FBQ0EsWUFBSTFCLEdBQUcsS0FBSyxFQUFaLEVBQWdCO0FBQ1owQixvQkFBVSxHQUFHTCxPQUFPLENBQUM3SyxJQUFSLENBQWEsR0FBYixDQUFiO0FBQ0FpTCxlQUFLLEdBQUcsTUFBTUMsVUFBTixHQUFtQixHQUEzQjtBQUNILFNBSEQsTUFHTztBQUNILGNBQUlDLFNBQVMsR0FBRyxRQUFROUIsTUFBeEI7QUFDQTZCLG9CQUFVLEdBQUdMLE9BQU8sQ0FBQzdLLElBQVIsQ0FBYW1MLFNBQWIsQ0FBYjtBQUNBRixlQUFLLEdBQUcsUUFBUTVCLE1BQVIsR0FBaUI2QixVQUFqQixHQUE4QixLQUE5QixHQUFzQ04sUUFBdEMsR0FBaUQsR0FBekQ7QUFDSDtBQUNKOztBQUVEdkcsV0FBSyxDQUFDaUUsR0FBTjtBQUNBZSxZQUFNLEdBQUd1QixRQUFUO0FBQ0EsYUFBT0ssS0FBUDtBQUNIOztBQUVELGFBQVNELFlBQVQsQ0FBdUJsTSxHQUF2QixFQUE0QjtBQUN4QixVQUFJQSxHQUFHLENBQUM5RSxNQUFKLEtBQWUsQ0FBbkIsRUFBc0I7QUFDbEIsZUFBT2tRLFdBQVcsQ0FBQ3BMLEdBQUQsRUFBTSxJQUFOLENBQWxCO0FBQ0g7O0FBRUQsVUFBSXNNLFNBQVMsR0FBR25MLE1BQU0sQ0FBQ2lELGFBQVAsQ0FBcUJwRSxHQUFHLENBQUM2RCxXQUFKLENBQWdCLENBQWhCLENBQXJCLENBQWhCOztBQUNBLFVBQUksQ0FBQ2tCLElBQUksQ0FBQ0csYUFBTCxDQUFtQm9ILFNBQW5CLENBQUwsRUFBb0M7QUFDaEMsZUFBT2xCLFdBQVcsQ0FBQ3BMLEdBQUQsRUFBTSxJQUFOLENBQWxCO0FBQ0g7O0FBRUQsV0FBSyxJQUFJM0UsQ0FBQyxHQUFHaVIsU0FBUyxDQUFDcFIsTUFBdkIsRUFBK0JHLENBQUMsR0FBRzJFLEdBQUcsQ0FBQzlFLE1BQXZDLEVBQStDRyxDQUFDLEVBQWhELEVBQW9EO0FBQ2hELFlBQUksQ0FBQzBKLElBQUksQ0FBQ0ksZ0JBQUwsQ0FBc0JoRSxNQUFNLENBQUNpRCxhQUFQLENBQXFCcEUsR0FBRyxDQUFDNkQsV0FBSixDQUFnQnhJLENBQWhCLENBQXJCLENBQXRCLENBQUwsRUFBc0U7QUFDbEUsaUJBQU8rUCxXQUFXLENBQUNwTCxHQUFELEVBQU0sSUFBTixDQUFsQjtBQUNIO0FBQ0o7O0FBRUQsYUFBT0EsR0FBUDtBQUNIOztBQUVELGFBQVNxTCxjQUFULENBQXlCOVIsS0FBekIsRUFBZ0M7QUFDNUIsVUFBSWdNLEtBQUssQ0FBQ3VGLE9BQU4sQ0FBY3ZSLEtBQWQsS0FBd0IsQ0FBNUIsRUFBK0I7QUFDM0IsY0FBTTRFLFNBQVMsQ0FBQyx3Q0FBRCxDQUFmO0FBQ0g7O0FBRURvSCxXQUFLLENBQUNiLElBQU4sQ0FBV25MLEtBQVg7QUFFQSxVQUFJdVMsUUFBUSxHQUFHdkIsTUFBZjtBQUNBQSxZQUFNLEdBQUdBLE1BQU0sR0FBR0csR0FBbEI7QUFFQSxVQUFJcUIsT0FBTyxHQUFHLEVBQWQ7O0FBQ0EsV0FBSyxJQUFJMVEsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzlCLEtBQUssQ0FBQzJCLE1BQTFCLEVBQWtDRyxDQUFDLEVBQW5DLEVBQXVDO0FBQ25DLFlBQUkyUSxjQUFjLEdBQUdoQixpQkFBaUIsQ0FBQzdKLE1BQU0sQ0FBQzlGLENBQUQsQ0FBUCxFQUFZOUIsS0FBWixDQUF0QztBQUNBd1MsZUFBTyxDQUFDckgsSUFBUixDQUFjc0gsY0FBYyxLQUFLeEwsU0FBcEIsR0FBaUN3TCxjQUFqQyxHQUFrRCxNQUEvRDtBQUNIOztBQUVELFVBQUlHLEtBQUo7O0FBQ0EsVUFBSUosT0FBTyxDQUFDN1EsTUFBUixLQUFtQixDQUF2QixFQUEwQjtBQUN0QmlSLGFBQUssR0FBRyxJQUFSO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsWUFBSXpCLEdBQUcsS0FBSyxFQUFaLEVBQWdCO0FBQ1osY0FBSTBCLFVBQVUsR0FBR0wsT0FBTyxDQUFDN0ssSUFBUixDQUFhLEdBQWIsQ0FBakI7QUFDQWlMLGVBQUssR0FBRyxNQUFNQyxVQUFOLEdBQW1CLEdBQTNCO0FBQ0gsU0FIRCxNQUdPO0FBQ0gsY0FBSUMsU0FBUyxHQUFHLFFBQVE5QixNQUF4QjtBQUNBLGNBQUlnQyxZQUFZLEdBQUdSLE9BQU8sQ0FBQzdLLElBQVIsQ0FBYW1MLFNBQWIsQ0FBbkI7QUFDQUYsZUFBSyxHQUFHLFFBQVE1QixNQUFSLEdBQWlCZ0MsWUFBakIsR0FBZ0MsS0FBaEMsR0FBd0NULFFBQXhDLEdBQW1ELEdBQTNEO0FBQ0g7QUFDSjs7QUFFRHZHLFdBQUssQ0FBQ2lFLEdBQU47QUFDQWUsWUFBTSxHQUFHdUIsUUFBVDtBQUNBLGFBQU9LLEtBQVA7QUFDSDtBQUNKLEdBalFEOztBQW1RQSxNQUFJSyxLQUFLLEdBQUc7QUFDUmxULFNBQUssRUFBRUEsS0FEQztBQUVSOFEsYUFBUyxFQUFFQTtBQUZILEdBQVo7QUFLQSxNQUFJcUMsR0FBRyxHQUFHRCxLQUFWO0FBRUEsTUFBSUUsR0FBRyxHQUFHRCxHQUFWO0FBRUEsU0FBT0MsR0FBUDtBQUVBLENBdnBEQSxDQUFELEM7Ozs7Ozs7Ozs7Ozs7QUNBQSxJQUFJQyxDQUFKLEMsQ0FFQTs7QUFDQUEsQ0FBQyxHQUFJLFlBQVc7QUFDZixTQUFPLElBQVA7QUFDQSxDQUZHLEVBQUo7O0FBSUEsSUFBSTtBQUNIO0FBQ0FBLEdBQUMsR0FBR0EsQ0FBQyxJQUFJbFAsUUFBUSxDQUFDLGFBQUQsQ0FBUixFQUFMLElBQWtDLENBQUMsR0FBR21QLElBQUosRUFBVSxNQUFWLENBQXRDO0FBQ0EsQ0FIRCxDQUdFLE9BQU9sUyxDQUFQLEVBQVU7QUFDWDtBQUNBLE1BQUksUUFBTzRDLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBdEIsRUFBZ0NxUCxDQUFDLEdBQUdyUCxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBTCxNQUFNLENBQUNELE9BQVAsR0FBaUIyUCxDQUFqQixDOzs7Ozs7Ozs7Ozs7QUNuQkE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVPLFNBQVNFLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO0FBQzlCLFNBQU9BLEdBQUcsQ0FBQ3BKLE1BQUosQ0FBVyxDQUFYLEVBQWNxSixXQUFkLEtBQThCRCxHQUFHLENBQUNuSixLQUFKLENBQVUsQ0FBVixDQUFyQztBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7O0FBRUEsU0FBU3FKLEdBQVQsQ0FBYUMsU0FBYixFQUFpRDtBQUFBLE1BQXpCQyxLQUF5Qix1RUFBakIsRUFBaUI7QUFBQSxNQUFicEwsSUFBYSx1RUFBTixJQUFNOztBQUMvQyxNQUFJLENBQUNvTCxLQUFLLENBQUNGLEdBQVgsRUFBZ0I7QUFDZEUsU0FBSyxDQUFDRixHQUFOLEdBQVksRUFBWjtBQUNEOztBQUVELE1BQUlsTCxJQUFKLEVBQVU7QUFDUm9MLFNBQUssQ0FBQ0YsR0FBTixDQUFVdEksSUFBVixDQUFlNUMsSUFBZjtBQUNEOztBQUVELE1BQUksQ0FBQ21MLFNBQVMsQ0FBQ0QsR0FBZixFQUFvQjtBQUNsQkMsYUFBUyxDQUFDRCxHQUFWLEdBQWdCLFVBQUFHLFNBQVM7QUFBQSxhQUFLRCxLQUFLLENBQUNGLEdBQU4sQ0FBVWxDLE9BQVYsQ0FBa0JxQyxTQUFsQixNQUFpQyxDQUFDLENBQXZDO0FBQUEsS0FBekI7QUFDRDtBQUNGLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBLFNBQVNDLEdBQVQsQ0FBYUgsU0FBYixFQUFnRDtBQUFBLE1BQXhCQyxLQUF3Qix1RUFBaEIsRUFBZ0I7QUFBQSxNQUFaRyxLQUFZLHVFQUFKLEVBQUk7QUFDOUNBLE9BQUssQ0FBQ2xTLE9BQU4sQ0FBYyxVQUFDMkcsSUFBRCxFQUFVO0FBQ3RCbUwsYUFBUyxjQUFPSixVQUFVLENBQUMvSyxJQUFELENBQWpCLEVBQVQsR0FBc0MsVUFBQ3ZJLEtBQUQsRUFBVztBQUMvQzJULFdBQUssQ0FBQ3BMLElBQUQsQ0FBTCxHQUFjdkksS0FBZDtBQUNELEtBRkQ7QUFHRCxHQUpEO0FBS0QsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBRUEsU0FBU2tGLEdBQVQsQ0FBYXdPLFNBQWIsRUFBZ0Q7QUFBQSxNQUF4QkMsS0FBd0IsdUVBQWhCLEVBQWdCO0FBQUEsTUFBWkcsS0FBWSx1RUFBSixFQUFJO0FBQzlDQSxPQUFLLENBQUNsUyxPQUFOLENBQWMsVUFBQzJHLElBQUQsRUFBVTtBQUN0Qm1MLGFBQVMsY0FBT0osVUFBVSxDQUFDL0ssSUFBRCxDQUFqQixFQUFULEdBQXNDO0FBQUEsYUFBTW9MLEtBQUssQ0FBQ3BMLElBQUQsQ0FBWDtBQUFBLEtBQXRDO0FBQ0QsR0FGRDtBQUdELEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBLFNBQVN3TCxPQUFULENBQWlCTCxTQUFqQixFQUF3QztBQUFBLE1BQVpDLEtBQVksdUVBQUosRUFBSTtBQUN0QyxNQUFNSyxlQUFlLEdBQUdOLFNBQVMsQ0FBQ0ssT0FBbEM7O0FBRUEsTUFBSSxDQUFDSixLQUFLLENBQUNNLGFBQVgsRUFBMEI7QUFDeEJOLFNBQUssQ0FBQ00sYUFBTixHQUFzQixFQUF0QjtBQUNEOztBQUVEUCxXQUFTLENBQUNLLE9BQVYsR0FBb0IsWUFBTTtBQUN4QixRQUFJQyxlQUFKLEVBQXFCO0FBQ25CQSxxQkFBZTtBQUNoQjs7QUFDRCxXQUFPTCxLQUFLLENBQUNNLGFBQU4sSUFBdUJOLEtBQUssQ0FBQ00sYUFBTixDQUFvQnRTLE1BQWxELEVBQTBEO0FBQ3hEZ1MsV0FBSyxDQUFDTSxhQUFOLENBQW9CaEUsR0FBcEIsR0FBMEIzTixXQUExQjtBQUNEOztBQUNEMEMsVUFBTSxDQUFDbU4sSUFBUCxDQUFZd0IsS0FBWixFQUFtQi9SLE9BQW5CLENBQTJCLFVBQUNzUyxLQUFELEVBQVc7QUFDcEMsYUFBT1AsS0FBSyxDQUFDTyxLQUFELENBQVo7QUFDRCxLQUZELEVBUHdCLENBV3hCOztBQUNBUCxTQUFLLENBQUNRLE9BQU4sR0FBZ0IsSUFBaEI7QUFDRCxHQWJEO0FBY0QsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBRUEsU0FBUzdRLEtBQVQsQ0FBZW9RLFNBQWYsRUFBMEJDLEtBQTFCLEVBQWlDUyxTQUFqQyxFQUFrRTtBQUFBLE1BQXRCQyxhQUFzQix1RUFBTixJQUFNO0FBQ2hFLE1BQU1DLFNBQVMsR0FBRyxFQUFsQjtBQUNBLE1BQU1OLGVBQWUsR0FBR04sU0FBUyxDQUFDSyxPQUFsQzs7QUFFQSxXQUFTUSxHQUFULENBQWE3SixLQUFiLEVBQW9CO0FBQ2xCNEosYUFBUyxDQUFDNUosS0FBRCxDQUFULEdBQW1CLElBQW5CO0FBQ0Q7O0FBRUQsV0FBUzhKLEVBQVQsQ0FBWTlKLEtBQVosRUFBbUI7QUFDakIsYUFBU3BJLFdBQVQsR0FBdUI7QUFDckJpUyxTQUFHLENBQUM3SixLQUFELENBQUg7QUFDRDs7QUFDRCxXQUFPMUYsTUFBTSxDQUFDeVAsTUFBUCxDQUFjO0FBQUVuUyxpQkFBVyxFQUFYQTtBQUFGLEtBQWQsQ0FBUDtBQUNEOztBQUVEb1IsV0FBUyxlQUFRSixVQUFVLENBQUNjLFNBQUQsQ0FBbEIsRUFBVCxHQUE0QyxZQUFhO0FBQUEsc0NBQVRNLElBQVM7QUFBVEEsVUFBUztBQUFBOztBQUN2RCxRQUFJZixLQUFLLENBQUNRLE9BQVYsRUFBbUI7QUFDakI5VSxhQUFPLENBQUNGLEdBQVIsQ0FBWSw0Q0FBWjtBQUNBO0FBQ0Q7O0FBRUQsYUFBU3dWLGdCQUFULEdBQTRCO0FBQzFCTCxlQUFTLENBQUMxUyxPQUFWLENBQWtCLFVBQUNnVCxRQUFELEVBQWM7QUFDOUIsWUFBSUEsUUFBSixFQUFjO0FBQ1osY0FBSTtBQUNGQSxvQkFBUSxDQUFDek0sS0FBVCxDQUFldUwsU0FBZixFQUEwQmdCLElBQTFCO0FBQ0QsV0FGRCxDQUVFLE9BQU9HLE1BQVAsRUFBZTtBQUNmeFYsbUJBQU8sQ0FBQ0YsR0FBUixDQUFZLGNBQVosRUFBNEJpVixTQUE1QixFQUF1Q1MsTUFBdkM7QUFDRDtBQUNGO0FBQ0YsT0FSRDtBQVNEOztBQUVELFFBQUlSLGFBQUosRUFBbUI7QUFDakJTLGdCQUFVLENBQUNILGdCQUFELEVBQW1CLENBQW5CLENBQVY7QUFDRCxLQUZELE1BRU87QUFDTEEsc0JBQWdCO0FBQ2pCO0FBQ0YsR0F2QkQ7O0FBeUJBakIsV0FBUyxhQUFNSixVQUFVLENBQUNjLFNBQUQsQ0FBaEIsRUFBVCxHQUEwQyxVQUFDUSxRQUFELEVBQWM7QUFDdEQsUUFBSWpCLEtBQUssQ0FBQ1EsT0FBVixFQUFtQjtBQUNqQjlVLGFBQU8sQ0FBQ0YsR0FBUixDQUFZLDRDQUFaO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBTXVMLEtBQUssR0FBRzRKLFNBQVMsQ0FBQzNTLE1BQXhCO0FBQ0EyUyxhQUFTLENBQUNuSixJQUFWLENBQWV5SixRQUFmO0FBQ0EsV0FBT0osRUFBRSxDQUFDOUosS0FBRCxDQUFUO0FBQ0QsR0FURDs7QUFXQWdKLFdBQVMsQ0FBQ0ssT0FBVixHQUFvQixZQUFNO0FBQ3hCQyxtQkFBZTtBQUNmTSxhQUFTLENBQUMxUyxPQUFWLENBQWtCLFVBQUNtVCxFQUFELEVBQUtySyxLQUFMO0FBQUEsYUFBZTZKLEdBQUcsQ0FBQzdKLEtBQUQsQ0FBbEI7QUFBQSxLQUFsQjtBQUNELEdBSEQ7QUFJRCxDLENBRUQ7QUFDQTtBQUNBOzs7QUFDQSxTQUFTc0ssS0FBVCxDQUFldEIsU0FBZixFQUEwQkMsS0FBMUIsRUFBaUNwTCxJQUFqQyxFQUF1QztBQUNyQyxNQUFJME0sYUFBYSxHQUFHLElBQXBCO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLEVBQXJCOztBQUVBeEIsV0FBUyxjQUFPSixVQUFVLENBQUMvSyxJQUFELENBQWpCLG1CQUFULEdBQW1ELFVBQUM0TSxXQUFELEVBQWlCO0FBQ2xFLFFBQUlELFlBQVksQ0FBQ3ZULE1BQWpCLEVBQXlCO0FBQ3ZCd1QsaUJBQVcsQ0FBQ0QsWUFBRCxDQUFYO0FBQ0Q7O0FBQ0RELGlCQUFhLEdBQUdFLFdBQWhCO0FBQ0QsR0FMRDs7QUFPQSxTQUFPO0FBQ0xDLGNBREssc0JBQ01DLE9BRE4sRUFDZTtBQUNsQkgsa0JBQVksQ0FBQy9KLElBQWIsQ0FBa0JrSyxPQUFsQjs7QUFDQSxVQUFJSixhQUFKLEVBQW1CO0FBQ2pCQSxxQkFBYSxDQUFDQyxZQUFELENBQWI7QUFDRDtBQUNGLEtBTkk7QUFPTEksaUJBUEsseUJBT1NDLFdBUFQsRUFPc0I7QUFDekIsYUFBT0wsWUFBWSxDQUFDdlQsTUFBcEIsRUFBNEI7QUFDMUJ1VCxvQkFBWSxDQUFDakYsR0FBYjtBQUNEOztBQUNELFVBQUlzRixXQUFKLEVBQWlCO0FBQ2Y7QUFDQUEsbUJBQVcsQ0FBQzNULE9BQVosQ0FBb0IsVUFBQzRULEdBQUQsRUFBUztBQUMzQk4sc0JBQVksQ0FBQy9KLElBQWIsQ0FBa0JxSyxHQUFsQjtBQUNELFNBRkQsRUFGZSxDQUtmOztBQUNBLFlBQUlQLGFBQUosRUFBbUI7QUFDakJBLHVCQUFhLENBQUNDLFlBQUQsQ0FBYjtBQUNEO0FBQ0Y7QUFDRjtBQXJCSSxHQUFQO0FBdUJELEMsQ0FFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsU0FBU08sWUFBVCxDQUFzQi9CLFNBQXRCLEVBQWlDQyxLQUFqQyxFQUF3Q3BMLElBQXhDLEVBQThDO0FBQzVDLE1BQUksQ0FBQ29MLEtBQUssQ0FBQ3BMLElBQUQsQ0FBVixFQUFrQjtBQUNoQm9MLFNBQUssQ0FBQ3BMLElBQUQsQ0FBTCxHQUFjLEVBQWQ7QUFDRDs7QUFFRG1MLFdBQVMsY0FBT0osVUFBVSxDQUFDL0ssSUFBRCxDQUFqQixFQUFULEdBQXNDLFVBQUNtTixLQUFELEVBQVc7QUFDL0MvQixTQUFLLENBQUNwTCxJQUFELENBQUwsR0FBYyxHQUFHdkIsTUFBSCxDQUFVME8sS0FBVixDQUFkO0FBQ0QsR0FGRDs7QUFJQWhDLFdBQVMsY0FBT0osVUFBVSxDQUFDL0ssSUFBRCxDQUFqQixFQUFULEdBQXNDLFVBQUMrSSxJQUFELEVBQVU7QUFDOUNxQyxTQUFLLENBQUNwTCxJQUFELENBQUwsQ0FBWTRDLElBQVosQ0FBaUJtRyxJQUFqQjtBQUNELEdBRkQ7O0FBSUFvQyxXQUFTLGlCQUFVSixVQUFVLENBQUMvSyxJQUFELENBQXBCLEVBQVQsR0FBeUMsVUFBQytJLElBQUQsRUFBVTtBQUNqRCxRQUFNNUcsS0FBSyxHQUFHaUosS0FBSyxDQUFDcEwsSUFBRCxDQUFMLENBQVlnSixPQUFaLENBQW9CRCxJQUFwQixDQUFkO0FBQ0FxQyxTQUFLLENBQUNwTCxJQUFELENBQUwsQ0FBWW9OLE1BQVosQ0FBbUJqTCxLQUFuQixFQUEwQixDQUExQjtBQUNELEdBSEQ7O0FBS0FnSixXQUFTLGNBQU9KLFVBQVUsQ0FBQy9LLElBQUQsQ0FBakIsRUFBVCxHQUFzQztBQUFBLFdBQU1vTCxLQUFLLENBQUNwTCxJQUFELENBQVg7QUFBQSxHQUF0Qzs7QUFFQW1MLFdBQVMsb0JBQWFKLFVBQVUsQ0FBQy9LLElBQUQsQ0FBdkIsRUFBVCxHQUE0QztBQUFBLFdBQU9vTCxLQUFLLENBQUNwTCxJQUFELENBQUwsR0FBYyxFQUFyQjtBQUFBLEdBQTVDO0FBQ0QsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBRUEsU0FBU3FOLEtBQVQsR0FBc0I7QUFBQSxxQ0FBSi9SLEVBQUk7QUFBSkEsTUFBSTtBQUFBOztBQUNwQixTQUFPO0FBQUEsdUNBQUk2USxJQUFKO0FBQUlBLFVBQUo7QUFBQTs7QUFBQSxXQUFhN1EsRUFBRSxDQUFDZ1MsTUFBSCxDQUFVLFVBQUEvVCxDQUFDO0FBQUEsYUFBSSxDQUFDLENBQUNBLENBQU47QUFBQSxLQUFYLEVBQW9CRixPQUFwQixDQUE0QixVQUFBRSxDQUFDO0FBQUEsYUFBSUEsQ0FBQyxNQUFELFNBQUs0UyxJQUFMLENBQUo7QUFBQSxLQUE3QixDQUFiO0FBQUEsR0FBUDtBQUNELEMsQ0FFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsU0FBU29CLGNBQVQsQ0FBd0JwQyxTQUF4QixFQUFtQ0MsS0FBbkMsRUFBMENvQyxRQUExQyxFQUFvREMsV0FBcEQsRUFBaUU7QUFDL0Q7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxFQUExQjtBQUNBLE1BQUlDLGtCQUFrQixHQUFHLENBQXpCO0FBQ0EsTUFBTTlCLFNBQVMsYUFBTTJCLFFBQU4sdUJBQWY7QUFDQSxNQUFNSSxjQUFjLGlCQUFVN0MsVUFBVSxDQUFDYyxTQUFELENBQXBCLENBQXBCO0FBQ0EsTUFBTWdDLGlCQUFpQixhQUFNTCxRQUFOLGFBQXZCLENBTitELENBUS9EOztBQUNBLE1BQUksQ0FBQ3BDLEtBQUssQ0FBQ3lDLGlCQUFELENBQVYsRUFBK0I7QUFDN0J6QyxTQUFLLENBQUN5QyxpQkFBRCxDQUFMLEdBQTJCLEVBQTNCO0FBQ0QsR0FYOEQsQ0FhL0Q7OztBQUNBOVMsT0FBSyxDQUFDb1EsU0FBRCxFQUFZQyxLQUFaLEVBQW1CUyxTQUFuQixDQUFMOztBQUVBLFdBQVNHLEdBQVQsR0FBZTtBQUNiLFFBQUl4RSxLQUFLLEdBQUdrRyxpQkFBaUIsQ0FBQ3RVLE1BQTlCOztBQUNBLFdBQU9vTyxLQUFQLEVBQWM7QUFDWkEsV0FBSyxJQUFJLENBQVQ7QUFDQWtHLHVCQUFpQixDQUFDbEcsS0FBRCxDQUFqQixHQUEyQixJQUEzQjtBQUNEO0FBQ0YsR0F0QjhELENBd0IvRDs7O0FBQ0EsV0FBU3NHLG1CQUFULENBQTZCQyxZQUE3QixFQUEyQ0MsV0FBM0MsRUFBd0Q7QUFDdEQsUUFBSTtBQUNGLFVBQUlELFlBQUosRUFBa0I7QUFDaEIsWUFBTUUsYUFBYSxHQUFHUixXQUFXLENBQUM5USxHQUFaLENBQWdCeU8sS0FBSyxDQUFDeUMsaUJBQUQsQ0FBckIsRUFBMENFLFlBQVksQ0FBQ2pCLE9BQXZELEVBQWdFa0IsV0FBaEUsQ0FBdEI7O0FBQ0EsWUFBSUMsYUFBYSxLQUNYMVcsSUFBSSxDQUFDK1EsU0FBTCxDQUFlMkYsYUFBZixNQUFrQ0YsWUFBWSxDQUFDakIsT0FBYixDQUFxQm9CLFFBQXZELElBQW1FSCxZQUFZLENBQUNqQixPQUFiLENBQXFCcUIsUUFBckIsQ0FBOEJDLFVBRHRGLENBQWpCLEVBQ29IO0FBQ2xITCxzQkFBWSxDQUFDakIsT0FBYixDQUFxQm9CLFFBQXJCLEdBQWdDM1csSUFBSSxDQUFDK1EsU0FBTCxDQUFlMkYsYUFBZixDQUFoQztBQUNBRixzQkFBWSxDQUFDTSxXQUFiLENBQXlCSixhQUF6QjtBQUNEO0FBQ0Y7QUFDRixLQVRELENBU0UsT0FBT2pYLEdBQVAsRUFBWTtBQUNaRixhQUFPLENBQUNGLEdBQVIsaUJBQXFCNFcsUUFBckIscUJBQStDeFcsR0FBL0M7QUFDRDtBQUNGLEdBdEM4RCxDQXdDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBbVUsV0FBUyxzQkFBZUosVUFBVSxDQUFDeUMsUUFBRCxDQUF6QixFQUFULEdBQWtELFVBQUNhLFdBQUQsRUFBZ0Q7QUFBQSxRQUFsQ0MsU0FBa0MsdUVBQXRCLEVBQXNCO0FBQUEsUUFBbEJILFFBQWtCLHVFQUFQLEVBQU87QUFDaEcsUUFBTTlQLEVBQUUsR0FBR3FQLGlCQUFpQixDQUFDdFUsTUFBN0I7QUFDQSxRQUFNMFQsT0FBTyxHQUFHO0FBQ2R6TyxRQUFFLEVBQUZBLEVBRGM7QUFFZGlRLGVBQVMsRUFBVEEsU0FGYztBQUdkSCxjQUFRLEVBQUUxUixNQUFNLENBQUM4UixNQUFQLENBQWMsRUFBZCxFQUFrQmQsV0FBVyxDQUFDZSxlQUE5QixFQUErQ0wsUUFBL0M7QUFISSxLQUFoQjs7QUFLQSxRQUFJckIsT0FBTyxDQUFDcUIsUUFBUixDQUFpQkMsVUFBckIsRUFBaUM7QUFDL0JULHdCQUFrQixJQUFJLENBQXRCO0FBQ0Q7O0FBQ0QsUUFBTUksWUFBWSxHQUFHO0FBQUVNLGlCQUFXLEVBQVhBLFdBQUY7QUFBZXZCLGFBQU8sRUFBUEE7QUFBZixLQUFyQjtBQUNBWSxxQkFBaUIsQ0FBQzlLLElBQWxCLENBQXVCbUwsWUFBdkI7QUFDQTVDLGFBQVMsQ0FBQ3lDLGNBQUQsQ0FBVCxDQUEwQmQsT0FBMUI7QUFDQWdCLHVCQUFtQixDQUFDQyxZQUFELEVBQWUsSUFBZixDQUFuQjtBQUNBLFdBQU87QUFDTGhVLGlCQURLLHlCQUNTO0FBQ1orUyxlQUFPLENBQUMyQixNQUFSLEdBQWlCLGFBQWpCOztBQUNBLFlBQUkzQixPQUFPLENBQUNxQixRQUFSLENBQWlCQyxVQUFyQixFQUFpQztBQUMvQlQsNEJBQWtCLElBQUksQ0FBdEI7QUFDRDs7QUFDRHhDLGlCQUFTLENBQUN5QyxjQUFELENBQVQsQ0FBMEJkLE9BQTFCO0FBQ0FZLHlCQUFpQixDQUFDclAsRUFBRCxDQUFqQixHQUF3QixJQUF4QjtBQUNELE9BUkk7QUFTTHFRLFlBVEssa0JBU0VDLElBVEYsRUFTUUMsSUFUUixFQVNjO0FBQ2pCOUIsZUFBTyxDQUFDd0IsU0FBUixHQUFvQixHQUFHN1AsTUFBSCxDQUFVa1EsSUFBVixDQUFwQjs7QUFDQSxZQUFJQyxJQUFJLElBQUlBLElBQUksQ0FBQ1IsVUFBTCxLQUFvQnRCLE9BQU8sQ0FBQ3FCLFFBQVIsQ0FBaUJDLFVBQWpELEVBQTZEO0FBQzNEVCw0QkFBa0IsSUFBS2lCLElBQUksQ0FBQ1IsVUFBTCxHQUFrQixDQUFsQixHQUFzQixDQUFDLENBQTlDO0FBQ0Q7O0FBQ0R0QixlQUFPLENBQUNxQixRQUFSLEdBQW1CMVIsTUFBTSxDQUFDOFIsTUFBUCxDQUFjLEVBQWQsRUFBa0J6QixPQUFPLENBQUNxQixRQUExQixFQUFvQ1MsSUFBcEMsQ0FBbkI7QUFDQXpELGlCQUFTLENBQUN5QyxjQUFELENBQVQsQ0FBMEJkLE9BQTFCO0FBQ0FnQiwyQkFBbUIsQ0FBQ0MsWUFBRCxFQUFlLElBQWYsQ0FBbkI7QUFDRDtBQWpCSSxLQUFQO0FBbUJELEdBakNELENBL0MrRCxDQWtGL0Q7OztBQUNBNUMsV0FBUyxjQUFPSixVQUFVLENBQUN5QyxRQUFELENBQWpCLEVBQVQsR0FBMEMsVUFBQ3BXLElBQUQsRUFBVTtBQUNsRDtBQUNBLFFBQUksQ0FBQ3FXLFdBQVcsQ0FBQ25DLEdBQVosQ0FBZ0JGLEtBQUssQ0FBQ3lDLGlCQUFELENBQXJCLEVBQTBDelcsSUFBMUMsQ0FBRCxJQUFvRHVXLGtCQUFrQixHQUFHLENBQTdFLEVBQWdGO0FBQzlFRCx1QkFBaUIsQ0FBQ3JVLE9BQWxCLENBQTBCLFVBQUEwVSxZQUFZO0FBQUEsZUFBSUQsbUJBQW1CLENBQUNDLFlBQUQsRUFBZTNXLElBQWYsQ0FBdkI7QUFBQSxPQUF0QztBQUNEO0FBQ0YsR0FMRCxDQW5GK0QsQ0F5Ri9EO0FBQ0E7QUFDQTs7O0FBQ0ErVCxXQUFTLGNBQU9KLFVBQVUsQ0FBQ3lDLFFBQUQsQ0FBakIsRUFBVCxHQUEwQyxVQUFDcUIsU0FBRCxFQUFZQyxRQUFaLEVBQXlCO0FBQ2pFLFFBQUk7QUFDRixVQUFJRCxTQUFKLEVBQWU7QUFDYixZQUFNL0IsT0FBTyxHQUFHclEsTUFBTSxDQUFDOFIsTUFBUCxDQUFjLEVBQWQsRUFBa0JNLFNBQWxCLEVBQTZCO0FBQUVQLG1CQUFTLEVBQUUsQ0FBQ1EsUUFBRDtBQUFiLFNBQTdCLENBQWhCO0FBQ0EsWUFBTWIsYUFBYSxHQUFHUixXQUFXLENBQUM5USxHQUFaLENBQWdCeU8sS0FBSyxDQUFDeUMsaUJBQUQsQ0FBckIsRUFBMENmLE9BQTFDLEVBQW1ELElBQW5ELENBQXRCOztBQUNBLFlBQUltQixhQUFKLEVBQW1CO0FBQ2pCLGlCQUFPLElBQVA7QUFDRDtBQUNGO0FBQ0YsS0FSRCxDQVFFLE9BQU9qWCxHQUFQLEVBQVk7QUFDWkYsYUFBTyxDQUFDRixHQUFSLGVBQW1CNFcsUUFBbkIscUJBQTZDeFcsR0FBN0M7QUFDRDs7QUFDRCxXQUFPLEtBQVA7QUFDRCxHQWJEOztBQWVBbVUsV0FBUyxDQUFDSyxPQUFWLEdBQW9CNkIsS0FBSyxDQUFDckIsR0FBRCxFQUFNYixTQUFTLENBQUNLLE9BQWhCLENBQXpCO0FBQ0QsQyxDQUVEO0FBQ0E7QUFDQTs7O0FBRUEsU0FBU25SLFdBQVQsQ0FBcUIwVSxNQUFyQixFQUE2QjtBQUMzQixTQUFPLFlBQXdCO0FBQUEsUUFBdkJDLGFBQXVCLHVFQUFQLEVBQU87QUFDN0IsUUFBTTVELEtBQUssR0FBRyxFQUFkO0FBQ0EsUUFBTUQsU0FBUyxHQUFHLEVBQWxCO0FBQ0E0RCxVQUFNLENBQUM1RCxTQUFELEVBQVlDLEtBQVosRUFBbUI0RCxhQUFuQixDQUFOO0FBQ0EsV0FBT3ZTLE1BQU0sQ0FBQ3lQLE1BQVAsQ0FBY2YsU0FBZCxDQUFQO0FBQ0QsR0FMRDtBQU1EOztBQUVjO0FBQ2JrQyxPQUFLLEVBQUxBLEtBRGE7QUFFYkUsZ0JBQWMsRUFBZEEsY0FGYTtBQUdiL0IsU0FBTyxFQUFQQSxPQUhhO0FBSWIwQixjQUFZLEVBQVpBLFlBSmE7QUFLYm5TLE9BQUssRUFBTEEsS0FMYTtBQU1iMFIsT0FBSyxFQUFMQSxLQU5hO0FBT2I5UCxLQUFHLEVBQUhBLEdBUGE7QUFRYnVPLEtBQUcsRUFBSEEsR0FSYTtBQVNiN1EsYUFBVyxFQUFYQSxXQVRhO0FBVWJpUixLQUFHLEVBQUhBO0FBVmEsQ0FBZixFOzs7Ozs7Ozs7Ozs7QUMzV0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUEsSUFBTTJELFdBQVcsR0FBRyxFQUFwQjs7QUFFQSxTQUFTQyxlQUFULENBQXlCL0QsU0FBekIsRUFBb0NDLEtBQXBDLEVBQTJDO0FBQUE7O0FBRXpDRCxXQUFTLENBQUN2RSxLQUFWLEdBQWtCLFVBQUNyTSxNQUFELEVBQVk7QUFDNUIsUUFBSTRVLEdBQUcsR0FBRyxJQUFJQyxjQUFKLEVBQVY7QUFBQSxRQUNFQyxHQUFHLEdBQUdqRSxLQUFLLENBQUNrRSxRQURkO0FBR0FILE9BQUcsQ0FBQ0ksSUFBSixDQUFTLE1BQVQsRUFBaUJGLEdBQWpCLEVBQXNCLElBQXRCO0FBQ0FGLE9BQUcsQ0FBQ0ssWUFBSixHQUFtQixNQUFuQjtBQUNBLFFBQU1DLFlBQVksR0FBRyxjQUFjTixHQUFkLElBQXFCQSxHQUFHLENBQUNLLFlBQUosS0FBcUIsTUFBL0Q7O0FBRUFMLE9BQUcsQ0FBQ3hXLE1BQUosR0FBYSxVQUFDQyxDQUFELEVBQU87QUFDbEIsVUFBTThXLFFBQVEsR0FBR0QsWUFBWSxHQUFHTixHQUFHLENBQUNPLFFBQVAsR0FBa0JuWSxJQUFJLENBQUNDLEtBQUwsQ0FBVzJYLEdBQUcsQ0FBQ08sUUFBZixDQUEvQzs7QUFDQSxVQUFJUCxHQUFHLENBQUNRLE1BQUosS0FBZSxHQUFmLElBQXNCRCxRQUF0QixJQUFrQyxDQUFDQSxRQUFRLENBQUN6WSxLQUFoRCxFQUF1RDtBQUNyRDtBQUNBZ1ksbUJBQVcsQ0FBQ3JNLElBQVosQ0FBaUI4TSxRQUFqQjtBQUNBdkUsaUJBQVMsQ0FBQ3lFLGdCQUFWLENBQTJCRixRQUEzQjtBQUNBO0FBQ0Q7O0FBQ0R2RSxlQUFTLENBQUMwRSxTQUFWLENBQW9CVixHQUFwQjtBQUNELEtBVEQ7O0FBV0FBLE9BQUcsQ0FBQ1csT0FBSixHQUFjLFVBQUNsWCxDQUFELEVBQU87QUFDbkJ1UyxlQUFTLENBQUMwRSxTQUFWLENBQW9CVixHQUFwQjtBQUNELEtBRkQ7O0FBSUFBLE9BQUcsQ0FBQ1ksSUFBSixDQUFTeFksSUFBSSxDQUFDK1EsU0FBTCxDQUFlL04sTUFBZixDQUFUO0FBQ0QsR0F4QkQ7O0FBMEJBNFEsV0FBUyxDQUFDNkUsZUFBVixHQUE0QixVQUFDQyxTQUFELEVBQWU7QUFDekMsUUFBSWQsR0FBRyxHQUFHLElBQUlDLGNBQUosRUFBVjtBQUFBLFFBQ0VDLEdBQUcsR0FBRyxDQUFDakUsS0FBSyxDQUFDa0UsUUFBUCxFQUFpQlcsU0FBakIsRUFBNEI3USxJQUE1QixDQUFpQyxHQUFqQyxDQURSO0FBR0ErUCxPQUFHLENBQUNJLElBQUosQ0FBUyxLQUFULEVBQWdCRixHQUFoQixFQUFxQixJQUFyQjtBQUNBRixPQUFHLENBQUNLLFlBQUosR0FBbUIsTUFBbkI7QUFDQSxRQUFNQyxZQUFZLEdBQUcsY0FBY04sR0FBZCxJQUFxQkEsR0FBRyxDQUFDSyxZQUFKLEtBQXFCLE1BQS9EOztBQUVBTCxPQUFHLENBQUN4VyxNQUFKLEdBQWEsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2xCLFVBQUksS0FBSSxDQUFDK1csTUFBTCxLQUFnQixHQUFwQixFQUF5QjtBQUN2QnhFLGlCQUFTLENBQUMrRSxTQUFWLENBQW9CVCxZQUFZLEdBQUdOLEdBQUcsQ0FBQ08sUUFBUCxHQUFrQm5ZLElBQUksQ0FBQ0MsS0FBTCxDQUFXMlgsR0FBRyxDQUFDTyxRQUFmLENBQWxEO0FBQ0E7QUFDRDs7QUFDRHZFLGVBQVMsQ0FBQzBFLFNBQVYsQ0FBb0JWLEdBQXBCO0FBQ0QsS0FORDs7QUFRQUEsT0FBRyxDQUFDVyxPQUFKLEdBQWMsVUFBQ2xYLENBQUQsRUFBTztBQUNuQnVTLGVBQVMsQ0FBQzBFLFNBQVYsQ0FBb0JWLEdBQXBCO0FBQ0QsS0FGRDs7QUFJQUEsT0FBRyxDQUFDWSxJQUFKO0FBQ0QsR0FyQkQ7O0FBdUJBNUUsV0FBUyxDQUFDZ0YsSUFBVixHQUFpQixVQUFDQyxVQUFELEVBQWdCO0FBQy9CLFFBQUlqQixHQUFHLEdBQUcsSUFBSUMsY0FBSixFQUFWO0FBQUEsUUFDRUMsR0FBRyxHQUFHLENBQUNqRSxLQUFLLENBQUNrRSxRQUFQLEVBQWlCYyxVQUFVLENBQUMvUixFQUE1QixFQUFnQ2UsSUFBaEMsQ0FBcUMsR0FBckMsQ0FEUjtBQUdBK1AsT0FBRyxDQUFDSSxJQUFKLENBQVMsUUFBVCxFQUFtQkYsR0FBbkIsRUFBd0IsSUFBeEI7QUFDQUYsT0FBRyxDQUFDSyxZQUFKLEdBQW1CLE1BQW5CO0FBQ0EsUUFBTUMsWUFBWSxHQUFHLGNBQWNOLEdBQWQsSUFBcUJBLEdBQUcsQ0FBQ0ssWUFBSixLQUFxQixNQUEvRDs7QUFFQUwsT0FBRyxDQUFDeFcsTUFBSixHQUFhLFVBQUNDLENBQUQsRUFBTztBQUNsQixVQUFJLEtBQUksQ0FBQytXLE1BQUwsS0FBZ0IsR0FBcEIsRUFBeUI7QUFDdkIsWUFBTUQsUUFBUSxHQUFHRCxZQUFZLEdBQUdOLEdBQUcsQ0FBQ08sUUFBUCxHQUFrQm5ZLElBQUksQ0FBQ0MsS0FBTCxDQUFXMlgsR0FBRyxDQUFDTyxRQUFmLENBQS9DLENBRHVCLENBRXZCO0FBQ0E7O0FBQ0F2RSxpQkFBUyxDQUFDa0Ysa0JBQVYsQ0FBNkJYLFFBQTdCO0FBQ0E7QUFDRDs7QUFDRHZFLGVBQVMsQ0FBQzBFLFNBQVYsQ0FBb0JWLEdBQXBCO0FBQ0QsS0FURDs7QUFVQUEsT0FBRyxDQUFDVyxPQUFKLEdBQWMsVUFBQ2xYLENBQUQsRUFBTztBQUNuQnVTLGVBQVMsQ0FBQzBFLFNBQVYsQ0FBb0JWLEdBQXBCO0FBQ0QsS0FGRDs7QUFHQUEsT0FBRyxDQUFDWSxJQUFKO0FBQ0QsR0F0QkQ7O0FBd0JBNUUsV0FBUyxDQUFDbUYsZUFBVixHQUE0QixZQUFNO0FBQ2hDLFdBQU9yQixXQUFQO0FBQ0QsR0FGRDtBQUdEOztBQUVELElBQU1zQixjQUFjLEdBQUc7QUFDckJqQixVQUFRLEVBQUU7QUFEVyxDQUF2QjtBQUlPLFNBQVNQLE1BQVQsQ0FBZ0I1RCxTQUFoQixFQUEyQkMsS0FBM0IsRUFBc0Q7QUFBQSxNQUFwQjRELGFBQW9CLHVFQUFKLEVBQUk7QUFDM0R2UyxRQUFNLENBQUM4UixNQUFQLENBQWNuRCxLQUFkLEVBQXFCbUYsY0FBckIsRUFBcUN2QixhQUFyQztBQUVBd0IsaUVBQXNCLENBQUNoRixPQUF2QixDQUErQkwsU0FBL0IsRUFBMENDLEtBQTFDO0FBQ0FvRixpRUFBc0IsQ0FBQ3pWLEtBQXZCLENBQTZCb1EsU0FBN0IsRUFBd0NDLEtBQXhDLEVBQStDLGNBQS9DO0FBQ0FvRixpRUFBc0IsQ0FBQ3pWLEtBQXZCLENBQTZCb1EsU0FBN0IsRUFBd0NDLEtBQXhDLEVBQStDLGdCQUEvQztBQUNBb0YsaUVBQXNCLENBQUN6VixLQUF2QixDQUE2Qm9RLFNBQTdCLEVBQXdDQyxLQUF4QyxFQUErQyxPQUEvQztBQUNBb0YsaUVBQXNCLENBQUN6VixLQUF2QixDQUE2Qm9RLFNBQTdCLEVBQXdDQyxLQUF4QyxFQUErQyxPQUEvQztBQUNBb0YsaUVBQXNCLENBQUN0RixHQUF2QixDQUEyQkMsU0FBM0IsRUFBc0NDLEtBQXRDLEVBQTZDLGlCQUE3QztBQUVBOEQsaUJBQWUsQ0FBQy9ELFNBQUQsRUFBWUMsS0FBWixDQUFmO0FBQ0QsQyxDQUVEOztBQUNPLElBQU0vUSxXQUFXLEdBQUdtVywrREFBc0IsQ0FBQ25XLFdBQXZCLENBQW1DMFUsTUFBbkMsQ0FBcEI7QUFFUTtBQUFFMVUsYUFBVyxFQUFYQSxXQUFGO0FBQWUwVSxRQUFNLEVBQU5BO0FBQWYsQ0FBZixFOzs7Ozs7Ozs7Ozs7QUN6R0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRU8sSUFBTTBCLDJCQUEyQixhQUFNalYsTUFBTSxDQUFDa1YsUUFBUCxDQUFnQkMsUUFBdEIsZUFBbUNuVixNQUFNLENBQUNrVixRQUFQLENBQWdCRSxRQUFuRCxjQUErRHBWLE1BQU0sQ0FBQ2tWLFFBQVAsQ0FBZ0JHLElBQS9FLGVBQWpDO0FBQUEsSUFDTEMsbUJBQW1CLGFBQU90VixNQUFNLENBQUNrVixRQUFQLENBQWdCQyxRQUFoQixLQUE2QixPQUE5QixHQUF5QyxLQUF6QyxHQUFpRCxJQUF2RCxnQkFBaUVuVixNQUFNLENBQUNrVixRQUFQLENBQWdCRSxRQUFqRixjQUE2RnBWLE1BQU0sQ0FBQ2tWLFFBQVAsQ0FBZ0JHLElBQTdHLFFBRGQ7O0FBSVAsU0FBU0UsU0FBVCxDQUFtQjVGLFNBQW5CLEVBQThCQyxLQUE5QixFQUFxQztBQUNuQyxNQUFNNEYsWUFBWSxHQUFHNVcsNERBQW1CLENBQUNDLFdBQXBCLENBQWdDO0FBQUVDLFFBQUksRUFBRThRLEtBQUssQ0FBQzdRLE1BQU4sQ0FBYTBXLFVBQXJCO0FBQWlDQyxVQUFNLEVBQUU5RixLQUFLLENBQUM3USxNQUFOLENBQWEyVyxNQUF0RDtBQUE4REMsU0FBSyxFQUFFL0YsS0FBSyxDQUFDN1EsTUFBTixDQUFhNFc7QUFBbEYsR0FBaEMsQ0FBckI7QUFDQS9GLE9BQUssQ0FBQ00sYUFBTixDQUFvQjlJLElBQXBCLENBQXlCb08sWUFBWSxDQUFDdFcsaUJBQWIsQ0FBK0J5USxTQUFTLENBQUNpRyxjQUF6QyxDQUF6QjtBQUNBaEcsT0FBSyxDQUFDTSxhQUFOLENBQW9COUksSUFBcEIsQ0FBeUJvTyxZQUFZLENBQUNsVyxpQkFBYixDQUErQnFRLFNBQVMsQ0FBQ2tHLGNBQXpDLENBQXpCO0FBQ0FqRyxPQUFLLENBQUNNLGFBQU4sQ0FBb0I5SSxJQUFwQixDQUF5Qm9PLFlBQVksQ0FBQ25XLGlCQUFiLENBQStCc1EsU0FBUyxDQUFDbUcsY0FBekMsQ0FBekIsRUFKbUMsQ0FNbkM7O0FBQ0FsRyxPQUFLLENBQUNtRyxFQUFOLENBQVMzTyxJQUFULENBQWNvTyxZQUFkO0FBRUEsU0FBT0EsWUFBWSxDQUFDOVcsT0FBYixFQUFQO0FBQ0Q7O0FBRUQsU0FBU3NYLFlBQVQsQ0FBc0JyRyxTQUF0QixFQUFpQ0MsS0FBakMsRUFBd0M7QUFDdEMsTUFBSXpVLE9BQU8sR0FBRyxJQUFkO0FBQ0F5VSxPQUFLLENBQUNtRyxFQUFOLEdBQVcsRUFBWCxDQUZzQyxDQUl0Qzs7QUFDQXBHLFdBQVMsQ0FBQ2lHLGNBQVYsR0FBMkIsVUFBQ2hhLElBQUQsRUFBVTtBQUNuQ1QsV0FBTyxHQUFHUyxJQUFJLENBQUN1RCxVQUFMLEVBQVY7QUFDQXdRLGFBQVMsQ0FBQ3NHLG1CQUFWLENBQThCcmEsSUFBOUI7QUFDRCxHQUhEOztBQUlBK1QsV0FBUyxDQUFDa0csY0FBVixHQUEyQixVQUFDamEsSUFBRCxFQUFPSixHQUFQLEVBQWU7QUFDeENtVSxhQUFTLENBQUN1RyxtQkFBVixDQUE4QnRhLElBQTlCLEVBQW9DSixHQUFwQztBQUNELEdBRkQ7O0FBR0FtVSxXQUFTLENBQUNtRyxjQUFWLEdBQTJCLFVBQUNsYSxJQUFELEVBQVU7QUFDbkMrVCxhQUFTLENBQUN3RyxtQkFBVixDQUE4QnZhLElBQTlCO0FBQ0QsR0FGRDs7QUFJQStULFdBQVMsQ0FBQ2pSLE9BQVYsR0FBb0IsWUFBTTtBQUN4QixRQUFJa1IsS0FBSyxDQUFDd0csZUFBVixFQUEyQjtBQUN6QnhHLFdBQUssQ0FBQzdRLE1BQU4sR0FBZTZRLEtBQUssQ0FBQ3dHLGVBQU4sQ0FBc0J4RyxLQUFLLENBQUM3USxNQUE1QixDQUFmO0FBQ0Q7O0FBQ0QsUUFBSTZRLEtBQUssQ0FBQzdRLE1BQU4sQ0FBYTBXLFVBQWpCLEVBQTZCO0FBQzNCO0FBQ0F0YSxhQUFPLEdBQUdvYSxTQUFTLENBQUM1RixTQUFELEVBQVlDLEtBQVosQ0FBbkI7QUFDRCxLQUhELE1BR087QUFDTDtBQUNBLFVBQU15RyxRQUFRLEdBQUczQyx3REFBZSxDQUFDN1UsV0FBaEIsQ0FBNEI7QUFBRWlWLGdCQUFRLEVBQUVsRSxLQUFLLENBQUM3USxNQUFOLENBQWF1WCxpQkFBYixJQUFrQ3JCO0FBQTlDLE9BQTVCLENBQWpCO0FBRUFyRixXQUFLLENBQUNNLGFBQU4sQ0FBb0I5SSxJQUFwQixDQUF5QmlQLFFBQVEsQ0FBQ0UsY0FBVCxDQUF3QixVQUFDM2EsSUFBRCxFQUFVO0FBQ3pELFlBQUlnVSxLQUFLLENBQUN3RyxlQUFWLEVBQTJCO0FBQ3pCeEcsZUFBSyxDQUFDN1EsTUFBTixHQUFlNlEsS0FBSyxDQUFDd0csZUFBTixDQUFzQm5WLE1BQU0sQ0FBQzhSLE1BQVAsQ0FBYyxFQUFkLEVBQWtCbkQsS0FBSyxDQUFDN1EsTUFBeEIsRUFBZ0NuRCxJQUFoQyxDQUF0QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xnVSxlQUFLLENBQUM3USxNQUFOLEdBQWVrQyxNQUFNLENBQUM4UixNQUFQLENBQWMsRUFBZCxFQUFrQm5ELEtBQUssQ0FBQzdRLE1BQXhCLEVBQWdDbkQsSUFBaEMsQ0FBZjtBQUNEOztBQUVEVCxlQUFPLEdBQUdvYSxTQUFTLENBQUM1RixTQUFELEVBQVlDLEtBQVosQ0FBbkI7QUFDRCxPQVJ3QixDQUF6QjtBQVNBQSxXQUFLLENBQUNNLGFBQU4sQ0FBb0I5SSxJQUFwQixDQUF5QmlQLFFBQVEsQ0FBQ0csT0FBVCxDQUFpQixVQUFDNWEsSUFBRCxFQUFVO0FBQ2xELFlBQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDc1ksUUFBYixJQUF5QnRZLElBQUksQ0FBQ3NZLFFBQUwsQ0FBY3pZLEtBQTNDLEVBQWtEO0FBQ2hEa1UsbUJBQVMsQ0FBQ2tHLGNBQVYsQ0FBeUJqYSxJQUF6QixFQUErQkEsSUFBSSxDQUFDc1ksUUFBTCxDQUFjelksS0FBN0M7QUFDRCxTQUZELE1BRU87QUFDTDtBQUNBbVUsZUFBSyxDQUFDN1EsTUFBTixDQUFhMFcsVUFBYixHQUEwQkgsbUJBQTFCO0FBQ0FuYSxpQkFBTyxHQUFHb2EsU0FBUyxDQUFDNUYsU0FBRCxFQUFZQyxLQUFaLENBQW5CO0FBQ0Q7QUFDRixPQVJ3QixDQUF6QjtBQVVBeUcsY0FBUSxDQUFDakwsS0FBVCxDQUFld0UsS0FBSyxDQUFDN1EsTUFBckIsRUF2QkssQ0F5Qkw7O0FBQ0E2USxXQUFLLENBQUNtRyxFQUFOLENBQVMzTyxJQUFULENBQWNpUCxRQUFkO0FBQ0Q7QUFDRixHQW5DRDs7QUFxQ0ExRyxXQUFTLENBQUN4USxVQUFWLEdBQXVCLFlBQU07QUFDM0IsV0FBT2hFLE9BQVA7QUFDRCxHQUZEOztBQUlBLFdBQVNzYixPQUFULEdBQW1CO0FBQ2pCLFFBQUl0YixPQUFKLEVBQWE7QUFDWEEsYUFBTyxDQUFDc0QsS0FBUjtBQUNEOztBQUNEdEQsV0FBTyxHQUFHLElBQVY7O0FBRUEsV0FBT3lVLEtBQUssQ0FBQ21HLEVBQU4sQ0FBU25ZLE1BQWhCLEVBQXdCO0FBQ3RCZ1MsV0FBSyxDQUFDbUcsRUFBTixDQUFTN0osR0FBVCxHQUFlOEQsT0FBZjtBQUNEO0FBQ0Y7O0FBRURMLFdBQVMsQ0FBQ0ssT0FBVixHQUFvQmdGLCtEQUFzQixDQUFDbkQsS0FBdkIsQ0FBNkI0RSxPQUE3QixFQUFzQzlHLFNBQVMsQ0FBQ0ssT0FBaEQsQ0FBcEI7QUFDRDs7QUFFRCxJQUFNK0UsY0FBYyxHQUFHO0FBQ3JCaFcsUUFBTSxFQUFFLEVBRGEsQ0FFckI7O0FBRnFCLENBQXZCO0FBS08sU0FBU3dVLE1BQVQsQ0FBZ0I1RCxTQUFoQixFQUEyQkMsS0FBM0IsRUFBc0Q7QUFBQSxNQUFwQjRELGFBQW9CLHVFQUFKLEVBQUk7QUFDM0R2UyxRQUFNLENBQUM4UixNQUFQLENBQWNuRCxLQUFkLEVBQXFCbUYsY0FBckIsRUFBcUN2QixhQUFyQztBQUVBd0IsaUVBQXNCLENBQUNoRixPQUF2QixDQUErQkwsU0FBL0IsRUFBMENDLEtBQTFDO0FBQ0FvRixpRUFBc0IsQ0FBQ3pWLEtBQXZCLENBQTZCb1EsU0FBN0IsRUFBd0NDLEtBQXhDLEVBQStDLGlCQUEvQztBQUNBb0YsaUVBQXNCLENBQUN6VixLQUF2QixDQUE2Qm9RLFNBQTdCLEVBQXdDQyxLQUF4QyxFQUErQyxpQkFBL0M7QUFDQW9GLGlFQUFzQixDQUFDelYsS0FBdkIsQ0FBNkJvUSxTQUE3QixFQUF3Q0MsS0FBeEMsRUFBK0MsaUJBQS9DO0FBQ0FvRixpRUFBc0IsQ0FBQ3RGLEdBQXZCLENBQTJCQyxTQUEzQixFQUFzQ0MsS0FBdEMsRUFBNkMsY0FBN0M7QUFDQW9GLGlFQUFzQixDQUFDN1QsR0FBdkIsQ0FBMkJ3TyxTQUEzQixFQUFzQ0MsS0FBdEMsRUFBNkMsQ0FBQyxRQUFELEVBQVcsaUJBQVgsQ0FBN0M7QUFDQW9GLGlFQUFzQixDQUFDbEYsR0FBdkIsQ0FBMkJILFNBQTNCLEVBQXNDQyxLQUF0QyxFQUE2QyxDQUFDLGlCQUFELENBQTdDO0FBRUFvRyxjQUFZLENBQUNyRyxTQUFELEVBQVlDLEtBQVosQ0FBWjtBQUNELEMsQ0FFRDs7QUFDTyxJQUFNL1EsV0FBVyxHQUFHbVcsK0RBQXNCLENBQUNuVyxXQUF2QixDQUFtQzBVLE1BQW5DLENBQXBCO0FBRVE7QUFBRTFVLGFBQVcsRUFBWEEsV0FBRjtBQUFlMFUsUUFBTSxFQUFOQTtBQUFmLENBQWYsRTs7Ozs7Ozs7Ozs7O0FDbkhBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQSxJQUFNbUQsY0FBYyxHQUFHLGVBQXZCOztBQUVBLFNBQVNDLGtCQUFULENBQTRCOUMsR0FBNUIsRUFBaUM7QUFDL0IsTUFBSStDLEdBQUcsR0FBRy9DLEdBQUcsQ0FBQ3JHLE9BQUosQ0FBWSxHQUFaLENBQVY7QUFBQSxNQUNFMkgsUUFBUSxHQUFHdEIsR0FBRyxDQUFDbkgsU0FBSixDQUFjLENBQWQsRUFBaUJrSyxHQUFqQixDQURiOztBQUVBLE1BQUl6QixRQUFRLEtBQUssSUFBYixJQUFxQkEsUUFBUSxLQUFLLEtBQXRDLEVBQTZDO0FBQzNDLFdBQU87QUFDTHJaLFVBQUksRUFBRSxXQUREO0FBRUwrWCxTQUFHLEVBQUhBO0FBRkssS0FBUDtBQUlEOztBQUVELFFBQU0sSUFBSWdELEtBQUosNkJBQStCMUIsUUFBL0Isd0JBQXFEdEIsR0FBckQsNENBQU47QUFDRDs7QUFFRCxTQUFTalYsbUJBQVQsQ0FBNkIrUSxTQUE3QixFQUF3Q0MsS0FBeEMsRUFBK0M7QUFDN0M7QUFFQUQsV0FBUyxDQUFDalIsT0FBVixHQUFvQixZQUFNO0FBQ3hCO0FBQ0EsUUFBSSxDQUFDa1IsS0FBSyxDQUFDOVEsSUFBWCxFQUFpQixPQUFPLElBQVAsQ0FGTyxDQUd4Qjs7QUFDQSxRQUFJZ1ksT0FBTyxHQUFHLEdBQUc3VCxNQUFILENBQVUyTSxLQUFLLENBQUM5USxJQUFoQixDQUFkO0FBQUEsUUFDRWlZLFVBQVUsR0FBRyxFQURmOztBQUdBLFNBQUssSUFBSWhaLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcrWSxPQUFPLENBQUNsWixNQUE1QixFQUFvQ0csQ0FBQyxJQUFJLENBQXpDLEVBQTRDO0FBQzFDLFVBQU04VixHQUFHLEdBQUdpRCxPQUFPLENBQUMvWSxDQUFELENBQW5COztBQUNBLFVBQUk7QUFDRixZQUFNaVosU0FBUyxHQUFHTCxrQkFBa0IsQ0FBQzlDLEdBQUQsQ0FBcEM7QUFDQWtELGtCQUFVLENBQUMzUCxJQUFYLENBQWdCNFAsU0FBaEI7QUFDRCxPQUhELENBR0UsT0FBT0Msb0JBQVAsRUFBNkI7QUFDN0IzYixlQUFPLENBQUNHLEtBQVIsQ0FBY3diLG9CQUFkO0FBQ0F0SCxpQkFBUyxDQUFDdUcsbUJBQVYsQ0FBOEJ2RyxTQUE5QixFQUF5Q3NILG9CQUF6QztBQUNBLGVBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBRUQsUUFBSXJILEtBQUssQ0FBQ2dGLFVBQVYsRUFBc0I7QUFDcEIsVUFBSWhGLEtBQUssQ0FBQ2dGLFVBQU4sQ0FBaUJmLEdBQWpCLEtBQXlCa0QsVUFBVSxDQUFDLENBQUQsQ0FBVixDQUFjbEQsR0FBM0MsRUFBZ0Q7QUFDOUNqRSxhQUFLLENBQUNnRixVQUFOLENBQWlCblcsS0FBakI7QUFDRCxPQUZELE1BRU8sSUFBSW1SLEtBQUssQ0FBQ2dGLFVBQU4sQ0FBaUJzQyxVQUFqQixLQUFnQyxDQUFoQyxJQUFxQ3RILEtBQUssQ0FBQ2dGLFVBQU4sQ0FBaUJzQyxVQUFqQixLQUFnQyxDQUF6RSxFQUE0RTtBQUNqRjtBQUNBLGVBQU90SCxLQUFLLENBQUN6VSxPQUFiO0FBQ0Q7QUFDRjs7QUFDRCxRQUFJO0FBQ0Z5VSxXQUFLLENBQUNnRixVQUFOLEdBQW1CLElBQUl1QyxTQUFKLENBQWNKLFVBQVUsQ0FBQyxDQUFELENBQVYsQ0FBY2xELEdBQTVCLENBQW5CO0FBQ0QsS0FGRCxDQUVFLE9BQU9yWSxHQUFQLEVBQVk7QUFDWjtBQUNBO0FBQ0FGLGFBQU8sQ0FBQ0csS0FBUixDQUFjRCxHQUFkO0FBQ0FtVSxlQUFTLENBQUN1RyxtQkFBVixDQUE4QnZHLFNBQTlCLEVBQXlDblUsR0FBekM7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFFRG9VLFNBQUssQ0FBQ2dGLFVBQU4sQ0FBaUJ3QyxVQUFqQixHQUE4QixNQUE5QjtBQUNBLFFBQUksQ0FBQ3hILEtBQUssQ0FBQzhGLE1BQVgsRUFBbUI5RixLQUFLLENBQUM4RixNQUFOLEdBQWVnQixjQUFmO0FBQ25COUcsU0FBSyxDQUFDelUsT0FBTixHQUFnQmtjLGdEQUFPLENBQUN4WSxXQUFSLENBQW9CO0FBQUU1RCxRQUFFLEVBQUUyVSxLQUFLLENBQUNnRixVQUFaO0FBQXdCYyxZQUFNLEVBQUU5RixLQUFLLENBQUM4RjtBQUF0QyxLQUFwQixDQUFoQjs7QUFHQTlGLFNBQUssQ0FBQ2dGLFVBQU4sQ0FBaUIwQyxNQUFqQixHQUEwQixVQUFDL1gsS0FBRCxFQUFXO0FBQ25DLFVBQUlxUSxLQUFLLENBQUN6VSxPQUFWLEVBQW1CO0FBQ2pCO0FBQ0F5VSxhQUFLLENBQUN6VSxPQUFOLENBQWNvYyxTQUFkLENBQXdCaFksS0FBeEIsRUFBK0JwRCxJQUEvQixDQUNFLFlBQU07QUFDSndULG1CQUFTLENBQUNzRyxtQkFBVixDQUE4QnRHLFNBQTlCO0FBQ0QsU0FISCxFQUlFLFVBQUNuVSxHQUFELEVBQVM7QUFDUEYsaUJBQU8sQ0FBQ0csS0FBUixDQUFjLGtCQUFkLEVBQWtDRCxHQUFsQztBQUNBbVUsbUJBQVMsQ0FBQ3VHLG1CQUFWLENBQThCdkcsU0FBOUIsRUFBeUNuVSxHQUF6QztBQUNELFNBUEg7QUFTRDtBQUNGLEtBYkQ7O0FBZUFvVSxTQUFLLENBQUNnRixVQUFOLENBQWlCNEMsT0FBakIsR0FBMkIsVUFBQ2pZLEtBQUQsRUFBVztBQUNwQ29RLGVBQVMsQ0FBQ3dHLG1CQUFWLENBQThCeEcsU0FBOUI7QUFDQUMsV0FBSyxDQUFDZ0YsVUFBTixHQUFtQixJQUFuQixDQUZvQyxDQUdwQztBQUNELEtBSkQ7O0FBS0FoRixTQUFLLENBQUNnRixVQUFOLENBQWlCTixPQUFqQixHQUEyQixVQUFDL1UsS0FBRCxFQUFXO0FBQ3BDb1EsZUFBUyxDQUFDdUcsbUJBQVYsQ0FBOEJ2RyxTQUE5QixFQUF5Q3BRLEtBQXpDO0FBQ0QsS0FGRCxDQTlEd0IsQ0FpRXhCOzs7QUFDQXFRLFNBQUssQ0FBQ2dGLFVBQU4sQ0FBaUI2QyxTQUFqQixHQUE2QixVQUFDbFksS0FBRCxFQUFXO0FBQ3RDcVEsV0FBSyxDQUFDelUsT0FBTixDQUFjc2MsU0FBZCxDQUF3QmxZLEtBQXhCO0FBQ0QsS0FGRDs7QUFHQSxXQUFPcVEsS0FBSyxDQUFDelUsT0FBYjtBQUNELEdBdEVEOztBQXdFQXdVLFdBQVMsQ0FBQ3hRLFVBQVYsR0FBdUI7QUFBQSxXQUFPeVEsS0FBSyxDQUFDelUsT0FBYjtBQUFBLEdBQXZCOztBQUVBd1UsV0FBUyxDQUFDK0gsTUFBVixHQUFtQjtBQUFBLFdBQU85SCxLQUFLLENBQUNnRixVQUFOLEdBQW1CaEYsS0FBSyxDQUFDZ0YsVUFBTixDQUFpQmYsR0FBcEMsR0FBMEMzUSxTQUFqRDtBQUFBLEdBQW5COztBQUVBLFdBQVN1VCxPQUFULEdBQStCO0FBQUEsUUFBZGtCLE9BQWMsdUVBQUosRUFBSTs7QUFDN0IsUUFBSS9ILEtBQUssQ0FBQ3pVLE9BQU4sSUFBaUJ3YyxPQUFPLEdBQUcsQ0FBL0IsRUFBa0M7QUFDaEMvSCxXQUFLLENBQUN6VSxPQUFOLENBQWNlLElBQWQsQ0FBbUIsd0JBQW5CLEVBQTZDLENBQUN5YixPQUFELENBQTdDO0FBQ0Q7O0FBQ0QsUUFBSS9ILEtBQUssQ0FBQ2dGLFVBQVYsRUFBc0I7QUFDcEJoRixXQUFLLENBQUNnRixVQUFOLENBQWlCblcsS0FBakI7QUFDRDs7QUFDRG1SLFNBQUssQ0FBQ2dGLFVBQU4sR0FBbUIsSUFBbkI7QUFDRDs7QUFFRGpGLFdBQVMsQ0FBQ0ssT0FBVixHQUFvQmdGLCtEQUFzQixDQUFDbkQsS0FBdkIsQ0FBNkI0RSxPQUE3QixFQUFzQzlHLFNBQVMsQ0FBQ0ssT0FBaEQsQ0FBcEI7QUFDRDs7QUFFRCxJQUFNK0UsY0FBYyxHQUFHO0FBQ3JCVyxRQUFNLEVBQUVnQixjQURhO0FBRXJCOUIsWUFBVSxFQUFFLElBRlM7QUFHckJ6WixTQUFPLEVBQUUsSUFIWTtBQUlyQndhLE9BQUssRUFBRTtBQUpjLENBQXZCO0FBT08sU0FBU3BDLE1BQVQsQ0FBZ0I1RCxTQUFoQixFQUEyQkMsS0FBM0IsRUFBc0Q7QUFBQSxNQUFwQjRELGFBQW9CLHVFQUFKLEVBQUk7QUFDM0R2UyxRQUFNLENBQUM4UixNQUFQLENBQWNuRCxLQUFkLEVBQXFCbUYsY0FBckIsRUFBcUN2QixhQUFyQztBQUVBd0IsaUVBQXNCLENBQUNoRixPQUF2QixDQUErQkwsU0FBL0IsRUFBMENDLEtBQTFDO0FBQ0FvRixpRUFBc0IsQ0FBQ3pWLEtBQXZCLENBQTZCb1EsU0FBN0IsRUFBd0NDLEtBQXhDLEVBQStDLGlCQUEvQztBQUNBb0YsaUVBQXNCLENBQUN6VixLQUF2QixDQUE2Qm9RLFNBQTdCLEVBQXdDQyxLQUF4QyxFQUErQyxpQkFBL0M7QUFDQW9GLGlFQUFzQixDQUFDelYsS0FBdkIsQ0FBNkJvUSxTQUE3QixFQUF3Q0MsS0FBeEMsRUFBK0MsaUJBQS9DO0FBQ0FvRixpRUFBc0IsQ0FBQ3RGLEdBQXZCLENBQTJCQyxTQUEzQixFQUFzQ0MsS0FBdEMsRUFBNkMscUJBQTdDO0FBRUFoUixxQkFBbUIsQ0FBQytRLFNBQUQsRUFBWUMsS0FBWixDQUFuQjtBQUNELEMsQ0FFRDs7QUFFTyxJQUFNL1EsV0FBVyxHQUFHbVcsK0RBQXNCLENBQUNuVyxXQUF2QixDQUFtQzBVLE1BQW5DLENBQXBCLEMsQ0FFUDs7QUFFZTtBQUFFMVUsYUFBVyxFQUFYQSxXQUFGO0FBQWUwVSxRQUFNLEVBQU5BO0FBQWYsQ0FBZixFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hJQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUzhELE9BQVQsQ0FBaUIxSCxTQUFqQixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsTUFBTWdJLFlBQVksR0FBRyxDQUFDLEtBQXRCO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLENBQWY7QUFDQSxNQUFNQyxXQUFXLEdBQUcsRUFBcEI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsRUFBcEI7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxFQUExQjtBQUNBLE1BQUlDLFlBQVksR0FBRyxDQUFuQjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxtQkFBcEIsQ0FQaUMsQ0FRakM7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHLGdEQUFqQjtBQUNBLE1BQU1qSSxhQUFhLEdBQUcsRUFBdEI7QUFDQSxNQUFJa0ksUUFBUSxHQUFHLElBQWY7O0FBRUF6SSxXQUFTLENBQUMwSSxLQUFWLEdBQWtCLFlBQU07QUFDdEIsUUFBTUMsUUFBUSxHQUFHLEVBQWpCO0FBRUFBLFlBQVEsQ0FBQ0MsT0FBVCxHQUFtQixJQUFJQyxPQUFKLENBQVksVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDeERKLGNBQVEsQ0FBQ0csT0FBVCxHQUFtQkEsT0FBbkI7QUFDQUgsY0FBUSxDQUFDSSxNQUFULEdBQWtCQSxNQUFsQjtBQUNELEtBSGtCLENBQW5CO0FBS0EsV0FBT0osUUFBUDtBQUNELEdBVEQ7O0FBV0EzSSxXQUFTLENBQUM0SCxTQUFWLEdBQXNCLFVBQUNoWSxLQUFELEVBQVc7QUFDL0I7QUFDQSxRQUFNK1ksUUFBUSxHQUFHM0ksU0FBUyxDQUFDMEksS0FBVixFQUFqQjtBQUNBLFFBQU14VixFQUFFLEdBQUcsYUFBWDtBQUNBaVYsZUFBVyxDQUFDalYsRUFBRCxDQUFYLEdBQWtCeVYsUUFBbEI7QUFDQTFJLFNBQUssQ0FBQzNVLEVBQU4sQ0FBU3NaLElBQVQsQ0FBY3hZLElBQUksQ0FBQytRLFNBQUwsQ0FBZTtBQUMzQjZMLFlBQU0sRUFBRSxLQURtQjtBQUUzQjlWLFFBQUUsRUFBRkEsRUFGMkI7QUFHM0IrVixZQUFNLEVBQUUsY0FIbUI7QUFJM0JqSSxVQUFJLEVBQUUsQ0FBQztBQUFFK0UsY0FBTSxFQUFFOUYsS0FBSyxDQUFDOEY7QUFBaEIsT0FBRCxDQUpxQjtBQUszQm1ELFlBQU0sRUFBRTtBQUxtQixLQUFmLENBQWQ7QUFPQSxXQUFPUCxRQUFRLENBQUNDLE9BQWhCO0FBQ0QsR0FiRDs7QUFjQTVJLFdBQVMsQ0FBQ3pULElBQVYsR0FBaUIsVUFBQzBjLE1BQUQsRUFBb0M7QUFBQSxRQUEzQmpJLElBQTJCLHVFQUFwQixFQUFvQjtBQUFBLFFBQWhCa0ksTUFBZ0IsdUVBQVAsRUFBTztBQUNuRDtBQUNBLFFBQU1QLFFBQVEsR0FBRzNJLFNBQVMsQ0FBQzBJLEtBQVYsRUFBakIsQ0FGbUQsQ0FHbkQ7O0FBQ0EsUUFBSXpJLEtBQUssQ0FBQzNVLEVBQU4sSUFBWW1kLFFBQVosSUFBd0J4SSxLQUFLLENBQUMzVSxFQUFOLENBQVNpYyxVQUFULEtBQXdCLENBQXBELEVBQXVEO0FBQ3JELFVBQU1yVSxFQUFFLGlCQUFVdVYsUUFBVixjQUFzQlAsUUFBUSxFQUE5QixDQUFSO0FBQ0FDLGlCQUFXLENBQUNqVixFQUFELENBQVgsR0FBa0J5VixRQUFsQjtBQUVBLFVBQU1qZCxHQUFHLEdBQUdVLElBQUksQ0FBQytRLFNBQUwsQ0FBZTtBQUFFNkwsY0FBTSxFQUFFLEtBQVY7QUFBaUI5VixVQUFFLEVBQUZBLEVBQWpCO0FBQXFCK1YsY0FBTSxFQUFOQSxNQUFyQjtBQUE2QmpJLFlBQUksRUFBSkEsSUFBN0I7QUFBbUNrSSxjQUFNLEVBQU5BO0FBQW5DLE9BQWYsQ0FBWjs7QUFFQSxVQUFJNVgsTUFBTSxDQUFDbU4sSUFBUCxDQUFZNEosaUJBQVosRUFBK0JwYSxNQUFuQyxFQUEyQztBQUN6QyxZQUFNa2IsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBQ3BXLEdBQUQsRUFBUztBQUMxQixjQUFJQSxHQUFHLElBQUlzVixpQkFBWCxFQUE4QjtBQUM1QjtBQUNBcEksaUJBQUssQ0FBQzNVLEVBQU4sQ0FBU3NaLElBQVQsQ0FBY3hZLElBQUksQ0FBQytRLFNBQUwsQ0FBZTtBQUMzQjZMLG9CQUFNLEVBQUUsS0FEbUI7QUFFM0JDLG9CQUFNLEVBQUUsMEJBRm1CO0FBRzNCakksa0JBQUksRUFBRSxDQUFDak8sR0FBRDtBQUhxQixhQUFmLENBQWQsRUFGNEIsQ0FRNUI7O0FBQ0FrTixpQkFBSyxDQUFDM1UsRUFBTixDQUFTc1osSUFBVCxDQUFjeUQsaUJBQWlCLENBQUN0VixHQUFELENBQS9CLEVBQXNDO0FBQUVxVyxvQkFBTSxFQUFFO0FBQVYsYUFBdEM7QUFDQSxtQkFBT2YsaUJBQWlCLENBQUN0VixHQUFELENBQXhCO0FBQ0Q7QUFDRixTQWJEOztBQWVBLFlBQU1zVyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFDQyxDQUFELEVBQU87QUFDeEIsY0FBSUEsQ0FBSixFQUFPO0FBQ0wsZ0JBQUl6YyxLQUFLLENBQUNDLE9BQU4sQ0FBY3djLENBQWQsQ0FBSixFQUFzQjtBQUNwQkEsZUFBQyxDQUFDcGIsT0FBRixDQUFVLFVBQUN5UCxDQUFEO0FBQUEsdUJBQU8wTCxVQUFVLENBQUMxTCxDQUFELENBQWpCO0FBQUEsZUFBVjtBQUNELGFBRkQsTUFFTyxJQUFJMkwsQ0FBQyxDQUFDQyxXQUFGLEtBQWtCalksTUFBdEIsRUFBOEI7QUFDbkNBLG9CQUFNLENBQUNtTixJQUFQLENBQVk2SyxDQUFaLEVBQWVwYixPQUFmLENBQXVCLFVBQUNzYixDQUFEO0FBQUEsdUJBQU9ILFVBQVUsQ0FBQ0MsQ0FBQyxDQUFDRSxDQUFELENBQUYsQ0FBakI7QUFBQSxlQUF2QjtBQUNELGFBRk0sTUFFQSxJQUFJakIsV0FBVyxDQUFDdlEsSUFBWixDQUFpQnNSLENBQWpCLENBQUosRUFBeUI7QUFDOUJILHdCQUFVLENBQUNHLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7O0FBQUE7QUFDRixTQVZEOztBQVlBRCxrQkFBVSxDQUFDckksSUFBRCxDQUFWO0FBQ0FxSSxrQkFBVSxDQUFDSCxNQUFELENBQVY7QUFDRDs7QUFFRGpKLFdBQUssQ0FBQzNVLEVBQU4sQ0FBU3NaLElBQVQsQ0FBY3hZLElBQUksQ0FBQytRLFNBQUwsQ0FBZTtBQUFFNkwsY0FBTSxFQUFFLEtBQVY7QUFBaUI5VixVQUFFLEVBQUZBLEVBQWpCO0FBQXFCK1YsY0FBTSxFQUFOQSxNQUFyQjtBQUE2QmpJLFlBQUksRUFBSkEsSUFBN0I7QUFBbUNrSSxjQUFNLEVBQU5BO0FBQW5DLE9BQWYsQ0FBZDtBQUNELEtBdkNELE1BdUNPO0FBQ0xQLGNBQVEsQ0FBQ0ksTUFBVCxDQUFnQjtBQUFFaGQsWUFBSSxFQUFFa2MsWUFBUjtBQUFzQmpjLGVBQU8scUJBQWNpZCxNQUFkO0FBQTdCLE9BQWhCO0FBQ0Q7O0FBQ0QsV0FBT04sUUFBUSxDQUFDQyxPQUFoQjtBQUNELEdBL0NEOztBQWdEQTVJLFdBQVMsQ0FBQ3JSLFNBQVYsR0FBc0IsVUFBQzhhLEtBQUQsRUFBUXZJLFFBQVIsRUFBcUI7QUFDekMsUUFBTXlILFFBQVEsR0FBRzNJLFNBQVMsQ0FBQzBJLEtBQVYsRUFBakI7O0FBQ0EsUUFBSXpJLEtBQUssQ0FBQzNVLEVBQU4sSUFBWW1kLFFBQWhCLEVBQTBCO0FBQ3hCO0FBQ0EsVUFBSSxDQUFDbEksYUFBYSxDQUFDa0osS0FBRCxDQUFsQixFQUEyQmxKLGFBQWEsQ0FBQ2tKLEtBQUQsQ0FBYixHQUF1QixFQUF2QjtBQUMzQmxKLG1CQUFhLENBQUNrSixLQUFELENBQWIsQ0FBcUJoUyxJQUFyQixDQUEwQnlKLFFBQTFCLEVBSHdCLENBSXhCO0FBQ0E7O0FBQ0F5SCxjQUFRLENBQUNHLE9BQVQsQ0FBaUI7QUFBRVcsYUFBSyxFQUFMQSxLQUFGO0FBQVN2SSxnQkFBUSxFQUFSQTtBQUFULE9BQWpCO0FBQ0QsS0FQRCxNQU9PO0FBQ0x5SCxjQUFRLENBQUNJLE1BQVQsQ0FBZ0I7QUFBRWhkLFlBQUksRUFBRWtjLFlBQVI7QUFBc0JqYyxlQUFPLDJCQUFvQnlkLEtBQXBCO0FBQTdCLE9BQWhCO0FBQ0Q7O0FBQ0QsV0FBT2QsUUFBUSxDQUFDQyxPQUFoQjtBQUNELEdBYkQ7O0FBY0E1SSxXQUFTLENBQUNwUixXQUFWLEdBQXdCLFVBQUM4YSxJQUFELEVBQVU7QUFDaEMsUUFBTWYsUUFBUSxHQUFHM0ksU0FBUyxDQUFDMEksS0FBVixFQUFqQjtBQURnQyxRQUV4QmUsS0FGd0IsR0FFSkMsSUFGSSxDQUV4QkQsS0FGd0I7QUFBQSxRQUVqQnZJLFFBRmlCLEdBRUp3SSxJQUZJLENBRWpCeEksUUFGaUI7O0FBR2hDLFFBQUksQ0FBQ1gsYUFBYSxDQUFDa0osS0FBRCxDQUFsQixFQUEyQjtBQUN6QmQsY0FBUSxDQUFDSSxNQUFULENBQWdCO0FBQUVoZCxZQUFJLEVBQUVrYyxZQUFSO0FBQXNCamMsZUFBTyw2QkFBc0J5ZCxLQUF0QjtBQUE3QixPQUFoQjtBQUNBLGFBQU9kLFFBQVEsQ0FBQ0MsT0FBaEI7QUFDRDs7QUFDRCxRQUFNNVIsS0FBSyxHQUFHdUosYUFBYSxDQUFDa0osS0FBRCxDQUFiLENBQXFCNUwsT0FBckIsQ0FBNkJxRCxRQUE3QixDQUFkOztBQUNBLFFBQUlsSyxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCdUosbUJBQWEsQ0FBQ2tKLEtBQUQsQ0FBYixDQUFxQnhILE1BQXJCLENBQTRCakwsS0FBNUIsRUFBbUMsQ0FBbkM7QUFDQTJSLGNBQVEsQ0FBQ0csT0FBVDtBQUNELEtBSEQsTUFHTztBQUNMSCxjQUFRLENBQUNJLE1BQVQsQ0FBZ0I7QUFBRWhkLFlBQUksRUFBRWtjLFlBQVI7QUFBc0JqYyxlQUFPLDZCQUFzQnlkLEtBQXRCO0FBQTdCLE9BQWhCO0FBQ0Q7O0FBQ0QsV0FBT2QsUUFBUSxDQUFDQyxPQUFoQjtBQUNELEdBZkQ7O0FBZ0JBNUksV0FBUyxDQUFDbFIsS0FBVixHQUFrQixZQUFNO0FBQ3RCLFFBQU02WixRQUFRLEdBQUczSSxTQUFTLENBQUMwSSxLQUFWLEVBQWpCLENBRHNCLENBRXRCOztBQUNBekksU0FBSyxDQUFDM1UsRUFBTixDQUFTd0QsS0FBVDtBQUNBNlosWUFBUSxDQUFDRyxPQUFUO0FBQ0EsV0FBT0gsUUFBUSxDQUFDQyxPQUFoQjtBQUNELEdBTkQsQ0F2SGlDLENBK0hqQzs7O0FBQ0EsV0FBU2UsYUFBVCxDQUF1QkMsU0FBdkIsRUFBa0M7QUFDaEM7QUFDQSxRQUFNNVMsS0FBSyxHQUFHb1IsV0FBVyxDQUFDeUIsU0FBWixDQUFzQixVQUFDQyxHQUFEO0FBQUEsYUFBVUEsR0FBRyxDQUFDL1csR0FBSixLQUFZNlcsU0FBdEI7QUFBQSxLQUF0QixDQUFkOztBQUNBLFFBQUk1UyxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCLFVBQU12SyxNQUFNLEdBQUcyYixXQUFXLENBQUNwUixLQUFELENBQVgsQ0FBbUIvSyxJQUFsQyxDQURnQixDQUVoQjs7QUFDQW1jLGlCQUFXLENBQUNuRyxNQUFaLENBQW1CakwsS0FBbkIsRUFBMEIsQ0FBMUI7QUFDQSxhQUFPdkssTUFBUDtBQUNEOztBQUNEZCxXQUFPLENBQUNHLEtBQVIsQ0FBYyx5REFBZDtBQUNBLFdBQU8sSUFBUDtBQUNELEdBM0lnQyxDQTRJakM7OztBQUNBLFdBQVNpZSxhQUFULENBQXVCQyxRQUF2QixFQUFpQztBQUMvQixTQUFLLElBQUlqWCxHQUFULElBQWdCaVgsUUFBaEIsRUFBMEI7QUFDeEIsVUFBSSxPQUFPQSxRQUFRLENBQUNqWCxHQUFELENBQWYsS0FBMEIsUUFBMUIsSUFDRndWLFdBQVcsQ0FBQ3ZRLElBQVosQ0FBaUJnUyxRQUFRLENBQUNqWCxHQUFELENBQXpCLENBREYsRUFDbUM7QUFDakMsWUFBTTZXLFNBQVMsR0FBR0ksUUFBUSxDQUFDalgsR0FBRCxDQUExQjtBQUNBLFlBQU1rRyxXQUFXLEdBQUcwUSxhQUFhLENBQUNDLFNBQUQsQ0FBakM7QUFDQSxZQUFJM1EsV0FBVyxLQUFLLElBQXBCLEVBQTBCK1EsUUFBUSxDQUFDalgsR0FBRCxDQUFSLEdBQWdCa0csV0FBaEI7QUFDM0IsT0FMRCxNQUtPLElBQUksUUFBTytRLFFBQVEsQ0FBQ2pYLEdBQUQsQ0FBZixNQUEwQixRQUE5QixFQUF3QztBQUM3QztBQUNBZ1gscUJBQWEsQ0FBQ0MsUUFBUSxDQUFDalgsR0FBRCxDQUFULENBQWI7QUFDRDtBQUNGO0FBQ0Y7O0FBRURpTixXQUFTLENBQUM4SCxTQUFWLEdBQXNCLFVBQUNsWSxLQUFELEVBQVc7QUFDL0IsUUFBSUEsS0FBSyxDQUFDM0QsSUFBTixZQUFzQmdlLFdBQXRCLElBQXFDcmEsS0FBSyxDQUFDM0QsSUFBTixZQUFzQmUsSUFBL0QsRUFBcUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFJa2QsT0FBTyxHQUFHLEtBQWQ7O0FBQ0EsV0FBSyxJQUFJOWIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2dhLFdBQVcsQ0FBQ25hLE1BQWhDLEVBQXdDRyxDQUFDLEVBQXpDLEVBQTZDO0FBQzNDLFlBQUlnYSxXQUFXLENBQUNoYSxDQUFELENBQVgsQ0FBZW5DLElBQWYsS0FBd0IsSUFBNUIsRUFBa0M7QUFDaENtYyxxQkFBVyxDQUFDaGEsQ0FBRCxDQUFYLENBQWVuQyxJQUFmLEdBQXNCMkQsS0FBSyxDQUFDM0QsSUFBNUI7QUFDQWllLGlCQUFPLEdBQUcsSUFBVjtBQUNBO0FBQ0Q7QUFDRjs7QUFDRCxVQUFJLENBQUNBLE9BQUwsRUFBYztBQUNadmUsZUFBTyxDQUFDRyxLQUFSLENBQWMsNENBQWQ7QUFDRDtBQUNGLEtBaEJELE1BZ0JPO0FBQ0wsVUFBSXFlLE9BQUo7O0FBQ0EsVUFBSTtBQUNGQSxlQUFPLEdBQUc1Syw0Q0FBSyxDQUFDbFQsS0FBTixDQUFZdUQsS0FBSyxDQUFDM0QsSUFBbEIsQ0FBVjtBQUNELE9BRkQsQ0FFRSxPQUFPd0IsQ0FBUCxFQUFVO0FBQ1Y5QixlQUFPLENBQUNHLEtBQVIsQ0FBYyxxQkFBZCxFQUFxQzhELEtBQUssQ0FBQzNELElBQTNDLEVBRFUsQ0FFVjtBQUNEOztBQUNELFVBQUksQ0FBQ2tlLE9BQUwsRUFBYzs7QUFDZCxVQUFJLENBQUNBLE9BQU8sQ0FBQ2pYLEVBQWIsRUFBaUI7QUFDZjtBQUNBO0FBQ0EsWUFBSWlYLE9BQU8sQ0FBQ2xCLE1BQVIsS0FBbUIsMEJBQXZCLEVBQW1EO0FBQ2pEa0IsaUJBQU8sQ0FBQ25KLElBQVIsQ0FBYTlTLE9BQWIsQ0FBcUIsVUFBQzZFLEdBQUQsRUFBUztBQUM1QnFWLHVCQUFXLENBQUMzUSxJQUFaLENBQWlCO0FBQUUxRSxpQkFBRyxFQUFIQSxHQUFGO0FBQU85RyxrQkFBSSxFQUFFO0FBQWIsYUFBakI7QUFDRCxXQUZEO0FBR0Q7O0FBQ0Q7QUFDRDs7QUFDRCxVQUFJa2UsT0FBTyxDQUFDcmUsS0FBWixFQUFtQjtBQUNqQjtBQUNBc2MsbUJBQVcsQ0FBQ25hLE1BQVosR0FBcUIsQ0FBckI7QUFDQSxZQUFNMGEsUUFBUSxHQUFHUixXQUFXLENBQUNnQyxPQUFPLENBQUNqWCxFQUFULENBQTVCOztBQUNBLFlBQUl5VixRQUFKLEVBQWM7QUFDWkEsa0JBQVEsQ0FBQ0ksTUFBVCxDQUFnQm9CLE9BQU8sQ0FBQ3JlLEtBQXhCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xILGlCQUFPLENBQUNHLEtBQVIsQ0FBYyxlQUFkLEVBQStCcWUsT0FBTyxDQUFDcmUsS0FBdkM7QUFDRDtBQUNGLE9BVEQsTUFTTztBQUNMLFlBQUlxZSxPQUFPLENBQUMxZCxNQUFSLElBQWtCMmIsV0FBVyxDQUFDbmEsTUFBWixHQUFxQixDQUEzQyxFQUE4QztBQUM1QyxjQUFJLE9BQU9rYyxPQUFPLENBQUMxZCxNQUFmLEtBQTJCLFFBQTNCLElBQ0Y4YixXQUFXLENBQUN2USxJQUFaLENBQWlCbVMsT0FBTyxDQUFDMWQsTUFBekIsQ0FERixFQUNvQztBQUNsQyxnQkFBTXdNLFdBQVcsR0FBRzBRLGFBQWEsQ0FBQ1EsT0FBTyxDQUFDMWQsTUFBVCxDQUFqQztBQUNBLGdCQUFJd00sV0FBVyxLQUFLLElBQXBCLEVBQTBCa1IsT0FBTyxDQUFDMWQsTUFBUixHQUFpQndNLFdBQWpCO0FBQzNCLFdBSkQsTUFJTztBQUNMOFEseUJBQWEsQ0FBQ0ksT0FBTyxDQUFDMWQsTUFBVCxDQUFiO0FBQ0Q7QUFDRjs7QUFDRCxZQUFNMmQsS0FBSyxHQUFHNUIsUUFBUSxDQUFDcFgsSUFBVCxDQUFjK1ksT0FBTyxDQUFDalgsRUFBdEIsQ0FBZDs7QUFDQSxZQUFJa1gsS0FBSixFQUFXO0FBQ1QsY0FBTWplLElBQUksR0FBR2llLEtBQUssQ0FBQyxDQUFELENBQWxCOztBQUNBLGNBQUlqZSxJQUFJLEtBQUssS0FBYixFQUFvQjtBQUNsQixnQkFBTXdjLFNBQVEsR0FBR1IsV0FBVyxDQUFDZ0MsT0FBTyxDQUFDalgsRUFBVCxDQUE1Qjs7QUFDQSxnQkFBSSxDQUFDeVYsU0FBTCxFQUFlO0FBQ2JoZCxxQkFBTyxDQUFDRixHQUFSLENBQVksbURBQVosRUFBaUUwZSxPQUFqRTtBQUNBO0FBQ0Q7O0FBQ0R4QixxQkFBUSxDQUFDRyxPQUFULENBQWlCcUIsT0FBTyxDQUFDMWQsTUFBekI7QUFDRCxXQVBELE1BT08sSUFBSU4sSUFBSSxJQUFJLFNBQVosRUFBdUI7QUFDNUJSLG1CQUFPLENBQUMwZSxNQUFSLENBQWVsQyxXQUFXLENBQUNnQyxPQUFPLENBQUNqWCxFQUFULENBQVgsS0FBNEJLLFNBQTNDLEVBQXNELHNEQUF0RCxFQUQ0QixDQUU1Qjs7QUFDQSxnQkFBTWtXLEtBQUssR0FBR1csS0FBSyxDQUFDLENBQUQsQ0FBbkI7O0FBQ0EsZ0JBQUksQ0FBQzdKLGFBQWEsQ0FBQ2tKLEtBQUQsQ0FBbEIsRUFBMkI7QUFDekI7QUFDRCxhQU4yQixDQU81Qjs7O0FBQ0FsSix5QkFBYSxDQUFDa0osS0FBRCxDQUFiLENBQXFCdmIsT0FBckIsQ0FBNkIsVUFBQ2dULFFBQUQ7QUFBQSxxQkFBZUEsUUFBUSxDQUFDLENBQUNpSixPQUFPLENBQUMxZCxNQUFULENBQUQsQ0FBdkI7QUFBQSxhQUE3QjtBQUNELFdBVE0sTUFTQSxJQUFJTixJQUFJLElBQUksUUFBWixFQUFzQjtBQUMzQjtBQUNBLGdCQUFNd2MsVUFBUSxHQUFHUixXQUFXLENBQUNnQyxPQUFPLENBQUNqWCxFQUFULENBQTVCOztBQUNBLGdCQUFJaVgsT0FBTyxDQUFDalgsRUFBUixLQUFlLGFBQW5CLEVBQWtDO0FBQ2hDdVYsc0JBQVEsR0FBRzBCLE9BQU8sQ0FBQzFkLE1BQVIsQ0FBZWdjLFFBQTFCO0FBQ0Esa0JBQUlFLFVBQUosRUFBY0EsVUFBUSxDQUFDRyxPQUFULENBQWlCTCxRQUFqQjtBQUNmLGFBSEQsTUFHTztBQUNMOWMscUJBQU8sQ0FBQ0csS0FBUixDQUFjLHdCQUFkLEVBQXdDcWUsT0FBTyxDQUFDalgsRUFBaEQ7QUFDQSxrQkFBSXlWLFVBQUosRUFBY0EsVUFBUSxDQUFDSSxNQUFULENBQWdCO0FBQUVoZCxvQkFBSSxFQUFFa2MsWUFBUjtBQUFzQmpjLHVCQUFPLG1DQUE0Qm1lLE9BQU8sQ0FBQ2pYLEVBQXBDO0FBQTdCLGVBQWhCO0FBQ2Y7QUFDRixXQVZNLE1BVUE7QUFDTHZILG1CQUFPLENBQUNHLEtBQVIsQ0FBYyx1QkFBZCxFQUF1Q3FlLE9BQU8sQ0FBQ2pYLEVBQS9DO0FBQ0Q7QUFDRjtBQUNGOztBQUNELGFBQU9pVixXQUFXLENBQUNnQyxPQUFPLENBQUNqWCxFQUFULENBQWxCO0FBQ0Q7QUFDRixHQTNGRDs7QUE2RkE4TSxXQUFTLENBQUMrSixhQUFWLEdBQTBCLFVBQUNJLE9BQUQsRUFBYTtBQUNyQyxRQUFNRyxRQUFRLHVCQUFnQmhDLFlBQWhCLENBQWQ7QUFDQUQscUJBQWlCLENBQUNpQyxRQUFELENBQWpCLEdBQThCSCxPQUE5QjtBQUNBN0IsZ0JBQVk7QUFDWixXQUFPZ0MsUUFBUDtBQUNELEdBTEQ7QUFNRDs7QUFHRCxJQUFNbEYsY0FBYyxHQUFHO0FBQ3JCVyxRQUFNLEVBQUUsZUFEYTtBQUVyQnphLElBQUUsRUFBRTtBQUZpQixDQUF2QjtBQUtPLFNBQVNzWSxNQUFULENBQWdCNUQsU0FBaEIsRUFBMkJDLEtBQTNCLEVBQXNEO0FBQUEsTUFBcEI0RCxhQUFvQix1RUFBSixFQUFJO0FBQzNEdlMsUUFBTSxDQUFDOFIsTUFBUCxDQUFjbkQsS0FBZCxFQUFxQm1GLGNBQXJCLEVBQXFDdkIsYUFBckM7QUFFQXdCLGlFQUFzQixDQUFDaEYsT0FBdkIsQ0FBK0JMLFNBQS9CLEVBQTBDQyxLQUExQztBQUNBb0YsaUVBQXNCLENBQUN0RixHQUF2QixDQUEyQkMsU0FBM0IsRUFBc0NDLEtBQXRDLEVBQTZDLFNBQTdDO0FBRUF5SCxTQUFPLENBQUMxSCxTQUFELEVBQVlDLEtBQVosQ0FBUDtBQUNELEMsQ0FFRDs7QUFFTyxJQUFNL1EsV0FBVyxHQUFHbVcsK0RBQXNCLENBQUNuVyxXQUF2QixDQUFtQzBVLE1BQW5DLENBQXBCLEMsQ0FFUDs7QUFFZTtBQUFFMVUsYUFBVyxFQUFYQSxXQUFGO0FBQWUwVSxRQUFNLEVBQU5BO0FBQWYsQ0FBZixFOzs7Ozs7Ozs7OztBQ3pSQSwrRUFBaUMsbUJBQU8sQ0FBQyx1SEFBdUgsRSIsImZpbGUiOiJ0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi90ZXN0L21haW4uanMtZXhwb3NlZFwiKTtcbiIsIi8qIGdsb2JhbCBkb2N1bWVudCAqL1xuaW1wb3J0IFdlYnNvY2tldENvbm5lY3Rpb24gZnJvbSAnLi4vc3JjL1dlYnNvY2tldENvbm5lY3Rpb24nO1xuaW1wb3J0IFNtYXJ0Q29ubmVjdCBmcm9tICcuLi9zcmMvU21hcnRDb25uZWN0JztcblxuLy8gdGhpcyB0ZW1wbGF0ZSBhbGxvd3MgdXMgdG8gdXNlIEh0bWxXZWJwYWNrUGx1Z2luXG4vLyBpbiB3ZWJwYWNrIHRvIGdlbmVyYXRlIG91ciBpbmRleC5odG1sXG4vLyBleHBvc2UtbG9hZGVyIG1ha2VzIG91ciAnZXhwb3J0JyBmdW5jdGlvbnMgcGFydCBvZiB0aGUgJ2FwcCcgZ2xvYmFsXG5jb25zdCBodG1sQ29udGVudCA9IGA8YnV0dG9uIG9uQ2xpY2s9XCJhcHAuY29ubmVjdCgpXCI+Q29ubmVjdDwvYnV0dG9uPlxuPGJ1dHRvbiBvbkNsaWNrPVwiYXBwLndzY2xvc2UoKVwiPkRpc2Nvbm5lY3Q8L2J1dHRvbj5cbjxici8+XG48aW5wdXQgdHlwZT1cInRleHRcIiB2YWx1ZT1cIjEsMiwzLDQsNVwiIGNsYXNzPVwiaW5wdXRcIiAvPlxuPGJ1dHRvbiBvbkNsaWNrPVwiYXBwLnNlbmRJbnB1dCgnYWRkJylcIj5TZW5kIEFkZDwvYnV0dG9uPlxuPGJ1dHRvbiBvbkNsaWNrPVwiYXBwLnNlbmRJbnB1dCgnbXVsdCcpXCI+U2VuZCBNdWx0PC9idXR0b24+XG48YnV0dG9uIG9uQ2xpY2s9XCJhcHAuc2VuZEltYWdlKCd1bndyYXBwZWQuaW1hZ2UnKVwiPlNlbmQgSW1hZ2U8L2J1dHRvbj5cbjxidXR0b24gb25DbGljaz1cImFwcC50ZXN0TmVzdGluZygpXCI+VGVzdCBOZXN0aW5nPC9idXR0b24+XG48YnV0dG9uIG9uQ2xpY2s9XCJhcHAudG9nZ2xlU3RyZWFtKClcIj5TdWIvVW5zdWI8L2J1dHRvbj5cbjxidXR0b24gb25DbGljaz1cImFwcC5zZW5kTWlzdGFrZSgpXCI+TWlzdGFrZTwvYnV0dG9uPlxuPGJ1dHRvbiBvbkNsaWNrPVwiYXBwLnNlbmRJbnB1dCgnc3BlY2lhbCcpXCI+VGVzdCBOYU48L2J1dHRvbj5cbjxidXR0b24gb25DbGljaz1cImFwcC5zZW5kU2VydmVyUXVpdCgpXCI+U2VydmVyIFF1aXQ8L2J1dHRvbj5cbjxici8+XG48dGV4dGFyZWEgY2xhc3M9XCJvdXRwdXRcIiByb3dzPVwiMTJcIiBjb2xzPVwiNTBcIj48L3RleHRhcmVhPlxuPGJyLz5cbjxjYW52YXMgY2xhc3M9XCJpbWFnZUNhbnZhc1wiIHdpZHRoPVwiMzAwcHhcIiBoZWlnaHQ9XCIzMDBweFwiPjwvY2FudmFzPlxuYDtcblxuY29uc3Qgcm9vdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbmNvbnN0IGNvbnRyb2xDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbnJvb3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udHJvbENvbnRhaW5lcik7XG5jb250cm9sQ29udGFpbmVyLmlubmVySFRNTCA9IGh0bWxDb250ZW50O1xuXG5jb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQnKTtcbmNvbnN0IGxvZ091dHB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5vdXRwdXQnKTtcbmxldCB3cyA9IG51bGw7XG5sZXQgc3Vic2NyaXB0aW9uID0gZmFsc2U7XG5sZXQgc2Vzc2lvbiA9IG51bGw7XG5cbmZ1bmN0aW9uIGxvZyhtc2cpIHtcbiAgY29uc29sZS5sb2cobXNnKTtcbiAgbG9nT3V0cHV0LmlubmVySFRNTCArPSBtc2c7XG4gIGxvZ091dHB1dC5pbm5lckhUTUwgKz0gJ1xcbic7XG59XG5mdW5jdGlvbiBsb2dlcnIoZXJyKSB7XG4gIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgbG9nT3V0cHV0LmlubmVySFRNTCArPSBgZXJyb3I6ICR7ZXJyLmNvZGV9LCBcIiR7ZXJyLm1lc3NhZ2V9XCIsICR7ZXJyLmRhdGF9YDtcbiAgbG9nT3V0cHV0LmlubmVySFRNTCArPSAnXFxuJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRJbnB1dCh0eXBlKSB7XG4gIGlmICghc2Vzc2lvbikgcmV0dXJuO1xuICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSgnWycgKyBpbnB1dEVsZW1lbnQudmFsdWUgKyAnXScpO1xuICBzZXNzaW9uLmNhbGwoYG15cHJvdG9jb2wuJHt0eXBlfWAsIFtkYXRhXSlcbiAgICAudGhlbigocmVzdWx0KSA9PiBsb2coJ3Jlc3VsdCAnICsgcmVzdWx0KSwgKGVycikgPT4gbG9nZXJyKGVycikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRJbWFnZSh0eXBlKSB7XG4gIGlmICghc2Vzc2lvbikgcmV0dXJuO1xuICBzZXNzaW9uLmNhbGwoYG15cHJvdG9jb2wuJHt0eXBlfWAsIFtdKVxuICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGxvZygncmVzdWx0ICcgKyByZXN1bHQpO1xuICAgICAgaGFuZGxlTWVzc2FnZShyZXN1bHQpO1xuICAgIH0sIChlcnIpID0+IGxvZ2VycihlcnIpKTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoaW5EYXRhKSB7XG4gIGxldCBkYXRhID0gQXJyYXkuaXNBcnJheShpbkRhdGEpID8gaW5EYXRhWzBdIDogaW5EYXRhO1xuICBsZXQgYmxvYiA9IGRhdGEuYmxvYiB8fCBkYXRhO1xuICBpZiAoYmxvYiBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW1hZ2VDYW52YXMnKTtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiBjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7XG4gICAgICBpbWcuc3JjID0gZS50YXJnZXQucmVzdWx0O1xuICAgIH07XG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XG4gIH0gZWxzZSB7XG4gICAgbG9nKCdyZXN1bHQgJyArIGJsb2IpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0TmVzdGluZygpIHtcbiAgaWYgKCFzZXNzaW9uKSByZXR1cm47XG4gIHNlc3Npb24uY2FsbCgnbXlwcm90b2NvbC5uZXN0ZWQuaW1hZ2UnLCBbXSlcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgaWYgKGRhdGFbJ2ltYWdlJ10pIGhhbmRsZU1lc3NhZ2UoZGF0YVsnaW1hZ2UnXSk7XG4gICAgICBjb25zdCBvbmxvYWQgPSAoZSkgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShlLnRhcmdldC5yZXN1bHQpO1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgIGFyci5mb3JFYWNoKChkLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoZCAhPT0gaSArIDEpIGNvbnNvbGUuZXJyb3IoJ21pc21hdGNoNCcsIGQsIGkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGFyci5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICBhcnIuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgICAgICAgaWYgKGQgIT09IGkgKyA1KSBjb25zb2xlLmVycm9yKCdtaXNtYXRjaDQnLCBkLCBpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdTaXplIG1pc21hdGNoJywgYXJyLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBkYXRhLmJ5dGVzTGlzdC5mb3JFYWNoKGJsID0+IHtcbiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IG9ubG9hZDtcbiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZygnTmVzdGluZzonLCBkYXRhKTtcbiAgICB9LCAoZXJyKSA9PiBsb2dlcnIoZXJyKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kTWlzdGFrZSgpIHtcbiAgaWYgKCFzZXNzaW9uKSByZXR1cm47XG4gIHNlc3Npb24uY2FsbCgnbXlwcm90b2NvbC5taXN0YWtlLlRZUE8nLCBbJ2lnbm9yZWQnXSlcbiAgICAudGhlbihoYW5kbGVNZXNzYWdlLCAoZXJyKSA9PiBsb2dlcnIoZXJyKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZW5kU2VydmVyUXVpdCgpIHtcbiAgaWYgKCFzZXNzaW9uKSByZXR1cm47XG4gIHNlc3Npb24uY2FsbCgnYXBwbGljYXRpb24uZXhpdC5sYXRlcicsIFs1XSlcbiAgICAudGhlbigocmVzdWx0KSA9PiBsb2coJ3Jlc3VsdCAnICsgcmVzdWx0KSwgKGVycikgPT4gbG9nZXJyKGVycikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlU3RyZWFtKCkge1xuICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgIHNlc3Npb24uc3Vic2NyaWJlKCdpbWFnZScsIGhhbmRsZU1lc3NhZ2UpLnRoZW4oKHJlc3VsdCkgPT4gKHN1YnNjcmlwdGlvbiA9IHJlc3VsdCkpO1xuICAgIHNlc3Npb24uY2FsbCgnbXlwcm90b2NvbC5zdHJlYW0nLCBbJ2ltYWdlJ10pXG4gICAgICAudGhlbigocmVzdWx0KSA9PiBsb2coJ3Jlc3VsdCAnICsgcmVzdWx0KSwgKGVycikgPT4gbG9nZXJyKGVycikpO1xuICB9IGVsc2Uge1xuICAgIHNlc3Npb24uY2FsbCgnbXlwcm90b2NvbC5zdG9wJywgWydpbWFnZSddKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4gbG9nKCdyZXN1bHQgJyArIHJlc3VsdCksIChlcnIpID0+IGxvZ2VycihlcnIpKTtcbiAgICBzZXNzaW9uLnVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XG4gICAgc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3NjbG9zZSgpIHtcbiAgaWYgKCFzZXNzaW9uKSByZXR1cm47XG4gIHNlc3Npb24uY2xvc2UoKTtcbiAgLy8gaXQncyBmaW5lIHRvIGRlc3Ryb3kgdGhlIFdlYnNvY2tldENvbm5lY3Rpb24sIGJ1dCB5b3Ugd29uJ3QgZ2V0IHRoZSBXUyBjbG9zZSBtZXNzYWdlLlxuICAvLyBpZiAod3MpIHdzLmRlc3Ryb3koKTtcbiAgLy8gd3MgPSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdChkaXJlY3Q9ZmFsc2UpIHtcbiAgd3MgPSBudWxsO1xuICBpZiAoZGlyZWN0KSB7XG4gICAgd3MgPSBXZWJzb2NrZXRDb25uZWN0aW9uLm5ld0luc3RhbmNlKHsgdXJsczogJ3dzOi8vbG9jYWxob3N0OjgwODAvd3MnIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbmZpZyA9IHsgYXBwbGljYXRpb246ICdzaW1wbGUnIH07XG4gICAgd3MgPSBTbWFydENvbm5lY3QubmV3SW5zdGFuY2UoeyBjb25maWcgfSk7XG4gIH1cbiAgd3Mub25Db25uZWN0aW9uUmVhZHkoKCkgPT4ge1xuICAgIGxvZygnV1Mgb3BlbicpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgc2Vzc2lvbiA9IHdzLmdldFNlc3Npb24oKTtcbiAgICB9XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmltYWdlQ2FudmFzJyk7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCAzMDAsIDMwMCk7XG4gIH0pO1xuXG4gIHdzLm9uQ29ubmVjdGlvbkNsb3NlKCgpID0+IHtcbiAgICBsb2coJ1dTIGNsb3NlJyk7XG4gIH0pO1xuXG4gIHdzLm9uQ29ubmVjdGlvbkVycm9yKChldmVudCkgPT4ge1xuICAgIGxvZygnV1MgZXJyb3InKTtcbiAgICBjb25zb2xlLmVycm9yKGV2ZW50KTtcbiAgfSk7XG5cbiAgc2Vzc2lvbiA9IHdzLmNvbm5lY3QoKTtcbn1cbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5KU09ONSA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuXHRmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdFx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xuXHR9XG5cblx0dmFyIF9nbG9iYWwgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5cdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuXHQgID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG5cdCAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG5cdCAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRpZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgeyBfX2cgPSBnbG9iYWw7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXHR9KTtcblxuXHR2YXIgX2NvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG5cdHZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNycgfTtcblx0aWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIHsgX19lID0gY29yZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cdH0pO1xuXHR2YXIgX2NvcmVfMSA9IF9jb3JlLnZlcnNpb247XG5cblx0dmFyIF9pc09iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG5cdH07XG5cblx0dmFyIF9hbk9iamVjdCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmICghX2lzT2JqZWN0KGl0KSkgeyB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7IH1cblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cblx0dmFyIF9mYWlscyA9IGZ1bmN0aW9uIChleGVjKSB7XG5cdCAgdHJ5IHtcblx0ICAgIHJldHVybiAhIWV4ZWMoKTtcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgICByZXR1cm4gdHJ1ZTtcblx0ICB9XG5cdH07XG5cblx0Ly8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxuXHR2YXIgX2Rlc2NyaXB0b3JzID0gIV9mYWlscyhmdW5jdGlvbiAoKSB7XG5cdCAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG5cdH0pO1xuXG5cdHZhciBkb2N1bWVudCA9IF9nbG9iYWwuZG9jdW1lbnQ7XG5cdC8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxuXHR2YXIgaXMgPSBfaXNPYmplY3QoZG9jdW1lbnQpICYmIF9pc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblx0dmFyIF9kb21DcmVhdGUgPSBmdW5jdGlvbiAoaXQpIHtcblx0ICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xuXHR9O1xuXG5cdHZhciBfaWU4RG9tRGVmaW5lID0gIV9kZXNjcmlwdG9ycyAmJiAhX2ZhaWxzKGZ1bmN0aW9uICgpIHtcblx0ICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9kb21DcmVhdGUoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcblx0fSk7XG5cblx0Ly8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG5cblx0Ly8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcblx0Ly8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcblx0dmFyIF90b1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIChpdCwgUykge1xuXHQgIGlmICghX2lzT2JqZWN0KGl0KSkgeyByZXR1cm4gaXQ7IH1cblx0ICB2YXIgZm4sIHZhbDtcblx0ICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIV9pc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHsgcmV0dXJuIHZhbDsgfVxuXHQgIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgeyByZXR1cm4gdmFsOyB9XG5cdCAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhX2lzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgeyByZXR1cm4gdmFsOyB9XG5cdCAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuXHR9O1xuXG5cdHZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuXHR2YXIgZiA9IF9kZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcblx0ICBfYW5PYmplY3QoTyk7XG5cdCAgUCA9IF90b1ByaW1pdGl2ZShQLCB0cnVlKTtcblx0ICBfYW5PYmplY3QoQXR0cmlidXRlcyk7XG5cdCAgaWYgKF9pZThEb21EZWZpbmUpIHsgdHJ5IHtcblx0ICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcblx0ICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH0gfVxuXHQgIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHsgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTsgfVxuXHQgIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIHsgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7IH1cblx0ICByZXR1cm4gTztcblx0fTtcblxuXHR2YXIgX29iamVjdERwID0ge1xuXHRcdGY6IGZcblx0fTtcblxuXHR2YXIgX3Byb3BlcnR5RGVzYyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG5cdCAgcmV0dXJuIHtcblx0ICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG5cdCAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG5cdCAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcblx0ICAgIHZhbHVlOiB2YWx1ZVxuXHQgIH07XG5cdH07XG5cblx0dmFyIF9oaWRlID0gX2Rlc2NyaXB0b3JzID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuXHQgIHJldHVybiBfb2JqZWN0RHAuZihvYmplY3QsIGtleSwgX3Byb3BlcnR5RGVzYygxLCB2YWx1ZSkpO1xuXHR9IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuXHR2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIF9oYXMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuXHQgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xuXHR9O1xuXG5cdHZhciBpZCA9IDA7XG5cdHZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5cdHZhciBfdWlkID0gZnVuY3Rpb24gKGtleSkge1xuXHQgIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG5cdH07XG5cblx0dmFyIF9yZWRlZmluZSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcblx0dmFyIFNSQyA9IF91aWQoJ3NyYycpO1xuXHR2YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcblx0dmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG5cdHZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cblx0X2NvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG5cdH07XG5cblx0KG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG5cdCAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG5cdCAgaWYgKGlzRnVuY3Rpb24pIHsgX2hhcyh2YWwsICduYW1lJykgfHwgX2hpZGUodmFsLCAnbmFtZScsIGtleSk7IH1cblx0ICBpZiAoT1trZXldID09PSB2YWwpIHsgcmV0dXJuOyB9XG5cdCAgaWYgKGlzRnVuY3Rpb24pIHsgX2hhcyh2YWwsIFNSQykgfHwgX2hpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTsgfVxuXHQgIGlmIChPID09PSBfZ2xvYmFsKSB7XG5cdCAgICBPW2tleV0gPSB2YWw7XG5cdCAgfSBlbHNlIGlmICghc2FmZSkge1xuXHQgICAgZGVsZXRlIE9ba2V5XTtcblx0ICAgIF9oaWRlKE8sIGtleSwgdmFsKTtcblx0ICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuXHQgICAgT1trZXldID0gdmFsO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBfaGlkZShPLCBrZXksIHZhbCk7XG5cdCAgfVxuXHQvLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcblx0fSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHQgIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcblx0fSk7XG5cdH0pO1xuXG5cdHZhciBfYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGl0KSB7XG5cdCAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7IHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7IH1cblx0ICByZXR1cm4gaXQ7XG5cdH07XG5cblx0Ly8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5cblx0dmFyIF9jdHggPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuXHQgIF9hRnVuY3Rpb24oZm4pO1xuXHQgIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuIGZuOyB9XG5cdCAgc3dpdGNoIChsZW5ndGgpIHtcblx0ICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuXHQgICAgfTtcblx0ICB9XG5cdCAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG5cdCAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcblx0ICB9O1xuXHR9O1xuXG5cdHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuXHR2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcblx0ICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcblx0ICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcblx0ICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcblx0ICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuXHQgIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcblx0ICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gX2dsb2JhbCA6IElTX1NUQVRJQyA/IF9nbG9iYWxbbmFtZV0gfHwgKF9nbG9iYWxbbmFtZV0gPSB7fSkgOiAoX2dsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcblx0ICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IF9jb3JlIDogX2NvcmVbbmFtZV0gfHwgKF9jb3JlW25hbWVdID0ge30pO1xuXHQgIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuXHQgIHZhciBrZXksIG93biwgb3V0LCBleHA7XG5cdCAgaWYgKElTX0dMT0JBTCkgeyBzb3VyY2UgPSBuYW1lOyB9XG5cdCAgZm9yIChrZXkgaW4gc291cmNlKSB7XG5cdCAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcblx0ICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG5cdCAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuXHQgICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcblx0ICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG5cdCAgICBleHAgPSBJU19CSU5EICYmIG93biA/IF9jdHgob3V0LCBfZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IF9jdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcblx0ICAgIC8vIGV4dGVuZCBnbG9iYWxcblx0ICAgIGlmICh0YXJnZXQpIHsgX3JlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpOyB9XG5cdCAgICAvLyBleHBvcnRcblx0ICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSB7IF9oaWRlKGV4cG9ydHMsIGtleSwgZXhwKTsgfVxuXHQgICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSB7IGV4cFByb3RvW2tleV0gPSBvdXQ7IH1cblx0ICB9XG5cdH07XG5cdF9nbG9iYWwuY29yZSA9IF9jb3JlO1xuXHQvLyB0eXBlIGJpdG1hcFxuXHQkZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuXHQkZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuXHQkZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuXHQkZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG5cdCRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuXHQkZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcblx0JGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG5cdCRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxuXHR2YXIgX2V4cG9ydCA9ICRleHBvcnQ7XG5cblx0Ly8gNy4xLjQgVG9JbnRlZ2VyXG5cdHZhciBjZWlsID0gTWF0aC5jZWlsO1xuXHR2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXHR2YXIgX3RvSW50ZWdlciA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xuXHR9O1xuXG5cdC8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5cdHZhciBfZGVmaW5lZCA9IGZ1bmN0aW9uIChpdCkge1xuXHQgIGlmIChpdCA9PSB1bmRlZmluZWQpIHsgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpOyB9XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG5cdC8vIHRydWUgIC0+IFN0cmluZyNhdFxuXHQvLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcblx0dmFyIF9zdHJpbmdBdCA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcblx0ICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuXHQgICAgdmFyIHMgPSBTdHJpbmcoX2RlZmluZWQodGhhdCkpO1xuXHQgICAgdmFyIGkgPSBfdG9JbnRlZ2VyKHBvcyk7XG5cdCAgICB2YXIgbCA9IHMubGVuZ3RoO1xuXHQgICAgdmFyIGEsIGI7XG5cdCAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSB7IHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDsgfVxuXHQgICAgYSA9IHMuY2hhckNvZGVBdChpKTtcblx0ICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG5cdCAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG5cdCAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuXHQgIH07XG5cdH07XG5cblx0dmFyICRhdCA9IF9zdHJpbmdBdChmYWxzZSk7XG5cdF9leHBvcnQoX2V4cG9ydC5QLCAnU3RyaW5nJywge1xuXHQgIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuXHQgIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcblx0ICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcblx0ICB9XG5cdH0pO1xuXG5cdHZhciBjb2RlUG9pbnRBdCA9IF9jb3JlLlN0cmluZy5jb2RlUG9pbnRBdDtcblxuXHR2YXIgbWF4ID0gTWF0aC5tYXg7XG5cdHZhciBtaW4gPSBNYXRoLm1pbjtcblx0dmFyIF90b0Fic29sdXRlSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuXHQgIGluZGV4ID0gX3RvSW50ZWdlcihpbmRleCk7XG5cdCAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG5cdH07XG5cblx0dmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cdHZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG5cdC8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cblx0X2V4cG9ydChfZXhwb3J0LlMgKyBfZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG5cdCAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcblx0ICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHtcblx0ICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblx0IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblx0ICAgIHZhciByZXMgPSBbXTtcblx0ICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcblx0ICAgIHZhciBpID0gMDtcblx0ICAgIHZhciBjb2RlO1xuXHQgICAgd2hpbGUgKGFMZW4gPiBpKSB7XG5cdCAgICAgIGNvZGUgPSArYXJndW1lbnRzJDFbaSsrXTtcblx0ICAgICAgaWYgKF90b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB7IHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpOyB9XG5cdCAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG5cdCAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcblx0ICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG5cdCAgICAgICk7XG5cdCAgICB9IHJldHVybiByZXMuam9pbignJyk7XG5cdCAgfVxuXHR9KTtcblxuXHR2YXIgZnJvbUNvZGVQb2ludCA9IF9jb3JlLlN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG5cdC8vIFRoaXMgaXMgYSBnZW5lcmF0ZWQgZmlsZS4gRG8gbm90IGVkaXQuXG5cdHZhciBTcGFjZV9TZXBhcmF0b3IgPSAvW1xcdTE2ODBcXHUyMDAwLVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBdLztcblx0dmFyIElEX1N0YXJ0ID0gL1tcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4NjAtXFx1MDg2QVxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MDlGQ1xcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENTQtXFx1MEQ1NlxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVFLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkVcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRUFcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFRlxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRVxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMkQtXFx1REY0QVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4My1cXHVEREIyXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMkJcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERURFXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0RcXHVERjUwXFx1REY1RC1cXHVERjYxXXxcXHVEODA1W1xcdURDMDAtXFx1REMzNFxcdURDNDctXFx1REM0QVxcdURDODAtXFx1RENBRlxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERBRVxcdURERDgtXFx1REREQlxcdURFMDAtXFx1REUyRlxcdURFNDRcXHVERTgwLVxcdURFQUFcXHVERjAwLVxcdURGMTldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0RGXFx1RENGRlxcdURFMDBcXHVERTBCLVxcdURFMzJcXHVERTNBXFx1REU1MFxcdURFNUMtXFx1REU4M1xcdURFODYtXFx1REU4OVxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMkVcXHVEQzQwXFx1REM3Mi1cXHVEQzhGXFx1REQwMC1cXHVERDA2XFx1REQwOFxcdUREMDlcXHVERDBCLVxcdUREMzBcXHVERDQ2XXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REYwMC1cXHVERjQ0XFx1REY1MFxcdURGOTMtXFx1REY5RlxcdURGRTBcXHVERkUxXXxcXHVEODIxW1xcdURDMDAtXFx1REZFQ118XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMC1cXHVERDFFXFx1REQ3MC1cXHVERUZCXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OV18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdUREMDAtXFx1REQ0M118XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMVxcdURFQjAtXFx1REZGRl18XFx1RDg3QVtcXHVEQzAwLVxcdURGRTBdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXS87XG5cdHZhciBJRF9Db250aW51ZSA9IC9bXFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzMDAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4My1cXHUwNDg3XFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1OTEtXFx1MDVCRFxcdTA1QkZcXHUwNUMxXFx1MDVDMlxcdTA1QzRcXHUwNUM1XFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MTAtXFx1MDYxQVxcdTA2MjAtXFx1MDY2OVxcdTA2NkUtXFx1MDZEM1xcdTA2RDUtXFx1MDZEQ1xcdTA2REYtXFx1MDZFOFxcdTA2RUEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwLVxcdTA3NEFcXHUwNzRELVxcdTA3QjFcXHUwN0MwLVxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODJEXFx1MDg0MC1cXHUwODVCXFx1MDg2MC1cXHUwODZBXFx1MDhBMC1cXHUwOEI0XFx1MDhCNi1cXHUwOEJEXFx1MDhENC1cXHUwOEUxXFx1MDhFMy1cXHUwOTYzXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MS1cXHUwOTgzXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCQy1cXHUwOUM0XFx1MDlDN1xcdTA5QzhcXHUwOUNCLVxcdTA5Q0VcXHUwOUQ3XFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTNcXHUwOUU2LVxcdTA5RjFcXHUwOUZDXFx1MEEwMS1cXHUwQTAzXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTNDXFx1MEEzRS1cXHUwQTQyXFx1MEE0N1xcdTBBNDhcXHUwQTRCLVxcdTBBNERcXHUwQTUxXFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNjYtXFx1MEE3NVxcdTBBODEtXFx1MEE4M1xcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCQy1cXHUwQUM1XFx1MEFDNy1cXHUwQUM5XFx1MEFDQi1cXHUwQUNEXFx1MEFEMFxcdTBBRTAtXFx1MEFFM1xcdTBBRTYtXFx1MEFFRlxcdTBBRjktXFx1MEFGRlxcdTBCMDEtXFx1MEIwM1xcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNDLVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEItXFx1MEI0RFxcdTBCNTZcXHUwQjU3XFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjNcXHUwQjY2LVxcdTBCNkZcXHUwQjcxXFx1MEI4MlxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJCRS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNEXFx1MEJEMFxcdTBCRDdcXHUwQkU2LVxcdTBCRUZcXHUwQzAwLVxcdTBDMDNcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNELVxcdTBDNDRcXHUwQzQ2LVxcdTBDNDhcXHUwQzRBLVxcdTBDNERcXHUwQzU1XFx1MEM1NlxcdTBDNTgtXFx1MEM1QVxcdTBDNjAtXFx1MEM2M1xcdTBDNjYtXFx1MEM2RlxcdTBDODAtXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkMtXFx1MENDNFxcdTBDQzYtXFx1MENDOFxcdTBDQ0EtXFx1MENDRFxcdTBDRDVcXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFM1xcdTBDRTYtXFx1MENFRlxcdTBDRjFcXHUwQ0YyXFx1MEQwMC1cXHUwRDAzXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDQ0XFx1MEQ0Ni1cXHUwRDQ4XFx1MEQ0QS1cXHUwRDRFXFx1MEQ1NC1cXHUwRDU3XFx1MEQ1Ri1cXHUwRDYzXFx1MEQ2Ni1cXHUwRDZGXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4MlxcdTBEODNcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREU2LVxcdTBERUZcXHUwREYyXFx1MERGM1xcdTBFMDEtXFx1MEUzQVxcdTBFNDAtXFx1MEU0RVxcdTBFNTAtXFx1MEU1OVxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUI5XFx1MEVCQi1cXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFQzgtXFx1MEVDRFxcdTBFRDAtXFx1MEVEOVxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjE4XFx1MEYxOVxcdTBGMjAtXFx1MEYyOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGM0UtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGNzEtXFx1MEY4NFxcdTBGODYtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQzZcXHUxMDAwLVxcdTEwNDlcXHUxMDUwLVxcdTEwOURcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM1RC1cXHUxMzVGXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzE0XFx1MTcyMC1cXHUxNzM0XFx1MTc0MC1cXHUxNzUzXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc3MlxcdTE3NzNcXHUxNzgwLVxcdTE3RDNcXHUxN0Q3XFx1MTdEQ1xcdTE3RERcXHUxN0UwLVxcdTE3RTlcXHUxODBCLVxcdTE4MERcXHUxODEwLVxcdTE4MTlcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTIwLVxcdTE5MkJcXHUxOTMwLVxcdTE5M0JcXHUxOTQ2LVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxOUQwLVxcdTE5RDlcXHUxQTAwLVxcdTFBMUJcXHUxQTIwLVxcdTFBNUVcXHUxQTYwLVxcdTFBN0NcXHUxQTdGLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUE3XFx1MUFCMC1cXHUxQUJEXFx1MUIwMC1cXHUxQjRCXFx1MUI1MC1cXHUxQjU5XFx1MUI2Qi1cXHUxQjczXFx1MUI4MC1cXHUxQkYzXFx1MUMwMC1cXHUxQzM3XFx1MUM0MC1cXHUxQzQ5XFx1MUM0RC1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUNEMC1cXHUxQ0QyXFx1MUNENC1cXHUxQ0Y5XFx1MUQwMC1cXHUxREY5XFx1MURGQi1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwM0ZcXHUyMDQwXFx1MjA1NFxcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjBEMC1cXHUyMERDXFx1MjBFMVxcdTIwRTUtXFx1MjBGMFxcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDdGLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyREUwLVxcdTJERkZcXHUyRTJGXFx1MzAwNS1cXHUzMDA3XFx1MzAyMS1cXHUzMDJGXFx1MzAzMS1cXHUzMDM1XFx1MzAzOC1cXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5OVxcdTMwOUFcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkVcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRUFcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MkJcXHVBNjQwLVxcdUE2NkZcXHVBNjc0LVxcdUE2N0RcXHVBNjdGLVxcdUE2RjFcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QUVcXHVBN0IwLVxcdUE3QjdcXHVBN0Y3LVxcdUE4MjdcXHVBODQwLVxcdUE4NzNcXHVBODgwLVxcdUE4QzVcXHVBOEQwLVxcdUE4RDlcXHVBOEUwLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MDAtXFx1QTkyRFxcdUE5MzAtXFx1QTk1M1xcdUE5NjAtXFx1QTk3Q1xcdUE5ODAtXFx1QTlDMFxcdUE5Q0YtXFx1QTlEOVxcdUE5RTAtXFx1QTlGRVxcdUFBMDAtXFx1QUEzNlxcdUFBNDAtXFx1QUE0RFxcdUFBNTAtXFx1QUE1OVxcdUFBNjAtXFx1QUE3NlxcdUFBN0EtXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFRlxcdUFBRjItXFx1QUFGNlxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFQVxcdUFCRUNcXHVBQkVEXFx1QUJGMC1cXHVBQkY5XFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRC1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTAwLVxcdUZFMEZcXHVGRTIwLVxcdUZFMkZcXHVGRTMzXFx1RkUzNFxcdUZFNEQtXFx1RkU0RlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMTAtXFx1RkYxOVxcdUZGMjEtXFx1RkYzQVxcdUZGM0ZcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERDQwLVxcdURENzRcXHVEREZEXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REVFMFxcdURGMDAtXFx1REYxRlxcdURGMkQtXFx1REY0QVxcdURGNTAtXFx1REY3QVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0EwLVxcdURDQTlcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwLVxcdURFMDNcXHVERTA1XFx1REUwNlxcdURFMEMtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFMzgtXFx1REUzQVxcdURFM0ZcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTZcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXXxcXHVEODA0W1xcdURDMDAtXFx1REM0NlxcdURDNjYtXFx1REM2RlxcdURDN0YtXFx1RENCQVxcdURDRDAtXFx1RENFOFxcdURDRjAtXFx1RENGOVxcdUREMDAtXFx1REQzNFxcdUREMzYtXFx1REQzRlxcdURENTAtXFx1REQ3M1xcdURENzZcXHVERDgwLVxcdUREQzRcXHVERENBLVxcdUREQ0NcXHVEREQwLVxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTM3XFx1REUzRVxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFRUFcXHVERUYwLVxcdURFRjlcXHVERjAwLVxcdURGMDNcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzQy1cXHVERjQ0XFx1REY0N1xcdURGNDhcXHVERjRCLVxcdURGNERcXHVERjUwXFx1REY1N1xcdURGNUQtXFx1REY2M1xcdURGNjYtXFx1REY2Q1xcdURGNzAtXFx1REY3NF18XFx1RDgwNVtcXHVEQzAwLVxcdURDNEFcXHVEQzUwLVxcdURDNTlcXHVEQzgwLVxcdURDQzVcXHVEQ0M3XFx1RENEMC1cXHVEQ0Q5XFx1REQ4MC1cXHVEREI1XFx1RERCOC1cXHVEREMwXFx1REREOC1cXHVEREREXFx1REUwMC1cXHVERTQwXFx1REU0NFxcdURFNTAtXFx1REU1OVxcdURFODAtXFx1REVCN1xcdURFQzAtXFx1REVDOVxcdURGMDAtXFx1REYxOVxcdURGMUQtXFx1REYyQlxcdURGMzAtXFx1REYzOV18XFx1RDgwNltcXHVEQ0EwLVxcdURDRTlcXHVEQ0ZGXFx1REUwMC1cXHVERTNFXFx1REU0N1xcdURFNTAtXFx1REU4M1xcdURFODYtXFx1REU5OVxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMzZcXHVEQzM4LVxcdURDNDBcXHVEQzUwLVxcdURDNTlcXHVEQzcyLVxcdURDOEZcXHVEQzkyLVxcdURDQTdcXHVEQ0E5LVxcdURDQjZcXHVERDAwLVxcdUREMDZcXHVERDA4XFx1REQwOVxcdUREMEItXFx1REQzNlxcdUREM0FcXHVERDNDXFx1REQzRFxcdUREM0YtXFx1REQ0N1xcdURENTAtXFx1REQ1OV18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4MUMtXFx1RDgyMFxcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3MlxcdUQ4NzQtXFx1RDg3OV1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REU2MC1cXHVERTY5XFx1REVEMC1cXHVERUVEXFx1REVGMC1cXHVERUY0XFx1REYwMC1cXHVERjM2XFx1REY0MC1cXHVERjQzXFx1REY1MC1cXHVERjU5XFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTAtXFx1REY3RVxcdURGOEYtXFx1REY5RlxcdURGRTBcXHVERkUxXXxcXHVEODIxW1xcdURDMDAtXFx1REZFQ118XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMC1cXHVERDFFXFx1REQ3MC1cXHVERUZCXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OVxcdURDOURcXHVEQzlFXXxcXHVEODM0W1xcdURENjUtXFx1REQ2OVxcdURENkQtXFx1REQ3MlxcdUREN0ItXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRFxcdURFNDItXFx1REU0NF18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXFx1REZDRS1cXHVERkZGXXxcXHVEODM2W1xcdURFMDAtXFx1REUzNlxcdURFM0ItXFx1REU2Q1xcdURFNzVcXHVERTg0XFx1REU5Qi1cXHVERTlGXFx1REVBMS1cXHVERUFGXXxcXHVEODM4W1xcdURDMDAtXFx1REMwNlxcdURDMDgtXFx1REMxOFxcdURDMUItXFx1REMyMVxcdURDMjNcXHVEQzI0XFx1REMyNi1cXHVEQzJBXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdURDRDAtXFx1RENENlxcdUREMDAtXFx1REQ0QVxcdURENTAtXFx1REQ1OV18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMVxcdURFQjAtXFx1REZGRl18XFx1RDg3QVtcXHVEQzAwLVxcdURGRTBdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXXxcXHVEQjQwW1xcdUREMDAtXFx1RERFRl0vO1xuXG5cdHZhciB1bmljb2RlID0ge1xuXHRcdFNwYWNlX1NlcGFyYXRvcjogU3BhY2VfU2VwYXJhdG9yLFxuXHRcdElEX1N0YXJ0OiBJRF9TdGFydCxcblx0XHRJRF9Db250aW51ZTogSURfQ29udGludWVcblx0fTtcblxuXHR2YXIgdXRpbCA9IHtcblx0ICAgIGlzU3BhY2VTZXBhcmF0b3I6IGZ1bmN0aW9uIGlzU3BhY2VTZXBhcmF0b3IgKGMpIHtcblx0ICAgICAgICByZXR1cm4gdW5pY29kZS5TcGFjZV9TZXBhcmF0b3IudGVzdChjKVxuXHQgICAgfSxcblxuXHQgICAgaXNJZFN0YXJ0Q2hhcjogZnVuY3Rpb24gaXNJZFN0YXJ0Q2hhciAoYykge1xuXHQgICAgICAgIHJldHVybiAoXG5cdCAgICAgICAgICAgIChjID49ICdhJyAmJiBjIDw9ICd6JykgfHxcblx0ICAgICAgICAoYyA+PSAnQScgJiYgYyA8PSAnWicpIHx8XG5cdCAgICAgICAgKGMgPT09ICckJykgfHwgKGMgPT09ICdfJykgfHxcblx0ICAgICAgICB1bmljb2RlLklEX1N0YXJ0LnRlc3QoYylcblx0ICAgICAgICApXG5cdCAgICB9LFxuXG5cdCAgICBpc0lkQ29udGludWVDaGFyOiBmdW5jdGlvbiBpc0lkQ29udGludWVDaGFyIChjKSB7XG5cdCAgICAgICAgcmV0dXJuIChcblx0ICAgICAgICAgICAgKGMgPj0gJ2EnICYmIGMgPD0gJ3onKSB8fFxuXHQgICAgICAgIChjID49ICdBJyAmJiBjIDw9ICdaJykgfHxcblx0ICAgICAgICAoYyA+PSAnMCcgJiYgYyA8PSAnOScpIHx8XG5cdCAgICAgICAgKGMgPT09ICckJykgfHwgKGMgPT09ICdfJykgfHxcblx0ICAgICAgICAoYyA9PT0gJ1xcdTIwMEMnKSB8fCAoYyA9PT0gJ1xcdTIwMEQnKSB8fFxuXHQgICAgICAgIHVuaWNvZGUuSURfQ29udGludWUudGVzdChjKVxuXHQgICAgICAgIClcblx0ICAgIH0sXG5cblx0ICAgIGlzRGlnaXQ6IGZ1bmN0aW9uIGlzRGlnaXQgKGMpIHtcblx0ICAgICAgICByZXR1cm4gL1swLTldLy50ZXN0KGMpXG5cdCAgICB9LFxuXG5cdCAgICBpc0hleERpZ2l0OiBmdW5jdGlvbiBpc0hleERpZ2l0IChjKSB7XG5cdCAgICAgICAgcmV0dXJuIC9bMC05QS1GYS1mXS8udGVzdChjKVxuXHQgICAgfSxcblx0fTtcblxuXHR2YXIgc291cmNlO1xuXHR2YXIgcGFyc2VTdGF0ZTtcblx0dmFyIHN0YWNrO1xuXHR2YXIgcG9zO1xuXHR2YXIgbGluZTtcblx0dmFyIGNvbHVtbjtcblx0dmFyIHRva2VuO1xuXHR2YXIga2V5O1xuXHR2YXIgcm9vdDtcblxuXHR2YXIgcGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAodGV4dCwgcmV2aXZlcikge1xuXHQgICAgc291cmNlID0gU3RyaW5nKHRleHQpO1xuXHQgICAgcGFyc2VTdGF0ZSA9ICdzdGFydCc7XG5cdCAgICBzdGFjayA9IFtdO1xuXHQgICAgcG9zID0gMDtcblx0ICAgIGxpbmUgPSAxO1xuXHQgICAgY29sdW1uID0gMDtcblx0ICAgIHRva2VuID0gdW5kZWZpbmVkO1xuXHQgICAga2V5ID0gdW5kZWZpbmVkO1xuXHQgICAgcm9vdCA9IHVuZGVmaW5lZDtcblxuXHQgICAgZG8ge1xuXHQgICAgICAgIHRva2VuID0gbGV4KCk7XG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUuXG5cdCAgICAgICAgLy8gaWYgKCFwYXJzZVN0YXRlc1twYXJzZVN0YXRlXSkge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkUGFyc2VTdGF0ZSgpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgcGFyc2VTdGF0ZXNbcGFyc2VTdGF0ZV0oKTtcblx0ICAgIH0gd2hpbGUgKHRva2VuLnR5cGUgIT09ICdlb2YnKVxuXG5cdCAgICBpZiAodHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICByZXR1cm4gaW50ZXJuYWxpemUoeycnOiByb290fSwgJycsIHJldml2ZXIpXG5cdCAgICB9XG5cblx0ICAgIHJldHVybiByb290XG5cdH07XG5cblx0ZnVuY3Rpb24gaW50ZXJuYWxpemUgKGhvbGRlciwgbmFtZSwgcmV2aXZlcikge1xuXHQgICAgdmFyIHZhbHVlID0gaG9sZGVyW25hbWVdO1xuXHQgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuXHQgICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBpbnRlcm5hbGl6ZSh2YWx1ZSwga2V5LCByZXZpdmVyKTtcblx0ICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtrZXldO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFsdWVba2V5XSA9IHJlcGxhY2VtZW50O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gcmV2aXZlci5jYWxsKGhvbGRlciwgbmFtZSwgdmFsdWUpXG5cdH1cblxuXHR2YXIgbGV4U3RhdGU7XG5cdHZhciBidWZmZXI7XG5cdHZhciBkb3VibGVRdW90ZTtcblx0dmFyIHNpZ247XG5cdHZhciBjO1xuXG5cdGZ1bmN0aW9uIGxleCAoKSB7XG5cdCAgICBsZXhTdGF0ZSA9ICdkZWZhdWx0Jztcblx0ICAgIGJ1ZmZlciA9ICcnO1xuXHQgICAgZG91YmxlUXVvdGUgPSBmYWxzZTtcblx0ICAgIHNpZ24gPSAxO1xuXG5cdCAgICBmb3IgKDs7KSB7XG5cdCAgICAgICAgYyA9IHBlZWsoKTtcblxuXHQgICAgICAgIC8vIFRoaXMgY29kZSBpcyB1bnJlYWNoYWJsZS5cblx0ICAgICAgICAvLyBpZiAoIWxleFN0YXRlc1tsZXhTdGF0ZV0pIHtcblx0ICAgICAgICAvLyAgICAgdGhyb3cgaW52YWxpZExleFN0YXRlKGxleFN0YXRlKVxuXHQgICAgICAgIC8vIH1cblxuXHQgICAgICAgIHZhciB0b2tlbiA9IGxleFN0YXRlc1tsZXhTdGF0ZV0oKTtcblx0ICAgICAgICBpZiAodG9rZW4pIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRva2VuXG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gcGVlayAoKSB7XG5cdCAgICBpZiAoc291cmNlW3Bvc10pIHtcblx0ICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQoc291cmNlLmNvZGVQb2ludEF0KHBvcykpXG5cdCAgICB9XG5cdH1cblxuXHRmdW5jdGlvbiByZWFkICgpIHtcblx0ICAgIHZhciBjID0gcGVlaygpO1xuXG5cdCAgICBpZiAoYyA9PT0gJ1xcbicpIHtcblx0ICAgICAgICBsaW5lKys7XG5cdCAgICAgICAgY29sdW1uID0gMDtcblx0ICAgIH0gZWxzZSBpZiAoYykge1xuXHQgICAgICAgIGNvbHVtbiArPSBjLmxlbmd0aDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgY29sdW1uKys7XG5cdCAgICB9XG5cblx0ICAgIGlmIChjKSB7XG5cdCAgICAgICAgcG9zICs9IGMubGVuZ3RoO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gY1xuXHR9XG5cblx0dmFyIGxleFN0YXRlcyA9IHtcblx0ICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIGRlZmF1bHQkMSAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnXFx0Jzpcblx0ICAgICAgICBjYXNlICdcXHYnOlxuXHQgICAgICAgIGNhc2UgJ1xcZic6XG5cdCAgICAgICAgY2FzZSAnICc6XG5cdCAgICAgICAgY2FzZSAnXFx1MDBBMCc6XG5cdCAgICAgICAgY2FzZSAnXFx1RkVGRic6XG5cdCAgICAgICAgY2FzZSAnXFxuJzpcblx0ICAgICAgICBjYXNlICdcXHInOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMjgnOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMjknOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnLyc6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnY29tbWVudCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdlb2YnKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh1dGlsLmlzU3BhY2VTZXBhcmF0b3IoYykpIHtcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUuXG5cdCAgICAgICAgLy8gaWYgKCFsZXhTdGF0ZXNbcGFyc2VTdGF0ZV0pIHtcblx0ICAgICAgICAvLyAgICAgdGhyb3cgaW52YWxpZExleFN0YXRlKHBhcnNlU3RhdGUpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgcmV0dXJuIGxleFN0YXRlc1twYXJzZVN0YXRlXSgpXG5cdCAgICB9LFxuXG5cdCAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50ICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcqJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdtdWx0aUxpbmVDb21tZW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcvJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdzaW5nbGVMaW5lQ29tbWVudCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIG11bHRpTGluZUNvbW1lbnQ6IGZ1bmN0aW9uIG11bHRpTGluZUNvbW1lbnQgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJyonOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ211bHRpTGluZUNvbW1lbnRBc3Rlcmlzayc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZWFkKCk7XG5cdCAgICB9LFxuXG5cdCAgICBtdWx0aUxpbmVDb21tZW50QXN0ZXJpc2s6IGZ1bmN0aW9uIG11bHRpTGluZUNvbW1lbnRBc3RlcmlzayAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnKic6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICcvJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWZhdWx0Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlIHVuZGVmaW5lZDpcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICBsZXhTdGF0ZSA9ICdtdWx0aUxpbmVDb21tZW50Jztcblx0ICAgIH0sXG5cblx0ICAgIHNpbmdsZUxpbmVDb21tZW50OiBmdW5jdGlvbiBzaW5nbGVMaW5lQ29tbWVudCAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnXFxuJzpcblx0ICAgICAgICBjYXNlICdcXHInOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMjgnOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMjknOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlZmF1bHQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignZW9mJylcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZWFkKCk7XG5cdCAgICB9LFxuXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJ3snOlxuXHQgICAgICAgIGNhc2UgJ1snOlxuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ3B1bmN0dWF0b3InLCByZWFkKCkpXG5cblx0ICAgICAgICBjYXNlICduJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsaXRlcmFsKCd1bGwnKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudWxsJywgbnVsbClcblxuXHQgICAgICAgIGNhc2UgJ3QnOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxpdGVyYWwoJ3J1ZScpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ2Jvb2xlYW4nLCB0cnVlKVxuXG5cdCAgICAgICAgY2FzZSAnZic6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbCgnYWxzZScpO1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ2Jvb2xlYW4nLCBmYWxzZSlcblxuXHQgICAgICAgIGNhc2UgJy0nOlxuXHQgICAgICAgIGNhc2UgJysnOlxuXHQgICAgICAgICAgICBpZiAocmVhZCgpID09PSAnLScpIHtcblx0ICAgICAgICAgICAgICAgIHNpZ24gPSAtMTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ3NpZ24nO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJy4nOlxuXHQgICAgICAgICAgICBidWZmZXIgPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxQb2ludExlYWRpbmcnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJzAnOlxuXHQgICAgICAgICAgICBidWZmZXIgPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ3plcm8nO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJzEnOlxuXHQgICAgICAgIGNhc2UgJzInOlxuXHQgICAgICAgIGNhc2UgJzMnOlxuXHQgICAgICAgIGNhc2UgJzQnOlxuXHQgICAgICAgIGNhc2UgJzUnOlxuXHQgICAgICAgIGNhc2UgJzYnOlxuXHQgICAgICAgIGNhc2UgJzcnOlxuXHQgICAgICAgIGNhc2UgJzgnOlxuXHQgICAgICAgIGNhc2UgJzknOlxuXHQgICAgICAgICAgICBidWZmZXIgPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxJbnRlZ2VyJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdJJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsaXRlcmFsKCduZmluaXR5Jyk7XG5cdCAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIEluZmluaXR5KVxuXG5cdCAgICAgICAgY2FzZSAnTic6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbCgnYU4nKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgTmFOKVxuXG5cdCAgICAgICAgY2FzZSAnXCInOlxuXHQgICAgICAgIGNhc2UgXCInXCI6XG5cdCAgICAgICAgICAgIGRvdWJsZVF1b3RlID0gKHJlYWQoKSA9PT0gJ1wiJyk7XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdzdHJpbmcnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBpZGVudGlmaWVyTmFtZVN0YXJ0RXNjYXBlOiBmdW5jdGlvbiBpZGVudGlmaWVyTmFtZVN0YXJ0RXNjYXBlICgpIHtcblx0ICAgICAgICBpZiAoYyAhPT0gJ3UnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgdmFyIHUgPSB1bmljb2RlRXNjYXBlKCk7XG5cdCAgICAgICAgc3dpdGNoICh1KSB7XG5cdCAgICAgICAgY2FzZSAnJCc6XG5cdCAgICAgICAgY2FzZSAnXyc6XG5cdCAgICAgICAgICAgIGJyZWFrXG5cblx0ICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICBpZiAoIXV0aWwuaXNJZFN0YXJ0Q2hhcih1KSkge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgaW52YWxpZElkZW50aWZpZXIoKVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgYnJlYWtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBidWZmZXIgKz0gdTtcblx0ICAgICAgICBsZXhTdGF0ZSA9ICdpZGVudGlmaWVyTmFtZSc7XG5cdCAgICB9LFxuXG5cdCAgICBpZGVudGlmaWVyTmFtZTogZnVuY3Rpb24gaWRlbnRpZmllck5hbWUgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJyQnOlxuXHQgICAgICAgIGNhc2UgJ18nOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMEMnOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMEQnOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ1xcXFwnOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2lkZW50aWZpZXJOYW1lRXNjYXBlJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWwuaXNJZENvbnRpbnVlQ2hhcihjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ2lkZW50aWZpZXInLCBidWZmZXIpXG5cdCAgICB9LFxuXG5cdCAgICBpZGVudGlmaWVyTmFtZUVzY2FwZTogZnVuY3Rpb24gaWRlbnRpZmllck5hbWVFc2NhcGUgKCkge1xuXHQgICAgICAgIGlmIChjICE9PSAndScpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICB2YXIgdSA9IHVuaWNvZGVFc2NhcGUoKTtcblx0ICAgICAgICBzd2l0Y2ggKHUpIHtcblx0ICAgICAgICBjYXNlICckJzpcblx0ICAgICAgICBjYXNlICdfJzpcblx0ICAgICAgICBjYXNlICdcXHUyMDBDJzpcblx0ICAgICAgICBjYXNlICdcXHUyMDBEJzpcblx0ICAgICAgICAgICAgYnJlYWtcblxuXHQgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgIGlmICghdXRpbC5pc0lkQ29udGludWVDaGFyKHUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBpbnZhbGlkSWRlbnRpZmllcigpXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBicmVha1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGJ1ZmZlciArPSB1O1xuXHQgICAgICAgIGxleFN0YXRlID0gJ2lkZW50aWZpZXJOYW1lJztcblx0ICAgIH0sXG5cblx0ICAgIHNpZ246IGZ1bmN0aW9uIHNpZ24kMSAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnLic6XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbFBvaW50TGVhZGluZyc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnMCc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnemVybyc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXG5cdCAgICAgICAgY2FzZSAnMSc6XG5cdCAgICAgICAgY2FzZSAnMic6XG5cdCAgICAgICAgY2FzZSAnMyc6XG5cdCAgICAgICAgY2FzZSAnNCc6XG5cdCAgICAgICAgY2FzZSAnNSc6XG5cdCAgICAgICAgY2FzZSAnNic6XG5cdCAgICAgICAgY2FzZSAnNyc6XG5cdCAgICAgICAgY2FzZSAnOCc6XG5cdCAgICAgICAgY2FzZSAnOSc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciA9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEludGVnZXInO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ0knOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGxpdGVyYWwoJ25maW5pdHknKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgc2lnbiAqIEluZmluaXR5KVxuXG5cdCAgICAgICAgY2FzZSAnTic6XG5cdCAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgbGl0ZXJhbCgnYU4nKTtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgTmFOKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIHplcm86IGZ1bmN0aW9uIHplcm8gKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJy4nOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsUG9pbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ2UnOlxuXHQgICAgICAgIGNhc2UgJ0UnOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRXhwb25lbnQnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ3gnOlxuXHQgICAgICAgIGNhc2UgJ1gnOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdoZXhhZGVjaW1hbCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBuZXdUb2tlbignbnVtZXJpYycsIHNpZ24gKiAwKVxuXHQgICAgfSxcblxuXHQgICAgZGVjaW1hbEludGVnZXI6IGZ1bmN0aW9uIGRlY2ltYWxJbnRlZ2VyICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcuJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbFBvaW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdlJzpcblx0ICAgICAgICBjYXNlICdFJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEV4cG9uZW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBzaWduICogTnVtYmVyKGJ1ZmZlcikpXG5cdCAgICB9LFxuXG5cdCAgICBkZWNpbWFsUG9pbnRMZWFkaW5nOiBmdW5jdGlvbiBkZWNpbWFsUG9pbnRMZWFkaW5nICgpIHtcblx0ICAgICAgICBpZiAodXRpbC5pc0RpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxGcmFjdGlvbic7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGRlY2ltYWxQb2ludDogZnVuY3Rpb24gZGVjaW1hbFBvaW50ICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICdlJzpcblx0ICAgICAgICBjYXNlICdFJzpcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnZGVjaW1hbEV4cG9uZW50Jztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRnJhY3Rpb24nO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBzaWduICogTnVtYmVyKGJ1ZmZlcikpXG5cdCAgICB9LFxuXG5cdCAgICBkZWNpbWFsRnJhY3Rpb246IGZ1bmN0aW9uIGRlY2ltYWxGcmFjdGlvbiAoKSB7XG5cdCAgICAgICAgc3dpdGNoIChjKSB7XG5cdCAgICAgICAgY2FzZSAnZSc6XG5cdCAgICAgICAgY2FzZSAnRSc6XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2RlY2ltYWxFeHBvbmVudCc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgc2lnbiAqIE51bWJlcihidWZmZXIpKVxuXHQgICAgfSxcblxuXHQgICAgZGVjaW1hbEV4cG9uZW50OiBmdW5jdGlvbiBkZWNpbWFsRXhwb25lbnQgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJysnOlxuXHQgICAgICAgIGNhc2UgJy0nOlxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRXhwb25lbnRTaWduJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRXhwb25lbnRJbnRlZ2VyJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgZGVjaW1hbEV4cG9uZW50U2lnbjogZnVuY3Rpb24gZGVjaW1hbEV4cG9uZW50U2lnbiAoKSB7XG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdkZWNpbWFsRXhwb25lbnRJbnRlZ2VyJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgZGVjaW1hbEV4cG9uZW50SW50ZWdlcjogZnVuY3Rpb24gZGVjaW1hbEV4cG9uZW50SW50ZWdlciAoKSB7XG5cdCAgICAgICAgaWYgKHV0aWwuaXNEaWdpdChjKSkge1xuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICByZXR1cm4gbmV3VG9rZW4oJ251bWVyaWMnLCBzaWduICogTnVtYmVyKGJ1ZmZlcikpXG5cdCAgICB9LFxuXG5cdCAgICBoZXhhZGVjaW1hbDogZnVuY3Rpb24gaGV4YWRlY2ltYWwgKCkge1xuXHQgICAgICAgIGlmICh1dGlsLmlzSGV4RGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnaGV4YWRlY2ltYWxJbnRlZ2VyJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfSxcblxuXHQgICAgaGV4YWRlY2ltYWxJbnRlZ2VyOiBmdW5jdGlvbiBoZXhhZGVjaW1hbEludGVnZXIgKCkge1xuXHQgICAgICAgIGlmICh1dGlsLmlzSGV4RGlnaXQoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdudW1lcmljJywgc2lnbiAqIE51bWJlcihidWZmZXIpKVxuXHQgICAgfSxcblxuXHQgICAgc3RyaW5nOiBmdW5jdGlvbiBzdHJpbmcgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJ1xcXFwnOlxuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgICAgIGJ1ZmZlciArPSBlc2NhcGUoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdcIic6XG5cdCAgICAgICAgICAgIGlmIChkb3VibGVRdW90ZSkge1xuXHQgICAgICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdzdHJpbmcnLCBidWZmZXIpXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgXCInXCI6XG5cdCAgICAgICAgICAgIGlmICghZG91YmxlUXVvdGUpIHtcblx0ICAgICAgICAgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbignc3RyaW5nJywgYnVmZmVyKVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdcXG4nOlxuXHQgICAgICAgIGNhc2UgJ1xccic6XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMjgnOlxuXHQgICAgICAgIGNhc2UgJ1xcdTIwMjknOlxuXHQgICAgICAgICAgICBzZXBhcmF0b3JDaGFyKGMpO1xuXHQgICAgICAgICAgICBicmVha1xuXG5cdCAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgfSxcblxuXHQgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0ICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICd7Jzpcblx0ICAgICAgICBjYXNlICdbJzpcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdwdW5jdHVhdG9yJywgcmVhZCgpKVxuXG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIHRoZSBkZWZhdWx0IGxleFN0YXRlIGhhbmRsZXMgZW9mLlxuXHQgICAgICAgIC8vIGNhc2UgdW5kZWZpbmVkOlxuXHQgICAgICAgIC8vICAgICByZXR1cm4gbmV3VG9rZW4oJ2VvZicpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgbGV4U3RhdGUgPSAndmFsdWUnO1xuXHQgICAgfSxcblxuXHQgICAgYmVmb3JlUHJvcGVydHlOYW1lOiBmdW5jdGlvbiBiZWZvcmVQcm9wZXJ0eU5hbWUgKCkge1xuXHQgICAgICAgIHN3aXRjaCAoYykge1xuXHQgICAgICAgIGNhc2UgJyQnOlxuXHQgICAgICAgIGNhc2UgJ18nOlxuXHQgICAgICAgICAgICBidWZmZXIgPSByZWFkKCk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ2lkZW50aWZpZXJOYW1lJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdcXFxcJzpcblx0ICAgICAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgICAgICBsZXhTdGF0ZSA9ICdpZGVudGlmaWVyTmFtZVN0YXJ0RXNjYXBlJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICd9Jzpcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdwdW5jdHVhdG9yJywgcmVhZCgpKVxuXG5cdCAgICAgICAgY2FzZSAnXCInOlxuXHQgICAgICAgIGNhc2UgXCInXCI6XG5cdCAgICAgICAgICAgIGRvdWJsZVF1b3RlID0gKHJlYWQoKSA9PT0gJ1wiJyk7XG5cdCAgICAgICAgICAgIGxleFN0YXRlID0gJ3N0cmluZyc7XG5cdCAgICAgICAgICAgIHJldHVyblxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh1dGlsLmlzSWRTdGFydENoYXIoYykpIHtcblx0ICAgICAgICAgICAgYnVmZmVyICs9IHJlYWQoKTtcblx0ICAgICAgICAgICAgbGV4U3RhdGUgPSAnaWRlbnRpZmllck5hbWUnO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXG5cdCAgICBhZnRlclByb3BlcnR5TmFtZTogZnVuY3Rpb24gYWZ0ZXJQcm9wZXJ0eU5hbWUgKCkge1xuXHQgICAgICAgIGlmIChjID09PSAnOicpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdwdW5jdHVhdG9yJywgcmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGJlZm9yZVByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGJlZm9yZVByb3BlcnR5VmFsdWUgKCkge1xuXHQgICAgICAgIGxleFN0YXRlID0gJ3ZhbHVlJztcblx0ICAgIH0sXG5cblx0ICAgIGFmdGVyUHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gYWZ0ZXJQcm9wZXJ0eVZhbHVlICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcsJzpcblx0ICAgICAgICBjYXNlICd9Jzpcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdwdW5jdHVhdG9yJywgcmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGJlZm9yZUFycmF5VmFsdWU6IGZ1bmN0aW9uIGJlZm9yZUFycmF5VmFsdWUgKCkge1xuXHQgICAgICAgIGlmIChjID09PSAnXScpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdwdW5jdHVhdG9yJywgcmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGxleFN0YXRlID0gJ3ZhbHVlJztcblx0ICAgIH0sXG5cblx0ICAgIGFmdGVyQXJyYXlWYWx1ZTogZnVuY3Rpb24gYWZ0ZXJBcnJheVZhbHVlICgpIHtcblx0ICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICBjYXNlICcsJzpcblx0ICAgICAgICBjYXNlICddJzpcblx0ICAgICAgICAgICAgcmV0dXJuIG5ld1Rva2VuKCdwdW5jdHVhdG9yJywgcmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH0sXG5cblx0ICAgIGVuZDogZnVuY3Rpb24gZW5kICgpIHtcblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBkZWZhdWx0IGxleFN0YXRlLlxuXHQgICAgICAgIC8vIGlmIChjID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAvLyAgICAgcmVhZCgpXG5cdCAgICAgICAgLy8gICAgIHJldHVybiBuZXdUb2tlbignZW9mJylcblx0ICAgICAgICAvLyB9XG5cblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICB9LFxuXHR9O1xuXG5cdGZ1bmN0aW9uIG5ld1Rva2VuICh0eXBlLCB2YWx1ZSkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICB0eXBlOiB0eXBlLFxuXHQgICAgICAgIHZhbHVlOiB2YWx1ZSxcblx0ICAgICAgICBsaW5lOiBsaW5lLFxuXHQgICAgICAgIGNvbHVtbjogY29sdW1uLFxuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gbGl0ZXJhbCAocykge1xuXHQgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuXHQgICAgICAgIHZhciBjID0gbGlzdFtpXTtcblxuXHQgICAgICAgIHZhciBwID0gcGVlaygpO1xuXG5cdCAgICAgICAgaWYgKHAgIT09IGMpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIGVzY2FwZSAoKSB7XG5cdCAgICB2YXIgYyA9IHBlZWsoKTtcblx0ICAgIHN3aXRjaCAoYykge1xuXHQgICAgY2FzZSAnYic6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiAnXFxiJ1xuXG5cdCAgICBjYXNlICdmJzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuICdcXGYnXG5cblx0ICAgIGNhc2UgJ24nOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gJ1xcbidcblxuXHQgICAgY2FzZSAncic6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiAnXFxyJ1xuXG5cdCAgICBjYXNlICd0Jzpcblx0ICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgcmV0dXJuICdcXHQnXG5cblx0ICAgIGNhc2UgJ3YnOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gJ1xcdidcblxuXHQgICAgY2FzZSAnMCc6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIGlmICh1dGlsLmlzRGlnaXQocGVlaygpKSkge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuICdcXDAnXG5cblx0ICAgIGNhc2UgJ3gnOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICByZXR1cm4gaGV4RXNjYXBlKClcblxuXHQgICAgY2FzZSAndSc6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiB1bmljb2RlRXNjYXBlKClcblxuXHQgICAgY2FzZSAnXFxuJzpcblx0ICAgIGNhc2UgJ1xcdTIwMjgnOlxuXHQgICAgY2FzZSAnXFx1MjAyOSc6XG5cdCAgICAgICAgcmVhZCgpO1xuXHQgICAgICAgIHJldHVybiAnJ1xuXG5cdCAgICBjYXNlICdcXHInOlxuXHQgICAgICAgIHJlYWQoKTtcblx0ICAgICAgICBpZiAocGVlaygpID09PSAnXFxuJykge1xuXHQgICAgICAgICAgICByZWFkKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuICcnXG5cblx0ICAgIGNhc2UgJzEnOlxuXHQgICAgY2FzZSAnMic6XG5cdCAgICBjYXNlICczJzpcblx0ICAgIGNhc2UgJzQnOlxuXHQgICAgY2FzZSAnNSc6XG5cdCAgICBjYXNlICc2Jzpcblx0ICAgIGNhc2UgJzcnOlxuXHQgICAgY2FzZSAnOCc6XG5cdCAgICBjYXNlICc5Jzpcblx0ICAgICAgICB0aHJvdyBpbnZhbGlkQ2hhcihyZWFkKCkpXG5cblx0ICAgIGNhc2UgdW5kZWZpbmVkOlxuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHJlYWQoKVxuXHR9XG5cblx0ZnVuY3Rpb24gaGV4RXNjYXBlICgpIHtcblx0ICAgIHZhciBidWZmZXIgPSAnJztcblx0ICAgIHZhciBjID0gcGVlaygpO1xuXG5cdCAgICBpZiAoIXV0aWwuaXNIZXhEaWdpdChjKSkge1xuXHQgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgIH1cblxuXHQgICAgYnVmZmVyICs9IHJlYWQoKTtcblxuXHQgICAgYyA9IHBlZWsoKTtcblx0ICAgIGlmICghdXRpbC5pc0hleERpZ2l0KGMpKSB7XG5cdCAgICAgICAgdGhyb3cgaW52YWxpZENoYXIocmVhZCgpKVxuXHQgICAgfVxuXG5cdCAgICBidWZmZXIgKz0gcmVhZCgpO1xuXG5cdCAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQoYnVmZmVyLCAxNikpXG5cdH1cblxuXHRmdW5jdGlvbiB1bmljb2RlRXNjYXBlICgpIHtcblx0ICAgIHZhciBidWZmZXIgPSAnJztcblx0ICAgIHZhciBjb3VudCA9IDQ7XG5cblx0ICAgIHdoaWxlIChjb3VudC0tID4gMCkge1xuXHQgICAgICAgIHZhciBjID0gcGVlaygpO1xuXHQgICAgICAgIGlmICghdXRpbC5pc0hleERpZ2l0KGMpKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRDaGFyKHJlYWQoKSlcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBidWZmZXIgKz0gcmVhZCgpO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQoYnVmZmVyLCAxNikpXG5cdH1cblxuXHR2YXIgcGFyc2VTdGF0ZXMgPSB7XG5cdCAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKCkge1xuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZW9mJykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRU9GKClcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBwdXNoKCk7XG5cdCAgICB9LFxuXG5cdCAgICBiZWZvcmVQcm9wZXJ0eU5hbWU6IGZ1bmN0aW9uIGJlZm9yZVByb3BlcnR5TmFtZSAoKSB7XG5cdCAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG5cdCAgICAgICAgY2FzZSAnaWRlbnRpZmllcic6XG5cdCAgICAgICAgY2FzZSAnc3RyaW5nJzpcblx0ICAgICAgICAgICAga2V5ID0gdG9rZW4udmFsdWU7XG5cdCAgICAgICAgICAgIHBhcnNlU3RhdGUgPSAnYWZ0ZXJQcm9wZXJ0eU5hbWUnO1xuXHQgICAgICAgICAgICByZXR1cm5cblxuXHQgICAgICAgIGNhc2UgJ3B1bmN0dWF0b3InOlxuXHQgICAgICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAgICAgLy8gaWYgKHRva2VuLnZhbHVlICE9PSAnfScpIHtcblx0ICAgICAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICAgICAgICAgIC8vIH1cblxuXHQgICAgICAgICAgICBwb3AoKTtcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICdlb2YnOlxuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRU9GKClcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgfSxcblxuXHQgICAgYWZ0ZXJQcm9wZXJ0eU5hbWU6IGZ1bmN0aW9uIGFmdGVyUHJvcGVydHlOYW1lICgpIHtcblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyBpZiAodG9rZW4udHlwZSAhPT0gJ3B1bmN0dWF0b3InIHx8IHRva2VuLnZhbHVlICE9PSAnOicpIHtcblx0ICAgICAgICAvLyAgICAgdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgICAgICAvLyB9XG5cblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2VvZicpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZEVPRigpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcGFyc2VTdGF0ZSA9ICdiZWZvcmVQcm9wZXJ0eVZhbHVlJztcblx0ICAgIH0sXG5cblx0ICAgIGJlZm9yZVByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGJlZm9yZVByb3BlcnR5VmFsdWUgKCkge1xuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZW9mJykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRU9GKClcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBwdXNoKCk7XG5cdCAgICB9LFxuXG5cdCAgICBiZWZvcmVBcnJheVZhbHVlOiBmdW5jdGlvbiBiZWZvcmVBcnJheVZhbHVlICgpIHtcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2VvZicpIHtcblx0ICAgICAgICAgICAgdGhyb3cgaW52YWxpZEVPRigpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdwdW5jdHVhdG9yJyAmJiB0b2tlbi52YWx1ZSA9PT0gJ10nKSB7XG5cdCAgICAgICAgICAgIHBvcCgpO1xuXHQgICAgICAgICAgICByZXR1cm5cblx0ICAgICAgICB9XG5cblx0ICAgICAgICBwdXNoKCk7XG5cdCAgICB9LFxuXG5cdCAgICBhZnRlclByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGFmdGVyUHJvcGVydHlWYWx1ZSAoKSB7XG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gaWYgKHRva2VuLnR5cGUgIT09ICdwdW5jdHVhdG9yJykge1xuXHQgICAgICAgIC8vICAgICB0aHJvdyBpbnZhbGlkVG9rZW4oKVxuXHQgICAgICAgIC8vIH1cblxuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnZW9mJykge1xuXHQgICAgICAgICAgICB0aHJvdyBpbnZhbGlkRU9GKClcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzd2l0Y2ggKHRva2VuLnZhbHVlKSB7XG5cdCAgICAgICAgY2FzZSAnLCc6XG5cdCAgICAgICAgICAgIHBhcnNlU3RhdGUgPSAnYmVmb3JlUHJvcGVydHlOYW1lJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICd9Jzpcblx0ICAgICAgICAgICAgcG9wKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgIH0sXG5cblx0ICAgIGFmdGVyQXJyYXlWYWx1ZTogZnVuY3Rpb24gYWZ0ZXJBcnJheVZhbHVlICgpIHtcblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyBpZiAodG9rZW4udHlwZSAhPT0gJ3B1bmN0dWF0b3InKSB7XG5cdCAgICAgICAgLy8gICAgIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdCAgICAgICAgICAgIHRocm93IGludmFsaWRFT0YoKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHN3aXRjaCAodG9rZW4udmFsdWUpIHtcblx0ICAgICAgICBjYXNlICcsJzpcblx0ICAgICAgICAgICAgcGFyc2VTdGF0ZSA9ICdiZWZvcmVBcnJheVZhbHVlJztcblx0ICAgICAgICAgICAgcmV0dXJuXG5cblx0ICAgICAgICBjYXNlICddJzpcblx0ICAgICAgICAgICAgcG9wKCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlIHNpbmNlIGl0J3MgaGFuZGxlZCBieSB0aGUgbGV4U3RhdGUuXG5cdCAgICAgICAgLy8gdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgIH0sXG5cblx0ICAgIGVuZDogZnVuY3Rpb24gZW5kICgpIHtcblx0ICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUgc2luY2UgaXQncyBoYW5kbGVkIGJ5IHRoZSBsZXhTdGF0ZS5cblx0ICAgICAgICAvLyBpZiAodG9rZW4udHlwZSAhPT0gJ2VvZicpIHtcblx0ICAgICAgICAvLyAgICAgdGhyb3cgaW52YWxpZFRva2VuKClcblx0ICAgICAgICAvLyB9XG5cdCAgICB9LFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHB1c2ggKCkge1xuXHQgICAgdmFyIHZhbHVlO1xuXG5cdCAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcblx0ICAgIGNhc2UgJ3B1bmN0dWF0b3InOlxuXHQgICAgICAgIHN3aXRjaCAodG9rZW4udmFsdWUpIHtcblx0ICAgICAgICBjYXNlICd7Jzpcblx0ICAgICAgICAgICAgdmFsdWUgPSB7fTtcblx0ICAgICAgICAgICAgYnJlYWtcblxuXHQgICAgICAgIGNhc2UgJ1snOlxuXHQgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuXHQgICAgICAgICAgICBicmVha1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGJyZWFrXG5cblx0ICAgIGNhc2UgJ251bGwnOlxuXHQgICAgY2FzZSAnYm9vbGVhbic6XG5cdCAgICBjYXNlICdudW1lcmljJzpcblx0ICAgIGNhc2UgJ3N0cmluZyc6XG5cdCAgICAgICAgdmFsdWUgPSB0b2tlbi52YWx1ZTtcblx0ICAgICAgICBicmVha1xuXG5cdCAgICAvLyBUaGlzIGNvZGUgaXMgdW5yZWFjaGFibGUuXG5cdCAgICAvLyBkZWZhdWx0OlxuXHQgICAgLy8gICAgIHRocm93IGludmFsaWRUb2tlbigpXG5cdCAgICB9XG5cblx0ICAgIGlmIChyb290ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICByb290ID0gdmFsdWU7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBwYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcblx0ICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG5cdCAgICAgICAgICAgIHBhcmVudC5wdXNoKHZhbHVlKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBwYXJlbnRba2V5XSA9IHZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuXHQgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2JlZm9yZUFycmF5VmFsdWUnO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHBhcnNlU3RhdGUgPSAnYmVmb3JlUHJvcGVydHlOYW1lJztcblx0ICAgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBjdXJyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cdCAgICAgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2VuZCc7XG5cdCAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG5cdCAgICAgICAgICAgIHBhcnNlU3RhdGUgPSAnYWZ0ZXJBcnJheVZhbHVlJztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBwYXJzZVN0YXRlID0gJ2FmdGVyUHJvcGVydHlWYWx1ZSc7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9XG5cblx0ZnVuY3Rpb24gcG9wICgpIHtcblx0ICAgIHN0YWNrLnBvcCgpO1xuXG5cdCAgICB2YXIgY3VycmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuXHQgICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuXHQgICAgICAgIHBhcnNlU3RhdGUgPSAnZW5kJztcblx0ICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50KSkge1xuXHQgICAgICAgIHBhcnNlU3RhdGUgPSAnYWZ0ZXJBcnJheVZhbHVlJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcGFyc2VTdGF0ZSA9ICdhZnRlclByb3BlcnR5VmFsdWUnO1xuXHQgICAgfVxuXHR9XG5cblx0Ly8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQvLyBmdW5jdGlvbiBpbnZhbGlkUGFyc2VTdGF0ZSAoKSB7XG5cdC8vICAgICByZXR1cm4gbmV3IEVycm9yKGBKU09ONTogaW52YWxpZCBwYXJzZSBzdGF0ZSAnJHtwYXJzZVN0YXRlfSdgKVxuXHQvLyB9XG5cblx0Ly8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQvLyBmdW5jdGlvbiBpbnZhbGlkTGV4U3RhdGUgKHN0YXRlKSB7XG5cdC8vICAgICByZXR1cm4gbmV3IEVycm9yKGBKU09ONTogaW52YWxpZCBsZXggc3RhdGUgJyR7c3RhdGV9J2ApXG5cdC8vIH1cblxuXHRmdW5jdGlvbiBpbnZhbGlkQ2hhciAoYykge1xuXHQgICAgaWYgKGMgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHJldHVybiBzeW50YXhFcnJvcigoXCJKU09ONTogaW52YWxpZCBlbmQgb2YgaW5wdXQgYXQgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4pKVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gc3ludGF4RXJyb3IoKFwiSlNPTjU6IGludmFsaWQgY2hhcmFjdGVyICdcIiArIChmb3JtYXRDaGFyKGMpKSArIFwiJyBhdCBcIiArIGxpbmUgKyBcIjpcIiArIGNvbHVtbikpXG5cdH1cblxuXHRmdW5jdGlvbiBpbnZhbGlkRU9GICgpIHtcblx0ICAgIHJldHVybiBzeW50YXhFcnJvcigoXCJKU09ONTogaW52YWxpZCBlbmQgb2YgaW5wdXQgYXQgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4pKVxuXHR9XG5cblx0Ly8gVGhpcyBjb2RlIGlzIHVucmVhY2hhYmxlLlxuXHQvLyBmdW5jdGlvbiBpbnZhbGlkVG9rZW4gKCkge1xuXHQvLyAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdlb2YnKSB7XG5cdC8vICAgICAgICAgcmV0dXJuIHN5bnRheEVycm9yKGBKU09ONTogaW52YWxpZCBlbmQgb2YgaW5wdXQgYXQgJHtsaW5lfToke2NvbHVtbn1gKVxuXHQvLyAgICAgfVxuXG5cdC8vICAgICBjb25zdCBjID0gU3RyaW5nLmZyb21Db2RlUG9pbnQodG9rZW4udmFsdWUuY29kZVBvaW50QXQoMCkpXG5cdC8vICAgICByZXR1cm4gc3ludGF4RXJyb3IoYEpTT041OiBpbnZhbGlkIGNoYXJhY3RlciAnJHtmb3JtYXRDaGFyKGMpfScgYXQgJHtsaW5lfToke2NvbHVtbn1gKVxuXHQvLyB9XG5cblx0ZnVuY3Rpb24gaW52YWxpZElkZW50aWZpZXIgKCkge1xuXHQgICAgY29sdW1uIC09IDU7XG5cdCAgICByZXR1cm4gc3ludGF4RXJyb3IoKFwiSlNPTjU6IGludmFsaWQgaWRlbnRpZmllciBjaGFyYWN0ZXIgYXQgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4pKVxuXHR9XG5cblx0ZnVuY3Rpb24gc2VwYXJhdG9yQ2hhciAoYykge1xuXHQgICAgY29uc29sZS53YXJuKChcIkpTT041OiAnXCIgKyAoZm9ybWF0Q2hhcihjKSkgKyBcIicgaW4gc3RyaW5ncyBpcyBub3QgdmFsaWQgRUNNQVNjcmlwdDsgY29uc2lkZXIgZXNjYXBpbmdcIikpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZm9ybWF0Q2hhciAoYykge1xuXHQgICAgdmFyIHJlcGxhY2VtZW50cyA9IHtcblx0ICAgICAgICBcIidcIjogXCJcXFxcJ1wiLFxuXHQgICAgICAgICdcIic6ICdcXFxcXCInLFxuXHQgICAgICAgICdcXFxcJzogJ1xcXFxcXFxcJyxcblx0ICAgICAgICAnXFxiJzogJ1xcXFxiJyxcblx0ICAgICAgICAnXFxmJzogJ1xcXFxmJyxcblx0ICAgICAgICAnXFxuJzogJ1xcXFxuJyxcblx0ICAgICAgICAnXFxyJzogJ1xcXFxyJyxcblx0ICAgICAgICAnXFx0JzogJ1xcXFx0Jyxcblx0ICAgICAgICAnXFx2JzogJ1xcXFx2Jyxcblx0ICAgICAgICAnXFwwJzogJ1xcXFwwJyxcblx0ICAgICAgICAnXFx1MjAyOCc6ICdcXFxcdTIwMjgnLFxuXHQgICAgICAgICdcXHUyMDI5JzogJ1xcXFx1MjAyOScsXG5cdCAgICB9O1xuXG5cdCAgICBpZiAocmVwbGFjZW1lbnRzW2NdKSB7XG5cdCAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50c1tjXVxuXHQgICAgfVxuXG5cdCAgICBpZiAoYyA8ICcgJykge1xuXHQgICAgICAgIHZhciBoZXhTdHJpbmcgPSBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuXHQgICAgICAgIHJldHVybiAnXFxcXHgnICsgKCcwMCcgKyBoZXhTdHJpbmcpLnN1YnN0cmluZyhoZXhTdHJpbmcubGVuZ3RoKVxuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gY1xuXHR9XG5cblx0ZnVuY3Rpb24gc3ludGF4RXJyb3IgKG1lc3NhZ2UpIHtcblx0ICAgIHZhciBlcnIgPSBuZXcgU3ludGF4RXJyb3IobWVzc2FnZSk7XG5cdCAgICBlcnIubGluZU51bWJlciA9IGxpbmU7XG5cdCAgICBlcnIuY29sdW1uTnVtYmVyID0gY29sdW1uO1xuXHQgICAgcmV0dXJuIGVyclxuXHR9XG5cblx0dmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkge1xuXHQgICAgdmFyIHN0YWNrID0gW107XG5cdCAgICB2YXIgaW5kZW50ID0gJyc7XG5cdCAgICB2YXIgcHJvcGVydHlMaXN0O1xuXHQgICAgdmFyIHJlcGxhY2VyRnVuYztcblx0ICAgIHZhciBnYXAgPSAnJztcblx0ICAgIHZhciBxdW90ZTtcblxuXHQgICAgaWYgKFxuXHQgICAgICAgIHJlcGxhY2VyICE9IG51bGwgJiZcblx0ICAgICAgICB0eXBlb2YgcmVwbGFjZXIgPT09ICdvYmplY3QnICYmXG5cdCAgICAgICAgIUFycmF5LmlzQXJyYXkocmVwbGFjZXIpXG5cdCAgICApIHtcblx0ICAgICAgICBzcGFjZSA9IHJlcGxhY2VyLnNwYWNlO1xuXHQgICAgICAgIHF1b3RlID0gcmVwbGFjZXIucXVvdGU7XG5cdCAgICAgICAgcmVwbGFjZXIgPSByZXBsYWNlci5yZXBsYWNlcjtcblx0ICAgIH1cblxuXHQgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgIHJlcGxhY2VyRnVuYyA9IHJlcGxhY2VyO1xuXHQgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcGxhY2VyKSkge1xuXHQgICAgICAgIHByb3BlcnR5TGlzdCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcmVwbGFjZXI7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgIHZhciB2ID0gbGlzdFtpXTtcblxuXHQgICAgICAgICAgICB2YXIgaXRlbSA9ICh2b2lkIDApO1xuXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgIGl0ZW0gPSB2O1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKFxuXHQgICAgICAgICAgICAgICAgdHlwZW9mIHYgPT09ICdudW1iZXInIHx8XG5cdCAgICAgICAgICAgICAgICB2IGluc3RhbmNlb2YgU3RyaW5nIHx8XG5cdCAgICAgICAgICAgICAgICB2IGluc3RhbmNlb2YgTnVtYmVyXG5cdCAgICAgICAgICAgICkge1xuXHQgICAgICAgICAgICAgICAgaXRlbSA9IFN0cmluZyh2KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIGlmIChpdGVtICE9PSB1bmRlZmluZWQgJiYgcHJvcGVydHlMaXN0LmluZGV4T2YoaXRlbSkgPCAwKSB7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0eUxpc3QucHVzaChpdGVtKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgaWYgKHNwYWNlIGluc3RhbmNlb2YgTnVtYmVyKSB7XG5cdCAgICAgICAgc3BhY2UgPSBOdW1iZXIoc3BhY2UpO1xuXHQgICAgfSBlbHNlIGlmIChzcGFjZSBpbnN0YW5jZW9mIFN0cmluZykge1xuXHQgICAgICAgIHNwYWNlID0gU3RyaW5nKHNwYWNlKTtcblx0ICAgIH1cblxuXHQgICAgaWYgKHR5cGVvZiBzcGFjZSA9PT0gJ251bWJlcicpIHtcblx0ICAgICAgICBpZiAoc3BhY2UgPiAwKSB7XG5cdCAgICAgICAgICAgIHNwYWNlID0gTWF0aC5taW4oMTAsIE1hdGguZmxvb3Ioc3BhY2UpKTtcblx0ICAgICAgICAgICAgZ2FwID0gJyAgICAgICAgICAnLnN1YnN0cigwLCBzcGFjZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2UgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgZ2FwID0gc3BhY2Uuc3Vic3RyKDAsIDEwKTtcblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIHNlcmlhbGl6ZVByb3BlcnR5KCcnLCB7Jyc6IHZhbHVlfSlcblxuXHQgICAgZnVuY3Rpb24gc2VyaWFsaXplUHJvcGVydHkgKGtleSwgaG9sZGVyKSB7XG5cdCAgICAgICAgdmFyIHZhbHVlID0gaG9sZGVyW2tleV07XG5cdCAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZS50b0pTT041ID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTjUoa2V5KTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihrZXkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHJlcGxhY2VyRnVuYykge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHJlcGxhY2VyRnVuYy5jYWxsKGhvbGRlciwga2V5LCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nKSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcblx0ICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQm9vbGVhbikge1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG5cdCAgICAgICAgY2FzZSBudWxsOiByZXR1cm4gJ251bGwnXG5cdCAgICAgICAgY2FzZSB0cnVlOiByZXR1cm4gJ3RydWUnXG5cdCAgICAgICAgY2FzZSBmYWxzZTogcmV0dXJuICdmYWxzZSdcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICByZXR1cm4gcXVvdGVTdHJpbmcodmFsdWUsIGZhbHNlKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gc2VyaWFsaXplQXJyYXkodmFsdWUpIDogc2VyaWFsaXplT2JqZWN0KHZhbHVlKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiB1bmRlZmluZWRcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gcXVvdGVTdHJpbmcgKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIHF1b3RlcyA9IHtcblx0ICAgICAgICAgICAgXCInXCI6IDAuMSxcblx0ICAgICAgICAgICAgJ1wiJzogMC4yLFxuXHQgICAgICAgIH07XG5cblx0ICAgICAgICB2YXIgcmVwbGFjZW1lbnRzID0ge1xuXHQgICAgICAgICAgICBcIidcIjogXCJcXFxcJ1wiLFxuXHQgICAgICAgICAgICAnXCInOiAnXFxcXFwiJyxcblx0ICAgICAgICAgICAgJ1xcXFwnOiAnXFxcXFxcXFwnLFxuXHQgICAgICAgICAgICAnXFxiJzogJ1xcXFxiJyxcblx0ICAgICAgICAgICAgJ1xcZic6ICdcXFxcZicsXG5cdCAgICAgICAgICAgICdcXG4nOiAnXFxcXG4nLFxuXHQgICAgICAgICAgICAnXFxyJzogJ1xcXFxyJyxcblx0ICAgICAgICAgICAgJ1xcdCc6ICdcXFxcdCcsXG5cdCAgICAgICAgICAgICdcXHYnOiAnXFxcXHYnLFxuXHQgICAgICAgICAgICAnXFwwJzogJ1xcXFwwJyxcblx0ICAgICAgICAgICAgJ1xcdTIwMjgnOiAnXFxcXHUyMDI4Jyxcblx0ICAgICAgICAgICAgJ1xcdTIwMjknOiAnXFxcXHUyMDI5Jyxcblx0ICAgICAgICB9O1xuXG5cdCAgICAgICAgdmFyIHByb2R1Y3QgPSAnJztcblxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gdmFsdWU7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgIHZhciBjID0gbGlzdFtpXTtcblxuXHQgICAgICAgICAgICBzd2l0Y2ggKGMpIHtcblx0ICAgICAgICAgICAgY2FzZSBcIidcIjpcblx0ICAgICAgICAgICAgY2FzZSAnXCInOlxuXHQgICAgICAgICAgICAgICAgcXVvdGVzW2NdKys7XG5cdCAgICAgICAgICAgICAgICBwcm9kdWN0ICs9IGM7XG5cdCAgICAgICAgICAgICAgICBjb250aW51ZVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50c1tjXSkge1xuXHQgICAgICAgICAgICAgICAgcHJvZHVjdCArPSByZXBsYWNlbWVudHNbY107XG5cdCAgICAgICAgICAgICAgICBjb250aW51ZVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgaWYgKGMgPCAnICcpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBoZXhTdHJpbmcgPSBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpO1xuXHQgICAgICAgICAgICAgICAgcHJvZHVjdCArPSAnXFxcXHgnICsgKCcwMCcgKyBoZXhTdHJpbmcpLnN1YnN0cmluZyhoZXhTdHJpbmcubGVuZ3RoKTtcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlXG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICBwcm9kdWN0ICs9IGM7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIHF1b3RlQ2hhciA9IHF1b3RlIHx8IE9iamVjdC5rZXlzKHF1b3RlcykucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiAocXVvdGVzW2FdIDwgcXVvdGVzW2JdKSA/IGEgOiBiOyB9KTtcblxuXHQgICAgICAgIHByb2R1Y3QgPSBwcm9kdWN0LnJlcGxhY2UobmV3IFJlZ0V4cChxdW90ZUNoYXIsICdnJyksIHJlcGxhY2VtZW50c1txdW90ZUNoYXJdKTtcblxuXHQgICAgICAgIHJldHVybiBxdW90ZUNoYXIgKyBwcm9kdWN0ICsgcXVvdGVDaGFyXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZU9iamVjdCAodmFsdWUpIHtcblx0ICAgICAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgPj0gMCkge1xuXHQgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0NvbnZlcnRpbmcgY2lyY3VsYXIgc3RydWN0dXJlIHRvIEpTT041Jylcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuXHQgICAgICAgIHZhciBzdGVwYmFjayA9IGluZGVudDtcblx0ICAgICAgICBpbmRlbnQgPSBpbmRlbnQgKyBnYXA7XG5cblx0ICAgICAgICB2YXIga2V5cyA9IHByb3BlcnR5TGlzdCB8fCBPYmplY3Qua2V5cyh2YWx1ZSk7XG5cdCAgICAgICAgdmFyIHBhcnRpYWwgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IGtleXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgIHZhciBrZXkgPSBsaXN0W2ldO1xuXG5cdCAgICAgICAgICAgIHZhciBwcm9wZXJ0eVN0cmluZyA9IHNlcmlhbGl6ZVByb3BlcnR5KGtleSwgdmFsdWUpO1xuXHQgICAgICAgICAgICBpZiAocHJvcGVydHlTdHJpbmcgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIG1lbWJlciA9IHNlcmlhbGl6ZUtleShrZXkpICsgJzonO1xuXHQgICAgICAgICAgICAgICAgaWYgKGdhcCAhPT0gJycpIHtcblx0ICAgICAgICAgICAgICAgICAgICBtZW1iZXIgKz0gJyAnO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgbWVtYmVyICs9IHByb3BlcnR5U3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgcGFydGlhbC5wdXNoKG1lbWJlcik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICB2YXIgZmluYWw7XG5cdCAgICAgICAgaWYgKHBhcnRpYWwubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIGZpbmFsID0gJ3t9Jztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB2YXIgcHJvcGVydGllcztcblx0ICAgICAgICAgICAgaWYgKGdhcCA9PT0gJycpIHtcblx0ICAgICAgICAgICAgICAgIHByb3BlcnRpZXMgPSBwYXJ0aWFsLmpvaW4oJywnKTtcblx0ICAgICAgICAgICAgICAgIGZpbmFsID0gJ3snICsgcHJvcGVydGllcyArICd9Jztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSAnLFxcbicgKyBpbmRlbnQ7XG5cdCAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gcGFydGlhbC5qb2luKHNlcGFyYXRvcik7XG5cdCAgICAgICAgICAgICAgICBmaW5hbCA9ICd7XFxuJyArIGluZGVudCArIHByb3BlcnRpZXMgKyAnLFxcbicgKyBzdGVwYmFjayArICd9Jztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHN0YWNrLnBvcCgpO1xuXHQgICAgICAgIGluZGVudCA9IHN0ZXBiYWNrO1xuXHQgICAgICAgIHJldHVybiBmaW5hbFxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBzZXJpYWxpemVLZXkgKGtleSkge1xuXHQgICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBxdW90ZVN0cmluZyhrZXksIHRydWUpXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGZpcnN0Q2hhciA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGtleS5jb2RlUG9pbnRBdCgwKSk7XG5cdCAgICAgICAgaWYgKCF1dGlsLmlzSWRTdGFydENoYXIoZmlyc3RDaGFyKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gcXVvdGVTdHJpbmcoa2V5LCB0cnVlKVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdENoYXIubGVuZ3RoOyBpIDwga2V5Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGlmICghdXRpbC5pc0lkQ29udGludWVDaGFyKFN0cmluZy5mcm9tQ29kZVBvaW50KGtleS5jb2RlUG9pbnRBdChpKSkpKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcXVvdGVTdHJpbmcoa2V5LCB0cnVlKVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgcmV0dXJuIGtleVxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBzZXJpYWxpemVBcnJheSAodmFsdWUpIHtcblx0ICAgICAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgPj0gMCkge1xuXHQgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0NvbnZlcnRpbmcgY2lyY3VsYXIgc3RydWN0dXJlIHRvIEpTT041Jylcblx0ICAgICAgICB9XG5cblx0ICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuXHQgICAgICAgIHZhciBzdGVwYmFjayA9IGluZGVudDtcblx0ICAgICAgICBpbmRlbnQgPSBpbmRlbnQgKyBnYXA7XG5cblx0ICAgICAgICB2YXIgcGFydGlhbCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHByb3BlcnR5U3RyaW5nID0gc2VyaWFsaXplUHJvcGVydHkoU3RyaW5nKGkpLCB2YWx1ZSk7XG5cdCAgICAgICAgICAgIHBhcnRpYWwucHVzaCgocHJvcGVydHlTdHJpbmcgIT09IHVuZGVmaW5lZCkgPyBwcm9wZXJ0eVN0cmluZyA6ICdudWxsJyk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgdmFyIGZpbmFsO1xuXHQgICAgICAgIGlmIChwYXJ0aWFsLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICBmaW5hbCA9ICdbXSc7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKGdhcCA9PT0gJycpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gcGFydGlhbC5qb2luKCcsJyk7XG5cdCAgICAgICAgICAgICAgICBmaW5hbCA9ICdbJyArIHByb3BlcnRpZXMgKyAnXSc7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gJyxcXG4nICsgaW5kZW50O1xuXHQgICAgICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMkMSA9IHBhcnRpYWwuam9pbihzZXBhcmF0b3IpO1xuXHQgICAgICAgICAgICAgICAgZmluYWwgPSAnW1xcbicgKyBpbmRlbnQgKyBwcm9wZXJ0aWVzJDEgKyAnLFxcbicgKyBzdGVwYmFjayArICddJztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHN0YWNrLnBvcCgpO1xuXHQgICAgICAgIGluZGVudCA9IHN0ZXBiYWNrO1xuXHQgICAgICAgIHJldHVybiBmaW5hbFxuXHQgICAgfVxuXHR9O1xuXG5cdHZhciBKU09ONSA9IHtcblx0ICAgIHBhcnNlOiBwYXJzZSxcblx0ICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5LFxuXHR9O1xuXG5cdHZhciBsaWIgPSBKU09ONTtcblxuXHR2YXIgZXM1ID0gbGliO1xuXG5cdHJldHVybiBlczU7XG5cbn0pKSk7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gY2FwaXRhbGl6ZSBwcm92aWRlZCBzdHJpbmdcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEFkZCBpc0EgZnVuY3Rpb24gYW5kIHJlZ2lzdGVyIHlvdXIgY2xhc3MgbmFtZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBpc0EocHVibGljQVBJLCBtb2RlbCA9IHt9LCBuYW1lID0gbnVsbCkge1xuICBpZiAoIW1vZGVsLmlzQSkge1xuICAgIG1vZGVsLmlzQSA9IFtdO1xuICB9XG5cbiAgaWYgKG5hbWUpIHtcbiAgICBtb2RlbC5pc0EucHVzaChuYW1lKTtcbiAgfVxuXG4gIGlmICghcHVibGljQVBJLmlzQSkge1xuICAgIHB1YmxpY0FQSS5pc0EgPSBjbGFzc05hbWUgPT4gKG1vZGVsLmlzQS5pbmRleE9mKGNsYXNzTmFtZSkgIT09IC0xKTtcbiAgfVxufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBCYXNpYyBzZXR0ZXJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gc2V0KHB1YmxpY0FQSSwgbW9kZWwgPSB7fSwgbmFtZXMgPSBbXSkge1xuICBuYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgcHVibGljQVBJW2BzZXQke2NhcGl0YWxpemUobmFtZSl9YF0gPSAodmFsdWUpID0+IHtcbiAgICAgIG1vZGVsW25hbWVdID0gdmFsdWU7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEJhc2ljIGdldHRlclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBnZXQocHVibGljQVBJLCBtb2RlbCA9IHt9LCBuYW1lcyA9IFtdKSB7XG4gIG5hbWVzLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBwdWJsaWNBUElbYGdldCR7Y2FwaXRhbGl6ZShuYW1lKX1gXSA9ICgpID0+IG1vZGVsW25hbWVdO1xuICB9KTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQWRkIGRlc3Ryb3kgZnVuY3Rpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gZGVzdHJveShwdWJsaWNBUEksIG1vZGVsID0ge30pIHtcbiAgY29uc3QgcHJldmlvdXNEZXN0cm95ID0gcHVibGljQVBJLmRlc3Ryb3k7XG5cbiAgaWYgKCFtb2RlbC5zdWJzY3JpcHRpb25zKSB7XG4gICAgbW9kZWwuc3Vic2NyaXB0aW9ucyA9IFtdO1xuICB9XG5cbiAgcHVibGljQVBJLmRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgaWYgKHByZXZpb3VzRGVzdHJveSkge1xuICAgICAgcHJldmlvdXNEZXN0cm95KCk7XG4gICAgfVxuICAgIHdoaWxlIChtb2RlbC5zdWJzY3JpcHRpb25zICYmIG1vZGVsLnN1YnNjcmlwdGlvbnMubGVuZ3RoKSB7XG4gICAgICBtb2RlbC5zdWJzY3JpcHRpb25zLnBvcCgpLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKG1vZGVsKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgZGVsZXRlIG1vZGVsW2ZpZWxkXTtcbiAgICB9KTtcblxuICAgIC8vIEZsYWcgdGhlIGluc3RhbmNlIGJlZWluZyBkZWxldGVkXG4gICAgbW9kZWwuZGVsZXRlZCA9IHRydWU7XG4gIH07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV2ZW50IGhhbmRsaW5nOiBvblhYWChjYWxsYmFjayksIGZpcmVYWFgoYXJncy4uLilcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gZXZlbnQocHVibGljQVBJLCBtb2RlbCwgZXZlbnROYW1lLCBhc3luY2hyb3Vub3VzID0gdHJ1ZSkge1xuICBjb25zdCBjYWxsYmFja3MgPSBbXTtcbiAgY29uc3QgcHJldmlvdXNEZXN0cm95ID0gcHVibGljQVBJLmRlc3Ryb3k7XG5cbiAgZnVuY3Rpb24gb2ZmKGluZGV4KSB7XG4gICAgY2FsbGJhY2tzW2luZGV4XSA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvbihpbmRleCkge1xuICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgb2ZmKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoeyB1bnN1YnNjcmliZSB9KTtcbiAgfVxuXG4gIHB1YmxpY0FQSVtgZmlyZSR7Y2FwaXRhbGl6ZShldmVudE5hbWUpfWBdID0gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAobW9kZWwuZGVsZXRlZCkge1xuICAgICAgY29uc29sZS5sb2coJ2luc3RhbmNlIGRlbGV0ZWQgLSBjYW4gbm90IGNhbGwgYW55IG1ldGhvZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NDYWxsYmFja3MoKSB7XG4gICAgICBjYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHB1YmxpY0FQSSwgYXJncyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyT2JqKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3IgZXZlbnQ6JywgZXZlbnROYW1lLCBlcnJPYmopO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGFzeW5jaHJvdW5vdXMpIHtcbiAgICAgIHNldFRpbWVvdXQocHJvY2Vzc0NhbGxiYWNrcywgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2Nlc3NDYWxsYmFja3MoKTtcbiAgICB9XG4gIH07XG5cbiAgcHVibGljQVBJW2BvbiR7Y2FwaXRhbGl6ZShldmVudE5hbWUpfWBdID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKG1vZGVsLmRlbGV0ZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdpbnN0YW5jZSBkZWxldGVkIC0gY2FuIG5vdCBjYWxsIGFueSBtZXRob2QnKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcbiAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIG9uKGluZGV4KTtcbiAgfTtcblxuICBwdWJsaWNBUEkuZGVzdHJveSA9ICgpID0+IHtcbiAgICBwcmV2aW91c0Rlc3Ryb3koKTtcbiAgICBjYWxsYmFja3MuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiBvZmYoaW5kZXgpKTtcbiAgfTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gRmV0Y2ggaGFuZGxpbmc6IHNldFhYWEZldGNoQ2FsbGJhY2sgLyByZXR1cm4geyBhZGRSZXF1ZXN0IH1cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGZldGNoKHB1YmxpY0FQSSwgbW9kZWwsIG5hbWUpIHtcbiAgbGV0IGZldGNoQ2FsbGJhY2sgPSBudWxsO1xuICBjb25zdCByZXF1ZXN0UXVldWUgPSBbXTtcblxuICBwdWJsaWNBUElbYHNldCR7Y2FwaXRhbGl6ZShuYW1lKX1GZXRjaENhbGxiYWNrYF0gPSAoZmV0Y2hNZXRob2QpID0+IHtcbiAgICBpZiAocmVxdWVzdFF1ZXVlLmxlbmd0aCkge1xuICAgICAgZmV0Y2hNZXRob2QocmVxdWVzdFF1ZXVlKTtcbiAgICB9XG4gICAgZmV0Y2hDYWxsYmFjayA9IGZldGNoTWV0aG9kO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYWRkUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgICByZXF1ZXN0UXVldWUucHVzaChyZXF1ZXN0KTtcbiAgICAgIGlmIChmZXRjaENhbGxiYWNrKSB7XG4gICAgICAgIGZldGNoQ2FsbGJhY2socmVxdWVzdFF1ZXVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0UmVxdWVzdHMocmVxdWVzdExpc3QpIHtcbiAgICAgIHdoaWxlIChyZXF1ZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHJlcXVlc3RRdWV1ZS5wb3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXF1ZXN0TGlzdCkge1xuICAgICAgICAvLyBSZWJ1aWxkIHJlcXVlc3QgbGlzdFxuICAgICAgICByZXF1ZXN0TGlzdC5mb3JFYWNoKChyZXEpID0+IHtcbiAgICAgICAgICByZXF1ZXN0UXVldWUucHVzaChyZXEpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gQWxzbyB0cmlnZ2VyIGEgcmVxdWVzdFxuICAgICAgICBpZiAoZmV0Y2hDYWxsYmFjaykge1xuICAgICAgICAgIGZldGNoQ2FsbGJhY2socmVxdWVzdFF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIER5bmFtaWMgYXJyYXkgaGFuZGxlclxuLy8gICAtIGFkZCR7eHh4fShpdGVtKVxuLy8gICAtIHJlbW92ZSR7eHh4fShpdGVtKVxuLy8gICAtIGdldCR7eHh4fSgpID0+IFtpdGVtcy4uLl1cbi8vICAgLSByZW1vdmVBbGwke3h4eH0oKVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBkeW5hbWljQXJyYXkocHVibGljQVBJLCBtb2RlbCwgbmFtZSkge1xuICBpZiAoIW1vZGVsW25hbWVdKSB7XG4gICAgbW9kZWxbbmFtZV0gPSBbXTtcbiAgfVxuXG4gIHB1YmxpY0FQSVtgc2V0JHtjYXBpdGFsaXplKG5hbWUpfWBdID0gKGl0ZW1zKSA9PiB7XG4gICAgbW9kZWxbbmFtZV0gPSBbXS5jb25jYXQoaXRlbXMpO1xuICB9O1xuXG4gIHB1YmxpY0FQSVtgYWRkJHtjYXBpdGFsaXplKG5hbWUpfWBdID0gKGl0ZW0pID0+IHtcbiAgICBtb2RlbFtuYW1lXS5wdXNoKGl0ZW0pO1xuICB9O1xuXG4gIHB1YmxpY0FQSVtgcmVtb3ZlJHtjYXBpdGFsaXplKG5hbWUpfWBdID0gKGl0ZW0pID0+IHtcbiAgICBjb25zdCBpbmRleCA9IG1vZGVsW25hbWVdLmluZGV4T2YoaXRlbSk7XG4gICAgbW9kZWxbbmFtZV0uc3BsaWNlKGluZGV4LCAxKTtcbiAgfTtcblxuICBwdWJsaWNBUElbYGdldCR7Y2FwaXRhbGl6ZShuYW1lKX1gXSA9ICgpID0+IG1vZGVsW25hbWVdO1xuXG4gIHB1YmxpY0FQSVtgcmVtb3ZlQWxsJHtjYXBpdGFsaXplKG5hbWUpfWBdID0gKCkgPT4gKG1vZGVsW25hbWVdID0gW10pO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBDaGFpbiBmdW5jdGlvbiBjYWxsc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBjaGFpbiguLi5mbikge1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IGZuLmZpbHRlcihpID0+ICEhaSkuZm9yRWFjaChpID0+IGkoLi4uYXJncykpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBEYXRhIFN1YnNjcmlwdGlvblxuLy8gICA9PiBkYXRhSGFuZGxlciA9IHtcbi8vICAgICAgICAgLy8gU2V0IG9mIGRlZmF1bHQgdmFsdWVzIHlvdSB3b3VsZCBleHBlY3QgaW4geW91ciBtZXRhZGF0YVxuLy8gICAgICAgICBkZWZhdWx0TWV0YWRhdGE6IHtcbi8vICAgICAgICAgICAgbnVtYmVyT2ZCaW5zOiAzMixcbi8vICAgICAgICAgfSxcbi8vXG4vLyAgICAgICAgIC8vIE1ldGhvZCB1c2VkIGludGVybmFsbHkgdG8gc3RvcmUgdGhlIGRhdGFcbi8vICAgICAgICAgc2V0KG1vZGVsLCBkYXRhKSB7IHJldHVybiAhIXNhbWVBc0JlZm9yZTsgfSwgLy8gUmV0dXJuIHRydWUgaWYgbm90aGluZyBoYXMgY2hhbmdlZFxuLy9cbi8vICAgICAgICAgLy8gTWV0aG9kIHVzZWQgaW50ZXJuYWxseSB0byBleHRyYWN0IHRoZSBkYXRhIGZyb20gdGhlIGNhY2hlIGJhc2VkIG9uIGEgZ2l2ZW4gc3Vic2NyaXB0aW9uXG4vLyAgICAgICAgIC8vIFRoaXMgc2hvdWxkIHJldHVybiBudWxsL3VuZGVmaW5lZCBpZiB0aGUgZGF0YSBpcyBub3QgYXZhaWxhYmxlICh5ZXQpLlxuLy8gICAgICAgICBnZXQobW9kZWwsIHJlcXVlc3QsIGRhdGFDaGFuZ2VkKSB7fSxcbi8vICAgICAgfVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gTWV0aG9kcyBnZW5lcmF0ZWQgd2l0aCBkYXRhTmFtZSA9ICdtdXR1YWxJbmZvcm1hdGlvbidcbi8vID0+IHB1YmxpY0FQSVxuLy8gICAgIC0gb25NdXR1YWxJbmZvcm1hdGlvblN1YnNjcmlwdGlvbkNoYW5nZShjYWxsYmFjaykgPT4gc3Vic2NyaXB0aW9uW3Vuc3Vic2NyaWJlKCkgKyB1cGRhdGUodmFyaWFibGVzID0gW10sIG1ldGFkYXRhID0ge30pXVxuLy8gICAgIC0gZmlyZU11dHVhbEluZm9ybWF0aW9uU3Vic2NyaXB0aW9uQ2hhbmdlKHJlcXVlc3QpXG4vLyAgICAgLSBzdWJzY3JpYmVUb011dHVhbEluZm9ybWF0aW9uKG9uRGF0YVJlYWR5LCB2YXJpYWJsZXMgPSBbXSwgbWV0YWRhdGEgPSB7fSlcbi8vICAgICAtIHNldE11dHVhbEluZm9ybWF0aW9uKGRhdGEpXG4vLyAgICAgLSBoYXNNdXR1YWxJbmZvcm1hdGlvbihyZXF1ZXN0LCB2YXJpYWJsZSlcbi8vICAgICAtIGRlc3Ryb3koKVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBkYXRhU3Vic2NyaWJlcihwdWJsaWNBUEksIG1vZGVsLCBkYXRhTmFtZSwgZGF0YUhhbmRsZXIpIHtcbiAgLy8gUHJpdmF0ZSBtZW1iZXJzXG4gIGNvbnN0IGRhdGFTdWJzY3JpcHRpb25zID0gW107XG4gIGxldCBmb3JjZUZsdXNoUmVxdWVzdHMgPSAwO1xuICBjb25zdCBldmVudE5hbWUgPSBgJHtkYXRhTmFtZX1TdWJzY3JpcHRpb25DaGFuZ2VgO1xuICBjb25zdCBmaXJlTWV0aG9kTmFtZSA9IGBmaXJlJHtjYXBpdGFsaXplKGV2ZW50TmFtZSl9YDtcbiAgY29uc3QgZGF0YUNvbnRhaW5lck5hbWUgPSBgJHtkYXRhTmFtZX1fc3RvcmFnZWA7XG5cbiAgLy8gQWRkIGRhdGEgY29udGFpbmVyIHRvIG1vZGVsIGlmIG5vdCBleGlzdFxuICBpZiAoIW1vZGVsW2RhdGFDb250YWluZXJOYW1lXSkge1xuICAgIG1vZGVsW2RhdGFDb250YWluZXJOYW1lXSA9IHt9O1xuICB9XG5cbiAgLy8gQWRkIGV2ZW50IGhhbmRsaW5nIG1ldGhvZHNcbiAgZXZlbnQocHVibGljQVBJLCBtb2RlbCwgZXZlbnROYW1lKTtcblxuICBmdW5jdGlvbiBvZmYoKSB7XG4gICAgbGV0IGNvdW50ID0gZGF0YVN1YnNjcmlwdGlvbnMubGVuZ3RoO1xuICAgIHdoaWxlIChjb3VudCkge1xuICAgICAgY291bnQgLT0gMTtcbiAgICAgIGRhdGFTdWJzY3JpcHRpb25zW2NvdW50XSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLy8gSW50ZXJuYWwgZnVuY3Rpb24gdGhhdCB3aWxsIG5vdGlmeSBhbnkgc3Vic2NyaWJlciB3aXRoIGl0cyBkYXRhIGluIGEgc3luY2hyb25vdXMgbWFubmVyXG4gIGZ1bmN0aW9uIGZsdXNoRGF0YVRvTGlzdGVuZXIoZGF0YUxpc3RlbmVyLCBkYXRhQ2hhbmdlZCkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoZGF0YUxpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IGRhdGFUb0ZvcndhcmQgPSBkYXRhSGFuZGxlci5nZXQobW9kZWxbZGF0YUNvbnRhaW5lck5hbWVdLCBkYXRhTGlzdGVuZXIucmVxdWVzdCwgZGF0YUNoYW5nZWQpO1xuICAgICAgICBpZiAoZGF0YVRvRm9yd2FyZFxuICAgICAgICAgICYmIChKU09OLnN0cmluZ2lmeShkYXRhVG9Gb3J3YXJkKSAhPT0gZGF0YUxpc3RlbmVyLnJlcXVlc3QubGFzdFB1c2ggfHwgZGF0YUxpc3RlbmVyLnJlcXVlc3QubWV0YWRhdGEuZm9yY2VGbHVzaCkpIHtcbiAgICAgICAgICBkYXRhTGlzdGVuZXIucmVxdWVzdC5sYXN0UHVzaCA9IEpTT04uc3RyaW5naWZ5KGRhdGFUb0ZvcndhcmQpO1xuICAgICAgICAgIGRhdGFMaXN0ZW5lci5vbkRhdGFSZWFkeShkYXRhVG9Gb3J3YXJkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5sb2coYGZsdXNoICR7ZGF0YU5hbWV9IGVycm9yIGNhdWdodDpgLCBlcnIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIG9uRGF0YVJlYWR5IGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGVhY2ggdGltZSB0aGUgc2V0WFhYIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBhbmRcbiAgLy8gd2hlbiB0aGUgYWN0dWFsIHN1YnNjcmlwdGlvbiBjb3JyZXNwb25kIHRvIHRoZSBkYXRhIHRoYXQgaGFzIGJlZW4gc2V0LlxuICAvLyBUaGlzIGlzIHBlcmZvcm1lZCBzeW5jaHJvbm91c2x5LlxuICAvLyBUaGUgZGVmYXVsdCBiZWhhdmlvciBpcyB0byBhdm9pZCBwdXNoaW5nIGRhdGEgdG8gc3Vic2NyaWJlcnMgaWYgbm90aGluZyBoYXMgY2hhbmdlZFxuICAvLyBzaW5jZSB0aGUgbGFzdCBwdXNoLiAgSG93ZXZlciwgYnkgcHJvdmlkaW5nIFwiZm9yY2VGbHVzaDogdHJ1ZVwiIGluIHRoZSBtZXRhZGF0YSxcbiAgLy8gc3Vic2NyaWJlcnMgY2FuIGluZGljYXRlIHRoYXQgdGhleSB3YW50IGRhdGEgcHVzaGVkIHRvIHRoZW0gZXZlbiBpZiB0aGVyZSBoYXMgYmVlblxuICAvLyBubyBjaGFuZ2Ugc2luY2UgdGhlIGxhc3QgcHVzaC5cbiAgcHVibGljQVBJW2BzdWJzY3JpYmVUbyR7Y2FwaXRhbGl6ZShkYXRhTmFtZSl9YF0gPSAob25EYXRhUmVhZHksIHZhcmlhYmxlcyA9IFtdLCBtZXRhZGF0YSA9IHt9KSA9PiB7XG4gICAgY29uc3QgaWQgPSBkYXRhU3Vic2NyaXB0aW9ucy5sZW5ndGg7XG4gICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgIGlkLFxuICAgICAgdmFyaWFibGVzLFxuICAgICAgbWV0YWRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGRhdGFIYW5kbGVyLmRlZmF1bHRNZXRhZGF0YSwgbWV0YWRhdGEpLFxuICAgIH07XG4gICAgaWYgKHJlcXVlc3QubWV0YWRhdGEuZm9yY2VGbHVzaCkge1xuICAgICAgZm9yY2VGbHVzaFJlcXVlc3RzICs9IDE7XG4gICAgfVxuICAgIGNvbnN0IGRhdGFMaXN0ZW5lciA9IHsgb25EYXRhUmVhZHksIHJlcXVlc3QgfTtcbiAgICBkYXRhU3Vic2NyaXB0aW9ucy5wdXNoKGRhdGFMaXN0ZW5lcik7XG4gICAgcHVibGljQVBJW2ZpcmVNZXRob2ROYW1lXShyZXF1ZXN0KTtcbiAgICBmbHVzaERhdGFUb0xpc3RlbmVyKGRhdGFMaXN0ZW5lciwgbnVsbCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICByZXF1ZXN0LmFjdGlvbiA9ICd1bnN1YnNjcmliZSc7XG4gICAgICAgIGlmIChyZXF1ZXN0Lm1ldGFkYXRhLmZvcmNlRmx1c2gpIHtcbiAgICAgICAgICBmb3JjZUZsdXNoUmVxdWVzdHMgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBwdWJsaWNBUElbZmlyZU1ldGhvZE5hbWVdKHJlcXVlc3QpO1xuICAgICAgICBkYXRhU3Vic2NyaXB0aW9uc1tpZF0gPSBudWxsO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZSh2YXJzLCBtZXRhKSB7XG4gICAgICAgIHJlcXVlc3QudmFyaWFibGVzID0gW10uY29uY2F0KHZhcnMpO1xuICAgICAgICBpZiAobWV0YSAmJiBtZXRhLmZvcmNlRmx1c2ggIT09IHJlcXVlc3QubWV0YWRhdGEuZm9yY2VGbHVzaCkge1xuICAgICAgICAgIGZvcmNlRmx1c2hSZXF1ZXN0cyArPSAobWV0YS5mb3JjZUZsdXNoID8gMSA6IC0xKTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0Lm1ldGFkYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgcmVxdWVzdC5tZXRhZGF0YSwgbWV0YSk7XG4gICAgICAgIHB1YmxpY0FQSVtmaXJlTWV0aG9kTmFtZV0ocmVxdWVzdCk7XG4gICAgICAgIGZsdXNoRGF0YVRvTGlzdGVuZXIoZGF0YUxpc3RlbmVyLCBudWxsKTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcblxuICAvLyBNZXRob2QgdXNlIHRvIHN0b3JlIGRhdGFcbiAgcHVibGljQVBJW2BzZXQke2NhcGl0YWxpemUoZGF0YU5hbWUpfWBdID0gKGRhdGEpID0+IHtcbiAgICAvLyBQcm9jZXNzIGFsbCBzdWJzY3JpcHRpb24gdG8gc2VlIGlmIHdlIGNhbiB0cmlnZ2VyIGEgbm90aWZpY2F0aW9uXG4gICAgaWYgKCFkYXRhSGFuZGxlci5zZXQobW9kZWxbZGF0YUNvbnRhaW5lck5hbWVdLCBkYXRhKSB8fCBmb3JjZUZsdXNoUmVxdWVzdHMgPiAwKSB7XG4gICAgICBkYXRhU3Vic2NyaXB0aW9ucy5mb3JFYWNoKGRhdGFMaXN0ZW5lciA9PiBmbHVzaERhdGFUb0xpc3RlbmVyKGRhdGFMaXN0ZW5lciwgZGF0YSkpO1xuICAgIH1cbiAgfTtcbiAgLy8gUmV0cmlldmUgZGF0YSBmb3IgYSBzaW5nbGUgdmFyaWFibGUgZnJvbSBvdXIgY2FjaGUsIGdpdmVuIGN1cnJlbnQgcmVxdWVzdC5cbiAgLy8gQ2FsbCBmcm9tIGluc2lkZSBvbntkYXRhTmFtZX1TdWJzY3JpcHRpb25DaGFuZ2UgdG8gZmluZCBvdXQgaWZcbiAgLy8gY2FjaGUgbmVlZHMgdG8gYmUgdXBkYXRlZC5cbiAgcHVibGljQVBJW2BoYXMke2NhcGl0YWxpemUoZGF0YU5hbWUpfWBdID0gKGluUmVxdWVzdCwgdmFyaWFibGUpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGluUmVxdWVzdCkge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gT2JqZWN0LmFzc2lnbih7fSwgaW5SZXF1ZXN0LCB7IHZhcmlhYmxlczogW3ZhcmlhYmxlXSB9KTtcbiAgICAgICAgY29uc3QgZGF0YVRvRm9yd2FyZCA9IGRhdGFIYW5kbGVyLmdldChtb2RlbFtkYXRhQ29udGFpbmVyTmFtZV0sIHJlcXVlc3QsIG51bGwpO1xuICAgICAgICBpZiAoZGF0YVRvRm9yd2FyZCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhgaGFzICR7ZGF0YU5hbWV9IGVycm9yIGNhdWdodDpgLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWNBUEkuZGVzdHJveSA9IGNoYWluKG9mZiwgcHVibGljQVBJLmRlc3Ryb3kpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBuZXdJbnN0YW5jZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5mdW5jdGlvbiBuZXdJbnN0YW5jZShleHRlbmQpIHtcbiAgcmV0dXJuIChpbml0aWFsVmFsdWVzID0ge30pID0+IHtcbiAgICBjb25zdCBtb2RlbCA9IHt9O1xuICAgIGNvbnN0IHB1YmxpY0FQSSA9IHt9O1xuICAgIGV4dGVuZChwdWJsaWNBUEksIG1vZGVsLCBpbml0aWFsVmFsdWVzKTtcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZShwdWJsaWNBUEkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNoYWluLFxuICBkYXRhU3Vic2NyaWJlcixcbiAgZGVzdHJveSxcbiAgZHluYW1pY0FycmF5LFxuICBldmVudCxcbiAgZmV0Y2gsXG4gIGdldCxcbiAgaXNBLFxuICBuZXdJbnN0YW5jZSxcbiAgc2V0LFxufTtcbiIsIi8qIGdsb2JhbCBYTUxIdHRwUmVxdWVzdCAqL1xuaW1wb3J0IENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIgZnJvbSAnLi4vQ29tcG9zaXRlQ2xvc3VyZUhlbHBlcic7XG5cbmNvbnN0IGNvbm5lY3Rpb25zID0gW107XG5cbmZ1bmN0aW9uIFByb2Nlc3NMYXVuY2hlcihwdWJsaWNBUEksIG1vZGVsKSB7XG5cbiAgcHVibGljQVBJLnN0YXJ0ID0gKGNvbmZpZykgPT4ge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgIHVybCA9IG1vZGVsLmVuZFBvaW50O1xuXG4gICAgeGhyLm9wZW4oJ1BPU1QnLCB1cmwsIHRydWUpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgY29uc3Qgc3VwcG9ydHNKc29uID0gJ3Jlc3BvbnNlJyBpbiB4aHIgJiYgeGhyLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgeGhyLm9ubG9hZCA9IChlKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHN1cHBvcnRzSnNvbiA/IHhoci5yZXNwb25zZSA6IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcbiAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDAgJiYgcmVzcG9uc2UgJiYgIXJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgIC8vIEFkZCBjb25uZWN0aW9uIHRvIG91ciBnbG9iYWwgbGlzdFxuICAgICAgICBjb25uZWN0aW9ucy5wdXNoKHJlc3BvbnNlKTtcbiAgICAgICAgcHVibGljQVBJLmZpcmVQcm9jZXNzUmVhZHkocmVzcG9uc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwdWJsaWNBUEkuZmlyZUVycm9yKHhocik7XG4gICAgfTtcblxuICAgIHhoci5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgIHB1YmxpY0FQSS5maXJlRXJyb3IoeGhyKTtcbiAgICB9O1xuXG4gICAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XG4gIH07XG5cbiAgcHVibGljQVBJLmZldGNoQ29ubmVjdGlvbiA9IChzZXNzaW9uSWQpID0+IHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICB1cmwgPSBbbW9kZWwuZW5kUG9pbnQsIHNlc3Npb25JZF0uam9pbignLycpO1xuXG4gICAgeGhyLm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICBjb25zdCBzdXBwb3J0c0pzb24gPSAncmVzcG9uc2UnIGluIHhociAmJiB4aHIucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICB4aHIub25sb2FkID0gKGUpID0+IHtcbiAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIHB1YmxpY0FQSS5maXJlRmV0Y2goc3VwcG9ydHNKc29uID8geGhyLnJlc3BvbnNlIDogSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcHVibGljQVBJLmZpcmVFcnJvcih4aHIpO1xuICAgIH07XG5cbiAgICB4aHIub25lcnJvciA9IChlKSA9PiB7XG4gICAgICBwdWJsaWNBUEkuZmlyZUVycm9yKHhocik7XG4gICAgfTtcblxuICAgIHhoci5zZW5kKCk7XG4gIH1cblxuICBwdWJsaWNBUEkuc3RvcCA9IChjb25uZWN0aW9uKSA9PiB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgdXJsID0gW21vZGVsLmVuZFBvaW50LCBjb25uZWN0aW9uLmlkXS5qb2luKCcvJyk7XG5cbiAgICB4aHIub3BlbignREVMRVRFJywgdXJsLCB0cnVlKTtcbiAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgIGNvbnN0IHN1cHBvcnRzSnNvbiA9ICdyZXNwb25zZScgaW4geGhyICYmIHhoci5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIHhoci5vbmxvYWQgPSAoZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBzdXBwb3J0c0pzb24gPyB4aHIucmVzcG9uc2UgOiBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7XG4gICAgICAgIC8vIFJlbW92ZSBjb25uZWN0aW9uIGZyb20gdGhlIGxpc3RcbiAgICAgICAgLy8gRklYTUUgLyBUT0RPXG4gICAgICAgIHB1YmxpY0FQSS5maXJlUHJvY2Vzc1N0b3BwZWQocmVzcG9uc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwdWJsaWNBUEkuZmlyZUVycm9yKHhocik7XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9IChlKSA9PiB7XG4gICAgICBwdWJsaWNBUEkuZmlyZUVycm9yKHhocik7XG4gICAgfTtcbiAgICB4aHIuc2VuZCgpO1xuICB9XG5cbiAgcHVibGljQVBJLmxpc3RDb25uZWN0aW9ucyA9ICgpID0+IHtcbiAgICByZXR1cm4gY29ubmVjdGlvbnM7XG4gIH1cbn1cblxuY29uc3QgREVGQVVMVF9WQUxVRVMgPSB7XG4gIGVuZFBvaW50OiBudWxsLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwdWJsaWNBUEksIG1vZGVsLCBpbml0aWFsVmFsdWVzID0ge30pIHtcbiAgT2JqZWN0LmFzc2lnbihtb2RlbCwgREVGQVVMVF9WQUxVRVMsIGluaXRpYWxWYWx1ZXMpO1xuXG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZGVzdHJveShwdWJsaWNBUEksIG1vZGVsKTtcbiAgQ29tcG9zaXRlQ2xvc3VyZUhlbHBlci5ldmVudChwdWJsaWNBUEksIG1vZGVsLCAnUHJvY2Vzc1JlYWR5Jyk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZXZlbnQocHVibGljQVBJLCBtb2RlbCwgJ1Byb2Nlc3NTdG9wcGVkJyk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZXZlbnQocHVibGljQVBJLCBtb2RlbCwgJ0ZldGNoJyk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZXZlbnQocHVibGljQVBJLCBtb2RlbCwgJ0Vycm9yJyk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuaXNBKHB1YmxpY0FQSSwgbW9kZWwsICdQcm9jZXNzTGF1bmNoZXInKTtcblxuICBQcm9jZXNzTGF1bmNoZXIocHVibGljQVBJLCBtb2RlbCk7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmV4cG9ydCBjb25zdCBuZXdJbnN0YW5jZSA9IENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIubmV3SW5zdGFuY2UoZXh0ZW5kKTtcblxuZXhwb3J0IGRlZmF1bHQgeyBuZXdJbnN0YW5jZSwgZXh0ZW5kIH07XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgQ29tcG9zaXRlQ2xvc3VyZUhlbHBlciBmcm9tICcuLi9Db21wb3NpdGVDbG9zdXJlSGVscGVyJztcblxuaW1wb3J0IFByb2Nlc3NMYXVuY2hlciBmcm9tICcuLi9Qcm9jZXNzTGF1bmNoZXInO1xuaW1wb3J0IFdlYnNvY2tldENvbm5lY3Rpb24gZnJvbSAnLi4vV2Vic29ja2V0Q29ubmVjdGlvbic7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFU1NJT05fTUFOQUdFUl9VUkwgPSBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZX06JHt3aW5kb3cubG9jYXRpb24ucG9ydH0vcGFyYXZpZXcvYCxcbiAgREVGQVVMVF9TRVNTSU9OX1VSTCA9IGAkeyh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwcycpID8gJ3dzcycgOiAnd3MnfTovLyR7d2luZG93LmxvY2F0aW9uLmhvc3RuYW1lfToke3dpbmRvdy5sb2NhdGlvbi5wb3J0fS93c2A7XG5cblxuZnVuY3Rpb24gd3NDb25uZWN0KHB1YmxpY0FQSSwgbW9kZWwpIHtcbiAgY29uc3Qgd3NDb25uZWN0aW9uID0gV2Vic29ja2V0Q29ubmVjdGlvbi5uZXdJbnN0YW5jZSh7IHVybHM6IG1vZGVsLmNvbmZpZy5zZXNzaW9uVVJMLCBzZWNyZXQ6IG1vZGVsLmNvbmZpZy5zZWNyZXQsIHJldHJ5OiBtb2RlbC5jb25maWcucmV0cnkgfSk7XG4gIG1vZGVsLnN1YnNjcmlwdGlvbnMucHVzaCh3c0Nvbm5lY3Rpb24ub25Db25uZWN0aW9uUmVhZHkocHVibGljQVBJLnJlYWR5Rm9yd2FyZGVyKSk7XG4gIG1vZGVsLnN1YnNjcmlwdGlvbnMucHVzaCh3c0Nvbm5lY3Rpb24ub25Db25uZWN0aW9uRXJyb3IocHVibGljQVBJLmVycm9yRm9yd2FyZGVyKSk7XG4gIG1vZGVsLnN1YnNjcmlwdGlvbnMucHVzaCh3c0Nvbm5lY3Rpb24ub25Db25uZWN0aW9uQ2xvc2UocHVibGljQVBJLmNsb3NlRm9yd2FyZGVyKSk7XG5cbiAgLy8gQWRkIHRvIHRoZSBnYXJiYWdlIGNvbGxlY3RvclxuICBtb2RlbC5nYy5wdXNoKHdzQ29ubmVjdGlvbik7XG5cbiAgcmV0dXJuIHdzQ29ubmVjdGlvbi5jb25uZWN0KCk7XG59XG5cbmZ1bmN0aW9uIHNtYXJ0Q29ubmVjdChwdWJsaWNBUEksIG1vZGVsKSB7XG4gIGxldCBzZXNzaW9uID0gbnVsbDtcbiAgbW9kZWwuZ2MgPSBbXTtcblxuICAvLyBFdmVudCBmb3J3YXJkZXJzXG4gIHB1YmxpY0FQSS5yZWFkeUZvcndhcmRlciA9IChkYXRhKSA9PiB7XG4gICAgc2Vzc2lvbiA9IGRhdGEuZ2V0U2Vzc2lvbigpO1xuICAgIHB1YmxpY0FQSS5maXJlQ29ubmVjdGlvblJlYWR5KGRhdGEpO1xuICB9O1xuICBwdWJsaWNBUEkuZXJyb3JGb3J3YXJkZXIgPSAoZGF0YSwgZXJyKSA9PiB7XG4gICAgcHVibGljQVBJLmZpcmVDb25uZWN0aW9uRXJyb3IoZGF0YSwgZXJyKTtcbiAgfTtcbiAgcHVibGljQVBJLmNsb3NlRm9yd2FyZGVyID0gKGRhdGEpID0+IHtcbiAgICBwdWJsaWNBUEkuZmlyZUNvbm5lY3Rpb25DbG9zZShkYXRhKTtcbiAgfTtcblxuICBwdWJsaWNBUEkuY29ubmVjdCA9ICgpID0+IHtcbiAgICBpZiAobW9kZWwuY29uZmlnRGVjb3JhdG9yKSB7XG4gICAgICBtb2RlbC5jb25maWcgPSBtb2RlbC5jb25maWdEZWNvcmF0b3IobW9kZWwuY29uZmlnKTtcbiAgICB9XG4gICAgaWYgKG1vZGVsLmNvbmZpZy5zZXNzaW9uVVJMKSB7XG4gICAgICAvLyBXZSBoYXZlIGEgZGlyZWN0IGNvbm5lY3Rpb24gVVJMXG4gICAgICBzZXNzaW9uID0gd3NDb25uZWN0KHB1YmxpY0FQSSwgbW9kZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHVzZSB0aGUgTGF1bmNoZXJcbiAgICAgIGNvbnN0IGxhdW5jaGVyID0gUHJvY2Vzc0xhdW5jaGVyLm5ld0luc3RhbmNlKHsgZW5kUG9pbnQ6IG1vZGVsLmNvbmZpZy5zZXNzaW9uTWFuYWdlclVSTCB8fCBERUZBVUxUX1NFU1NJT05fTUFOQUdFUl9VUkwgfSk7XG5cbiAgICAgIG1vZGVsLnN1YnNjcmlwdGlvbnMucHVzaChsYXVuY2hlci5vblByb2Nlc3NSZWFkeSgoZGF0YSkgPT4ge1xuICAgICAgICBpZiAobW9kZWwuY29uZmlnRGVjb3JhdG9yKSB7XG4gICAgICAgICAgbW9kZWwuY29uZmlnID0gbW9kZWwuY29uZmlnRGVjb3JhdG9yKE9iamVjdC5hc3NpZ24oe30sIG1vZGVsLmNvbmZpZywgZGF0YSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGVsLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGVsLmNvbmZpZywgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXNzaW9uID0gd3NDb25uZWN0KHB1YmxpY0FQSSwgbW9kZWwpO1xuICAgICAgfSkpO1xuICAgICAgbW9kZWwuc3Vic2NyaXB0aW9ucy5wdXNoKGxhdW5jaGVyLm9uRXJyb3IoKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5yZXNwb25zZSAmJiBkYXRhLnJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgcHVibGljQVBJLmVycm9yRm9yd2FyZGVyKGRhdGEsIGRhdGEucmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeSB0byB1c2Ugc3RhbmRhcmQgY29ubmVjdGlvbiBVUkxcbiAgICAgICAgICBtb2RlbC5jb25maWcuc2Vzc2lvblVSTCA9IERFRkFVTFRfU0VTU0lPTl9VUkw7XG4gICAgICAgICAgc2Vzc2lvbiA9IHdzQ29ubmVjdChwdWJsaWNBUEksIG1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuXG4gICAgICBsYXVuY2hlci5zdGFydChtb2RlbC5jb25maWcpO1xuXG4gICAgICAvLyBBZGQgdG8gdGhlIGdhcmJhZ2UgY29sbGVjdG9yXG4gICAgICBtb2RlbC5nYy5wdXNoKGxhdW5jaGVyKTtcbiAgICB9XG4gIH07XG5cbiAgcHVibGljQVBJLmdldFNlc3Npb24gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHNlc3Npb247XG4gIH07XG5cbiAgZnVuY3Rpb24gY2xlYW5VcCgpIHtcbiAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgc2Vzc2lvbi5jbG9zZSgpO1xuICAgIH1cbiAgICBzZXNzaW9uID0gbnVsbDtcblxuICAgIHdoaWxlIChtb2RlbC5nYy5sZW5ndGgpIHtcbiAgICAgIG1vZGVsLmdjLnBvcCgpLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWNBUEkuZGVzdHJveSA9IENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuY2hhaW4oY2xlYW5VcCwgcHVibGljQVBJLmRlc3Ryb3kpO1xufVxuXG5jb25zdCBERUZBVUxUX1ZBTFVFUyA9IHtcbiAgY29uZmlnOiB7fSxcbiAgLy8gY29uZmlnRGVjb3JhdG9yOiBudWxsLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwdWJsaWNBUEksIG1vZGVsLCBpbml0aWFsVmFsdWVzID0ge30pIHtcbiAgT2JqZWN0LmFzc2lnbihtb2RlbCwgREVGQVVMVF9WQUxVRVMsIGluaXRpYWxWYWx1ZXMpO1xuXG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZGVzdHJveShwdWJsaWNBUEksIG1vZGVsKTtcbiAgQ29tcG9zaXRlQ2xvc3VyZUhlbHBlci5ldmVudChwdWJsaWNBUEksIG1vZGVsLCAnQ29ubmVjdGlvblJlYWR5Jyk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZXZlbnQocHVibGljQVBJLCBtb2RlbCwgJ0Nvbm5lY3Rpb25DbG9zZScpO1xuICBDb21wb3NpdGVDbG9zdXJlSGVscGVyLmV2ZW50KHB1YmxpY0FQSSwgbW9kZWwsICdDb25uZWN0aW9uRXJyb3InKTtcbiAgQ29tcG9zaXRlQ2xvc3VyZUhlbHBlci5pc0EocHVibGljQVBJLCBtb2RlbCwgJ1NtYXJ0Q29ubmVjdCcpO1xuICBDb21wb3NpdGVDbG9zdXJlSGVscGVyLmdldChwdWJsaWNBUEksIG1vZGVsLCBbJ2NvbmZpZycsICdjb25maWdEZWNvcmF0b3InXSk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuc2V0KHB1YmxpY0FQSSwgbW9kZWwsIFsnY29uZmlnRGVjb3JhdG9yJ10pO1xuXG4gIHNtYXJ0Q29ubmVjdChwdWJsaWNBUEksIG1vZGVsKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNvbnN0IG5ld0luc3RhbmNlID0gQ29tcG9zaXRlQ2xvc3VyZUhlbHBlci5uZXdJbnN0YW5jZShleHRlbmQpO1xuXG5leHBvcnQgZGVmYXVsdCB7IG5ld0luc3RhbmNlLCBleHRlbmQgfTtcbiIsIi8vIEhlbHBlciBib3Jyb3dlZCBmcm9tIHBhcmF2aWV3d2ViL3NyYy9Db21tb24vQ29yZVxuaW1wb3J0IENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIgZnJvbSAnLi4vQ29tcG9zaXRlQ2xvc3VyZUhlbHBlcic7XG5pbXBvcnQgU2Vzc2lvbiBmcm9tICcuL3Nlc3Npb24nO1xuXG5jb25zdCBERUZBVUxUX1NFQ1JFVCA9ICd3c2xpbmstc2VjcmV0JztcblxuZnVuY3Rpb24gZ2V0VHJhbnNwb3J0T2JqZWN0KHVybCkge1xuICB2YXIgaWR4ID0gdXJsLmluZGV4T2YoJzonKSxcbiAgICBwcm90b2NvbCA9IHVybC5zdWJzdHJpbmcoMCwgaWR4KTtcbiAgaWYgKHByb3RvY29sID09PSAnd3MnIHx8IHByb3RvY29sID09PSAnd3NzJykge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnd2Vic29ja2V0JyxcbiAgICAgIHVybCxcbiAgICB9O1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHByb3RvY29sICgke3Byb3RvY29sfSkgZm9yIHVybCAoJHt1cmx9KS4gIFVuYWJsZSB0byBjcmVhdGUgdHJhbnNwb3J0IG9iamVjdC5gKTtcbn1cblxuZnVuY3Rpb24gV2Vic29ja2V0Q29ubmVjdGlvbihwdWJsaWNBUEksIG1vZGVsKSB7XG4gIC8vIFRPRE8gU2hvdWxkIHdlIHRyeSB0byByZWNvbm5lY3Qgb24gZXJyb3I/XG5cbiAgcHVibGljQVBJLmNvbm5lY3QgPSAoKSA9PiB7XG4gICAgLy8gd2l0aG91dCBhIFVSTCB3ZSBjYW4ndCBkbyBhbnl0aGluZy5cbiAgICBpZiAoIW1vZGVsLnVybHMpIHJldHVybiBudWxsO1xuICAgIC8vIGNvbmNhdCBhbGxvd3MgYSBzaW5nbGUgdXJsIG9yIGEgbGlzdC5cbiAgICB2YXIgdXJpTGlzdCA9IFtdLmNvbmNhdChtb2RlbC51cmxzKSxcbiAgICAgIHRyYW5zcG9ydHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXJpTGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgdXJsID0gdXJpTGlzdFtpXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRyYW5zcG9ydCA9IGdldFRyYW5zcG9ydE9iamVjdCh1cmwpO1xuICAgICAgICB0cmFuc3BvcnRzLnB1c2godHJhbnNwb3J0KTtcbiAgICAgIH0gY2F0Y2ggKHRyYW5zcG9ydENyZWF0ZUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IodHJhbnNwb3J0Q3JlYXRlRXJyb3IpO1xuICAgICAgICBwdWJsaWNBUEkuZmlyZUNvbm5lY3Rpb25FcnJvcihwdWJsaWNBUEksIHRyYW5zcG9ydENyZWF0ZUVycm9yKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZGVsLmNvbm5lY3Rpb24pIHtcbiAgICAgIGlmIChtb2RlbC5jb25uZWN0aW9uLnVybCAhPT0gdHJhbnNwb3J0c1swXS51cmwpIHtcbiAgICAgICAgbW9kZWwuY29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgfSBlbHNlIGlmIChtb2RlbC5jb25uZWN0aW9uLnJlYWR5U3RhdGUgPT09IDAgfHwgbW9kZWwuY29ubmVjdGlvbi5yZWFkeVN0YXRlID09PSAxKSB7XG4gICAgICAgIC8vIGFscmVhZHkgY29ubmVjdGVkLlxuICAgICAgICByZXR1cm4gbW9kZWwuc2Vzc2lvbjtcbiAgICAgIH1cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIG1vZGVsLmNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0KHRyYW5zcG9ydHNbMF0udXJsKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIElmIHRoZSBzZXJ2ZXIgaXNuJ3QgcnVubmluZywgd2Ugc3RpbGwgZG9uJ3QgZW50ZXIgaGVyZSBvbiBDaHJvbWUgLVxuICAgICAgLy8gY29uc29sZSBzaG93cyBhIG5ldDo6RVJSX0NPTk5FQ1RJT05fUkVGVVNFRCBlcnJvciBpbnNpZGUgV2ViU29ja2V0XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICBwdWJsaWNBUEkuZmlyZUNvbm5lY3Rpb25FcnJvcihwdWJsaWNBUEksIGVycik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBtb2RlbC5jb25uZWN0aW9uLmJpbmFyeVR5cGUgPSAnYmxvYic7XG4gICAgaWYgKCFtb2RlbC5zZWNyZXQpIG1vZGVsLnNlY3JldCA9IERFRkFVTFRfU0VDUkVUO1xuICAgIG1vZGVsLnNlc3Npb24gPSBTZXNzaW9uLm5ld0luc3RhbmNlKHsgd3M6IG1vZGVsLmNvbm5lY3Rpb24sIHNlY3JldDogbW9kZWwuc2VjcmV0IH0pO1xuXG5cbiAgICBtb2RlbC5jb25uZWN0aW9uLm9ub3BlbiA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKG1vZGVsLnNlc3Npb24pIHtcbiAgICAgICAgLy8gc2VuZHMgaGFuZHNoYWtlIG1lc3NhZ2UgLSB3YWl0IGZvciByZXBseSBiZWZvcmUgaXNzdWluZyByZWFkeSgpXG4gICAgICAgIG1vZGVsLnNlc3Npb24ub25jb25uZWN0KGV2ZW50KS50aGVuKFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHB1YmxpY0FQSS5maXJlQ29ubmVjdGlvblJlYWR5KHB1YmxpY0FQSSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDb25uZWN0aW9uIGVycm9yJywgZXJyKTtcbiAgICAgICAgICAgIHB1YmxpY0FQSS5maXJlQ29ubmVjdGlvbkVycm9yKHB1YmxpY0FQSSwgZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIG1vZGVsLmNvbm5lY3Rpb24ub25jbG9zZSA9IChldmVudCkgPT4ge1xuICAgICAgcHVibGljQVBJLmZpcmVDb25uZWN0aW9uQ2xvc2UocHVibGljQVBJKTtcbiAgICAgIG1vZGVsLmNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgLy8gcmV0dXJuICFtb2RlbC5yZXRyeTsgLy8gdHJ1ZSA9PiBTdG9wIHJldHJ5XG4gICAgfTtcbiAgICBtb2RlbC5jb25uZWN0aW9uLm9uZXJyb3IgPSAoZXZlbnQpID0+IHtcbiAgICAgIHB1YmxpY0FQSS5maXJlQ29ubmVjdGlvbkVycm9yKHB1YmxpY0FQSSwgZXZlbnQpO1xuICAgIH07XG4gICAgLy8gaGFuZGxlIG1lc3NhZ2VzIGluIHRoZSBzZXNzaW9uLlxuICAgIG1vZGVsLmNvbm5lY3Rpb24ub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBtb2RlbC5zZXNzaW9uLm9ubWVzc2FnZShldmVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gbW9kZWwuc2Vzc2lvbjtcbiAgfTtcblxuICBwdWJsaWNBUEkuZ2V0U2Vzc2lvbiA9ICgpID0+IChtb2RlbC5zZXNzaW9uKTtcblxuICBwdWJsaWNBUEkuZ2V0VXJsID0gKCkgPT4gKG1vZGVsLmNvbm5lY3Rpb24gPyBtb2RlbC5jb25uZWN0aW9uLnVybCA6IHVuZGVmaW5lZCk7XG5cbiAgZnVuY3Rpb24gY2xlYW5VcCh0aW1lb3V0ID0gMTApIHtcbiAgICBpZiAobW9kZWwuc2Vzc2lvbiAmJiB0aW1lb3V0ID4gMCkge1xuICAgICAgbW9kZWwuc2Vzc2lvbi5jYWxsKCdhcHBsaWNhdGlvbi5leGl0LmxhdGVyJywgW3RpbWVvdXRdKTtcbiAgICB9XG4gICAgaWYgKG1vZGVsLmNvbm5lY3Rpb24pIHtcbiAgICAgIG1vZGVsLmNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICB9XG4gICAgbW9kZWwuY29ubmVjdGlvbiA9IG51bGw7XG4gIH1cblxuICBwdWJsaWNBUEkuZGVzdHJveSA9IENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuY2hhaW4oY2xlYW5VcCwgcHVibGljQVBJLmRlc3Ryb3kpO1xufVxuXG5jb25zdCBERUZBVUxUX1ZBTFVFUyA9IHtcbiAgc2VjcmV0OiBERUZBVUxUX1NFQ1JFVCxcbiAgY29ubmVjdGlvbjogbnVsbCxcbiAgc2Vzc2lvbjogbnVsbCxcbiAgcmV0cnk6IGZhbHNlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwdWJsaWNBUEksIG1vZGVsLCBpbml0aWFsVmFsdWVzID0ge30pIHtcbiAgT2JqZWN0LmFzc2lnbihtb2RlbCwgREVGQVVMVF9WQUxVRVMsIGluaXRpYWxWYWx1ZXMpO1xuXG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZGVzdHJveShwdWJsaWNBUEksIG1vZGVsKTtcbiAgQ29tcG9zaXRlQ2xvc3VyZUhlbHBlci5ldmVudChwdWJsaWNBUEksIG1vZGVsLCAnQ29ubmVjdGlvblJlYWR5Jyk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuZXZlbnQocHVibGljQVBJLCBtb2RlbCwgJ0Nvbm5lY3Rpb25DbG9zZScpO1xuICBDb21wb3NpdGVDbG9zdXJlSGVscGVyLmV2ZW50KHB1YmxpY0FQSSwgbW9kZWwsICdDb25uZWN0aW9uRXJyb3InKTtcbiAgQ29tcG9zaXRlQ2xvc3VyZUhlbHBlci5pc0EocHVibGljQVBJLCBtb2RlbCwgJ1dlYnNvY2tldENvbm5lY3Rpb24nKTtcblxuICBXZWJzb2NrZXRDb25uZWN0aW9uKHB1YmxpY0FQSSwgbW9kZWwpO1xufVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBjb25zdCBuZXdJbnN0YW5jZSA9IENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIubmV3SW5zdGFuY2UoZXh0ZW5kKTtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgZGVmYXVsdCB7IG5ld0luc3RhbmNlLCBleHRlbmQgfTtcbiIsIi8vIEhlbHBlciBib3Jyb3dlZCBmcm9tIHBhcmF2aWV3d2ViL3NyYy9Db21tb24vQ29yZVxuaW1wb3J0IENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIgZnJvbSAnLi4vQ29tcG9zaXRlQ2xvc3VyZUhlbHBlcic7XG5pbXBvcnQgSlNPTjUgZnJvbSAnanNvbjUnO1xuXG5mdW5jdGlvbiBTZXNzaW9uKHB1YmxpY0FQSSwgbW9kZWwpIHtcbiAgY29uc3QgQ0xJRU5UX0VSUk9SID0gLTMyMDk5O1xuICBsZXQgbXNnQ291bnQgPSAwO1xuICBjb25zdCBpbkZsaWdodFJwYyA9IHt9O1xuICBjb25zdCBhdHRhY2htZW50cyA9IFtdO1xuICBjb25zdCBhdHRhY2htZW50c1RvU2VuZCA9IHt9O1xuICBsZXQgYXR0YWNobWVudElkID0gMTtcbiAgY29uc3QgcmVnZXhBdHRhY2ggPSAvXndzbGlua19iaW5bXFxkXSskLztcbiAgLy8gbWF0Y2hlcyAncnBjOmNsaWVudDM6MjEnXG4gIC8vIGNsaWVudCBtYXkgYmUgZG90LXNlcGFyYXRlZCBhbmQgaW5jbHVkZSAnXydcbiAgLy8gbnVtYmVyIGlzIG1lc3NhZ2UgY291bnQgLSB1bmlxdWUuXG4gIC8vIG1hdGNoZXMgJ3B1Ymxpc2g6ZG90LnNlcGFyYXRlZC50b3BpYzo0MidcbiAgY29uc3QgcmVnZXhSUEMgPSAvXihycGN8cHVibGlzaHxzeXN0ZW0pOihcXHcrKD86XFwuXFx3KykqKTooPzpcXGQrKSQvO1xuICBjb25zdCBzdWJzY3JpcHRpb25zID0ge307XG4gIGxldCBjbGllbnRJRCA9IG51bGw7XG5cbiAgcHVibGljQVBJLmRlZmVyID0gKCkgPT4ge1xuICAgIGNvbnN0IGRlZmVycmVkID0ge307XG5cbiAgICBkZWZlcnJlZC5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICBkZWZlcnJlZC5yZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQ7XG4gIH07XG5cbiAgcHVibGljQVBJLm9uY29ubmVjdCA9IChldmVudCkgPT4ge1xuICAgIC8vIHNlbmQgaGVsbG8gbWVzc2FnZVxuICAgIGNvbnN0IGRlZmVycmVkID0gcHVibGljQVBJLmRlZmVyKCk7XG4gICAgY29uc3QgaWQgPSAnc3lzdGVtOmMwOjAnO1xuICAgIGluRmxpZ2h0UnBjW2lkXSA9IGRlZmVycmVkO1xuICAgIG1vZGVsLndzLnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgd3NsaW5rOiAnMS4wJyxcbiAgICAgIGlkLFxuICAgICAgbWV0aG9kOiAnd3NsaW5rLmhlbGxvJyxcbiAgICAgIGFyZ3M6IFt7IHNlY3JldDogbW9kZWwuc2VjcmV0IH1dLFxuICAgICAga3dhcmdzOiB7fVxuICAgIH0pKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfTtcbiAgcHVibGljQVBJLmNhbGwgPSAobWV0aG9kLCBhcmdzID0gW10sIGt3YXJncyA9IHt9KSA9PiB7XG4gICAgLy8gY3JlYXRlIGEgcHJvbWlzZSB0aGF0IHdlIHdpbGwgdXNlIHRvIG5vdGlmeSB0aGUgY2FsbGVyIG9mIHRoZSByZXN1bHQuXG4gICAgY29uc3QgZGVmZXJyZWQgPSBwdWJsaWNBUEkuZGVmZXIoKTtcbiAgICAvLyByZWFkeVN0YXRlIE9QRU4gPT09IDFcbiAgICBpZiAobW9kZWwud3MgJiYgY2xpZW50SUQgJiYgbW9kZWwud3MucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgICAgY29uc3QgaWQgPSBgcnBjOiR7Y2xpZW50SUR9OiR7bXNnQ291bnQrK31gXG4gICAgICBpbkZsaWdodFJwY1tpZF0gPSBkZWZlcnJlZDtcblxuICAgICAgY29uc3QgbXNnID0gSlNPTi5zdHJpbmdpZnkoeyB3c2xpbms6ICcxLjAnLCBpZCwgbWV0aG9kLCBhcmdzLCBrd2FyZ3MgfSk7XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhhdHRhY2htZW50c1RvU2VuZCkubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHNlbmRCaW5hcnkgPSAoa2V5KSA9PiB7XG4gICAgICAgICAgaWYgKGtleSBpbiBhdHRhY2htZW50c1RvU2VuZCkge1xuICAgICAgICAgICAgLy8gYmluYXJ5IGhlYWRlclxuICAgICAgICAgICAgbW9kZWwud3Muc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHdzbGluazogJzEuMCcsXG4gICAgICAgICAgICAgIG1ldGhvZDogJ3dzbGluay5iaW5hcnkuYXR0YWNobWVudCcsXG4gICAgICAgICAgICAgIGFyZ3M6IFtrZXldLFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAvLyBzZW5kIGJpbmFyeVxuICAgICAgICAgICAgbW9kZWwud3Muc2VuZChhdHRhY2htZW50c1RvU2VuZFtrZXldLCB7IGJpbmFyeTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSBhdHRhY2htZW50c1RvU2VuZFtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBmaW5kQmluYXJ5ID0gKG8pID0+IHtcbiAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobykpIHtcbiAgICAgICAgICAgICAgby5mb3JFYWNoKCh2KSA9PiBmaW5kQmluYXJ5KHYpKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgICAgT2JqZWN0LmtleXMobykuZm9yRWFjaCgoaykgPT4gZmluZEJpbmFyeShvW2tdKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlZ2V4QXR0YWNoLnRlc3QobykpIHtcbiAgICAgICAgICAgICAgc2VuZEJpbmFyeShvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIGZpbmRCaW5hcnkoYXJncyk7XG4gICAgICAgIGZpbmRCaW5hcnkoa3dhcmdzKTtcbiAgICAgIH1cblxuICAgICAgbW9kZWwud3Muc2VuZChKU09OLnN0cmluZ2lmeSh7IHdzbGluazogJzEuMCcsIGlkLCBtZXRob2QsIGFyZ3MsIGt3YXJncyB9KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdCh7IGNvZGU6IENMSUVOVF9FUlJPUiwgbWVzc2FnZTogYFJQQyBjYWxsICR7bWV0aG9kfSB1bnN1Y2Nlc3NmdWw6IGNvbm5lY3Rpb24gbm90IG9wZW5gIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfTtcbiAgcHVibGljQVBJLnN1YnNjcmliZSA9ICh0b3BpYywgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IHB1YmxpY0FQSS5kZWZlcigpO1xuICAgIGlmIChtb2RlbC53cyAmJiBjbGllbnRJRCkge1xuICAgICAgLy8gd2UgbmVlZHMgdG8gdHJhY2sgc3Vic2NyaXB0aW9ucywgdG8gdHJpZ2dlciBjYWxsYmFjayB3aGVuIHB1Ymxpc2ggaXMgcmVjZWl2ZWQuXG4gICAgICBpZiAoIXN1YnNjcmlwdGlvbnNbdG9waWNdKSBzdWJzY3JpcHRpb25zW3RvcGljXSA9IFtdO1xuICAgICAgc3Vic2NyaXB0aW9uc1t0b3BpY10ucHVzaChjYWxsYmFjayk7XG4gICAgICAvLyB3ZSBjYW4gbm90aWZ5IHRoZSBzZXJ2ZXIsIGJ1dCB3ZSBkb24ndCBuZWVkIHRvLCBpZiB0aGUgc2VydmVyIGFsd2F5cyBzZW5kcyBtZXNzYWdlcyB1bmNvbmRpdGlvbmFsbHkuXG4gICAgICAvLyBtb2RlbC53cy5zZW5kKEpTT04uc3RyaW5naWZ5KHsgd3NsaW5rOiAnMS4wJywgaWQ6IGBzdWJzY3JpYmU6JHttc2dDb3VudCsrfWAsIG1ldGhvZCwgYXJnczogW10gfSkpO1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh7IHRvcGljLCBjYWxsYmFjayB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmZXJyZWQucmVqZWN0KHsgY29kZTogQ0xJRU5UX0VSUk9SLCBtZXNzYWdlOiBgU3Vic2NyaWJlIGNhbGwgJHt0b3BpY30gdW5zdWNjZXNzZnVsOiBjb25uZWN0aW9uIG5vdCBvcGVuYCB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH07XG4gIHB1YmxpY0FQSS51bnN1YnNjcmliZSA9IChpbmZvKSA9PiB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBwdWJsaWNBUEkuZGVmZXIoKTtcbiAgICBjb25zdCB7IHRvcGljLCBjYWxsYmFjayB9ID0gaW5mbztcbiAgICBpZiAoIXN1YnNjcmlwdGlvbnNbdG9waWNdKSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoeyBjb2RlOiBDTElFTlRfRVJST1IsIG1lc3NhZ2U6IGBVbnN1YnNjcmliZSBjYWxsICR7dG9waWN9IHVuc3VjY2Vzc2Z1bDogbm90IHN1YnNjcmliZWRgIH0pO1xuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gc3Vic2NyaXB0aW9uc1t0b3BpY10uaW5kZXhPZihjYWxsYmFjayk7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3Vic2NyaXB0aW9uc1t0b3BpY10uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmZXJyZWQucmVqZWN0KHsgY29kZTogQ0xJRU5UX0VSUk9SLCBtZXNzYWdlOiBgVW5zdWJzY3JpYmUgY2FsbCAke3RvcGljfSB1bnN1Y2Nlc3NmdWw6IGNhbGxiYWNrIG5vdCBmb3VuZGAgfSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9O1xuICBwdWJsaWNBUEkuY2xvc2UgPSAoKSA9PiB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBwdWJsaWNBUEkuZGVmZXIoKTtcbiAgICAvLyBzb21lIHRyYW5zcG9ydHMgbWlnaHQgYmUgYWJsZSB0byBjbG9zZSB0aGUgc2Vzc2lvbiB3aXRob3V0IGNsb3NpbmcgdGhlIGNvbm5lY3Rpb24uIE5vdCB0cnVlIGZvciB3ZWJzb2NrZXQuLi5cbiAgICBtb2RlbC53cy5jbG9zZSgpO1xuICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfTtcblxuICAvLyBzcGxpdCBvdXQgdG8gc3VwcG9ydCBhIG1lc3NhZ2Ugd2l0aCBhIGJhcmUgYmluYXJ5IGF0dGFjaG1lbnQuXG4gIGZ1bmN0aW9uIGdldEF0dGFjaG1lbnQoYmluYXJ5S2V5KSB7XG4gICAgLy8gY29uc29sZS5sb2coJ0FkZGluZyBiaW5hcnkgYXR0YWNobWVudCcsIGJpbmFyeUtleSk7XG4gICAgY29uc3QgaW5kZXggPSBhdHRhY2htZW50cy5maW5kSW5kZXgoKGF0dCkgPT4gKGF0dC5rZXkgPT09IGJpbmFyeUtleSkpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF0dGFjaG1lbnRzW2luZGV4XS5kYXRhO1xuICAgICAgLy8gVE9ETyBpZiBhdHRhY2htZW50IGlzIHNlbnQgbXVsaXRwbGUgdGltZXMsIHdlIHNob3VsZG4ndCByZW1vdmUgaXQgeWV0LlxuICAgICAgYXR0YWNobWVudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoJ0JpbmFyeSBhdHRhY2htZW50IGtleSBmb3VuZCB3aXRob3V0IG1hdGNoaW5nIGF0dGFjaG1lbnQnKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBUbyBkbyBhIGZ1bGwgdHJhdmVyc2FsIG9mIG5lc3RlZCBvYmplY3RzL2xpc3RzLCB3ZSBuZWVkIHJlY3Vyc2lvbi5cbiAgZnVuY3Rpb24gYWRkQXR0YWNobWVudChvYmpfbGlzdCkge1xuICAgIGZvciAobGV0IGtleSBpbiBvYmpfbGlzdCkge1xuICAgICAgaWYgKHR5cGVvZihvYmpfbGlzdFtrZXldKSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgcmVnZXhBdHRhY2gudGVzdChvYmpfbGlzdFtrZXldKSkge1xuICAgICAgICBjb25zdCBiaW5hcnlLZXkgPSBvYmpfbGlzdFtrZXldO1xuICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IGdldEF0dGFjaG1lbnQoYmluYXJ5S2V5KTtcbiAgICAgICAgaWYgKHJlcGxhY2VtZW50ICE9PSBudWxsKSBvYmpfbGlzdFtrZXldID0gcmVwbGFjZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZihvYmpfbGlzdFtrZXldKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gYXJyYXlzIGFyZSBhbHNvICdvYmplY3QnIHdpdGggdGhpcyB0ZXN0LlxuICAgICAgICBhZGRBdHRhY2htZW50KG9ial9saXN0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpY0FQSS5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQuZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGV2ZW50LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAvLyB3ZSd2ZSBnb3R0ZW4gYSBoZWFkZXIgd2l0aCB0aGUga2V5cyBmb3IgdGhpcyBiaW5hcnkgZGF0YS5cbiAgICAgIC8vIHdlIHdpbGwgc29vbiByZWNlaXZlIGEganNvbiBtZXNzYWdlIHdpdGggZW1iZWRkZWQgaWRzIG9mIHRoZSBiaW5hcnkgb2JqZWN0cy5cbiAgICAgIC8vIFNhdmUgd2l0aCBpdCdzIGtleSwgaW4gb3JkZXIuXG4gICAgICAvLyBjb25zb2xlLmxvZygnU2F2aW5nIGJpbmFyeSBhdHRhY2htZW50Jyk7XG4gICAgICBsZXQgZm91bmRJdCA9IGZhbHNlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRhY2htZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXR0YWNobWVudHNbaV0uZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICAgIGF0dGFjaG1lbnRzW2ldLmRhdGEgPSBldmVudC5kYXRhO1xuICAgICAgICAgIGZvdW5kSXQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZvdW5kSXQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyBoZWFkZXIgZm9yIHJlY2VpdmVkIGJpbmFyeSBtZXNzYWdlJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXlsb2FkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcGF5bG9hZCA9IEpTT041LnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWFsZm9ybWVkIG1lc3NhZ2U6IFwiLCBldmVudC5kYXRhKTtcbiAgICAgICAgLy8gZGVidWdnZXI7XG4gICAgICB9XG4gICAgICBpZiAoIXBheWxvYWQpIHJldHVybjtcbiAgICAgIGlmICghcGF5bG9hZC5pZCkge1xuICAgICAgICAvLyBOb3RpZmljYXRpb24tb25seSBtZXNzYWdlIGZyb20gdGhlIHNlcnZlciAtIHNob3VsZCBiZSBiaW5hcnkgYXR0YWNobWVudCBoZWFkZXJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ05vdGlmeScsIHBheWxvYWQpO1xuICAgICAgICBpZiAocGF5bG9hZC5tZXRob2QgPT09ICd3c2xpbmsuYmluYXJ5LmF0dGFjaG1lbnQnKSB7XG4gICAgICAgICAgcGF5bG9hZC5hcmdzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgYXR0YWNobWVudHMucHVzaCh7IGtleSwgZGF0YTogbnVsbCB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGF5bG9hZC5lcnJvcikge1xuICAgICAgICAvLyBraWxsIGFueSBhdHRhY2htZW50c1xuICAgICAgICBhdHRhY2htZW50cy5sZW5ndGggPSAwO1xuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IGluRmxpZ2h0UnBjW3BheWxvYWQuaWRdO1xuICAgICAgICBpZiAoZGVmZXJyZWQpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QocGF5bG9hZC5lcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignU2VydmVyIGVycm9yOicsIHBheWxvYWQuZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocGF5bG9hZC5yZXN1bHQgJiYgYXR0YWNobWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmICh0eXBlb2YocGF5bG9hZC5yZXN1bHQpID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgcmVnZXhBdHRhY2gudGVzdChwYXlsb2FkLnJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gZ2V0QXR0YWNobWVudChwYXlsb2FkLnJlc3VsdCk7XG4gICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgIT09IG51bGwpIHBheWxvYWQucmVzdWx0ID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZEF0dGFjaG1lbnQocGF5bG9hZC5yZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXRjaCA9IHJlZ2V4UlBDLmV4ZWMocGF5bG9hZC5pZCk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGNvbnN0IHR5cGUgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3JwYycpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gaW5GbGlnaHRScGNbcGF5bG9hZC5pZF07XG4gICAgICAgICAgICBpZiAoIWRlZmVycmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZXNzaW9uIG1lc3NhZ2UgaWQgd2l0aG91dCBtYXRjaGluZyBjYWxsLCBkcm9wcGVkJywgcGF5bG9hZCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocGF5bG9hZC5yZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAncHVibGlzaCcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuYXNzZXJ0KGluRmxpZ2h0UnBjW3BheWxvYWQuaWRdID09PSB1bmRlZmluZWQsICdwdWJsaXNoIG1lc3NhZ2UgcmVjZWl2ZWQgbWF0Y2hpbmcgaW4tZmxpZ2h0IHJwYyBjYWxsJyk7XG4gICAgICAgICAgICAvLyByZWdleCBleHRyYWN0cyB0aGUgdG9waWMgZm9yIHVzLlxuICAgICAgICAgICAgY29uc3QgdG9waWMgPSBtYXRjaFsyXTtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uc1t0b3BpY10pIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZm9yIGVhY2ggY2FsbGJhY2ssIHByb3ZpZGUgdGhlIG1lc3NhZ2UgZGF0YS4gV3JhcCBpbiBhbiBhcnJheSwgZm9yIGJhY2stY29tcGF0aWJpbGl0eSB3aXRoIFdBTVBcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnNbdG9waWNdLmZvckVhY2goKGNhbGxiYWNrKSA9PiAoY2FsbGJhY2soW3BheWxvYWQucmVzdWx0XSkpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ3N5c3RlbScpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdEQkcgc3lzdGVtOicsIHBheWxvYWQuaWQsIHBheWxvYWQucmVzdWx0KTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gaW5GbGlnaHRScGNbcGF5bG9hZC5pZF07XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pZCA9PT0gJ3N5c3RlbTpjMDowJykge1xuICAgICAgICAgICAgICBjbGllbnRJRCA9IHBheWxvYWQucmVzdWx0LmNsaWVudElEO1xuICAgICAgICAgICAgICBpZiAoZGVmZXJyZWQpIGRlZmVycmVkLnJlc29sdmUoY2xpZW50SUQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5rbm93biBzeXN0ZW0gbWVzc2FnZScsIHBheWxvYWQuaWQpO1xuICAgICAgICAgICAgICBpZiAoZGVmZXJyZWQpIGRlZmVycmVkLnJlamVjdCh7IGNvZGU6IENMSUVOVF9FUlJPUiwgbWVzc2FnZTogYFVua25vd24gc3lzdGVtIG1lc3NhZ2UgJHtwYXlsb2FkLmlkfWAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Vua25vd24gcnBjIGlkIGZvcm1hdCcsIHBheWxvYWQuaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVsZXRlIGluRmxpZ2h0UnBjW3BheWxvYWQuaWRdO1xuICAgIH1cbiAgfTtcblxuICBwdWJsaWNBUEkuYWRkQXR0YWNobWVudCA9IChwYXlsb2FkKSA9PiB7XG4gICAgY29uc3QgYmluYXJ5SWQgPSBgd3NsaW5rX2JpbiR7YXR0YWNobWVudElkfWA7XG4gICAgYXR0YWNobWVudHNUb1NlbmRbYmluYXJ5SWRdID0gcGF5bG9hZDtcbiAgICBhdHRhY2htZW50SWQrKztcbiAgICByZXR1cm4gYmluYXJ5SWQ7XG4gIH07XG59XG5cblxuY29uc3QgREVGQVVMVF9WQUxVRVMgPSB7XG4gIHNlY3JldDogJ3dzbGluay1zZWNyZXQnLFxuICB3czogbnVsbCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocHVibGljQVBJLCBtb2RlbCwgaW5pdGlhbFZhbHVlcyA9IHt9KSB7XG4gIE9iamVjdC5hc3NpZ24obW9kZWwsIERFRkFVTFRfVkFMVUVTLCBpbml0aWFsVmFsdWVzKTtcblxuICBDb21wb3NpdGVDbG9zdXJlSGVscGVyLmRlc3Ryb3kocHVibGljQVBJLCBtb2RlbCk7XG4gIENvbXBvc2l0ZUNsb3N1cmVIZWxwZXIuaXNBKHB1YmxpY0FQSSwgbW9kZWwsICdTZXNzaW9uJyk7XG5cbiAgU2Vzc2lvbihwdWJsaWNBUEksIG1vZGVsKTtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgY29uc3QgbmV3SW5zdGFuY2UgPSBDb21wb3NpdGVDbG9zdXJlSGVscGVyLm5ld0luc3RhbmNlKGV4dGVuZCk7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGRlZmF1bHQgeyBuZXdJbnN0YW5jZSwgZXh0ZW5kIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcImFwcFwiXSA9IHJlcXVpcmUoXCItIS9Vc2Vycy9zZWIvRG9jdW1lbnRzL2NvZGUvb3Blbi1zb3VyY2UvV2ViL2xpYnMvd3NsaW5rL2pzL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTUtMCEuL21haW4uanNcIik7Il0sInNvdXJjZVJvb3QiOiIifQ==