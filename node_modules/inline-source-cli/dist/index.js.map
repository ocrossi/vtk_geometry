{"version":3,"sources":["../src/index.js"],"names":["argv","yargs","usage","help","boolean","alias","string","default","source","_","process","stdin","setEncoding","on","chunk","read","run","html","compress","rootpath","root","cwd","attribute","out","fs","writeFile","err","stderr","write","exit","stdout"],"mappings":"AAAA;;;AAEA;;AACA;;AACA;;;;AAEA;AAEA,IAAIA,IAAI,GAAGC,eACRC,KADQ,CACD,wDADC,EAERC,IAFQ,GAGRC,OAHQ,CAGA,UAHA,EAIRC,KAJQ,CAIF,GAJE,EAIG,UAJH,EAKRC,MALQ,CAKD,WALC,EAMRC,OANQ,CAMA,WANA,EAMa,QANb,EAORD,MAPQ,CAOD,MAPC,EAQRD,KARQ,CAQF,GARE,EAQG,MARH,EASRA,KATQ,CASF,GATE,EASG,MATH,EASWL,IATtB;;AAWA,IAAIQ,MAAM,GAAGR,IAAI,CAACS,CAAL,CAAO,CAAP,CAAb,C,CAEA;;AACA,IAAID,MAAM,KAAK,GAAX,IAAkB,CAACA,MAAvB,EAA+B;AAC7BA,EAAAA,MAAM,GAAG,EAAT;AACAE,EAAAA,OAAO,CAACC,KAAR,CAAcC,WAAd,CAA0B,MAA1B;AACAF,EAAAA,OAAO,CAACC,KAAR,CAAcE,EAAd,CAAiB,UAAjB,EAA6B,MAAM;AACjC,QAAIC,KAAK,GAAGJ,OAAO,CAACC,KAAR,CAAcI,IAAd,EAAZ;AACA,QAAID,KAAK,KAAK,IAAd,EAAoBN,MAAM,IAAIM,KAAV;AACrB,GAHD;AAIAJ,EAAAA,OAAO,CAACC,KAAR,CAAcE,EAAd,CAAiB,KAAjB,EAAwB,MAAM;AAC5BG,IAAAA,GAAG,CAACR,MAAD,EAASR,IAAT,CAAH;AACD,GAFD;AAGD,CAVD,MAUO;AACLgB,EAAAA,GAAG,CAACR,MAAD,EAASR,IAAT,CAAH;AACD;;AAED,eAAegB,GAAf,CAAmBR,MAAnB,EAA2BR,IAA3B,EAAiC;AAC/B,MAAI;AACF,UAAMiB,IAAI,GAAG,MAAM,gCAAaT,MAAb,EAAqB;AACtCU,MAAAA,QAAQ,EAAElB,IAAI,CAACkB,QADuB;AAEtCC,MAAAA,QAAQ,EAAEnB,IAAI,CAACoB,IAAL,IAAapB,IAAI,CAACmB,QAAlB,IAA8BT,OAAO,CAACW,GAAR,EAFF;AAGtCC,MAAAA,SAAS,EAAEtB,IAAI,CAACsB;AAHsB,KAArB,CAAnB;AAKA,QAAIC,GAAG,GAAGvB,IAAI,CAACS,CAAL,CAAO,CAAP,CAAV;;AACA,QAAIc,GAAJ,EAAS;AACPC,kBAAGC,SAAH,CAAaF,GAAb,EAAkBN,IAAlB,EAAyBS,GAAD,IAAS;AAC/B,YAAIA,GAAJ,EAAS;AACPhB,UAAAA,OAAO,CAACiB,MAAR,CAAeC,KAAf,CAAsB,UAASF,GAAI,IAAnC;AACA,iBAAOhB,OAAO,CAACmB,IAAR,CAAa,CAAb,CAAP;AACD;;AAEDnB,QAAAA,OAAO,CAACiB,MAAR,CAAeC,KAAf,CAAsB,cAAaL,GAAI,IAAvC;AACAb,QAAAA,OAAO,CAACmB,IAAR,CAAa,CAAb;AACD,OARD;AASD,KAVD,MAUO;AACLnB,MAAAA,OAAO,CAACoB,MAAR,CAAeF,KAAf,CAAqBX,IAAI,GAAG,IAA5B;AACAP,MAAAA,OAAO,CAACmB,IAAR,CAAa,CAAb;AACD;AACF,GArBD,CAqBE,OAAOH,GAAP,EAAY;AACZhB,IAAAA,OAAO,CAACiB,MAAR,CAAeC,KAAf,CAAsB,UAASF,GAAI,IAAnC;AACA,WAAOhB,OAAO,CAACmB,IAAR,CAAa,CAAb,CAAP;AACD;AACF","sourcesContent":["#!/usr/bin/env node\n\nimport fs from 'fs';\nimport { inlineSource } from 'inline-source';\nimport yargs from 'yargs';\n\n// inline-source --compress false --root ./ in.html [out.html]\n\nlet argv = yargs\n  .usage(`Usage: $0 [--compress] [--root cwd] in.html [out.html]`)\n  .help()\n  .boolean('compress')\n  .alias('z', 'compress')\n  .string('attribute')\n  .default('attribute', 'inline')\n  .string('root')\n  .alias('d', 'root')\n  .alias('h', 'help').argv;\n\nlet source = argv._[0];\n\n// pass \"-\" to read from stdin\nif (source === '-' || !source) {\n  source = '';\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('readable', () => {\n    let chunk = process.stdin.read();\n    if (chunk !== null) source += chunk;\n  });\n  process.stdin.on('end', () => {\n    run(source, argv);\n  });\n} else {\n  run(source, argv);\n}\n\nasync function run(source, argv) {\n  try {\n    const html = await inlineSource(source, {\n      compress: argv.compress,\n      rootpath: argv.root || argv.rootpath || process.cwd(),\n      attribute: argv.attribute\n    });\n    let out = argv._[1];\n    if (out) {\n      fs.writeFile(out, html, (err) => {\n        if (err) {\n          process.stderr.write(`Error: ${err}\\n`);\n          return process.exit(1);\n        }\n\n        process.stderr.write(`Written to ${out}\\n`);\n        process.exit(0);\n      });\n    } else {\n      process.stdout.write(html + '\\n');\n      process.exit(0);\n    }\n  } catch (err) {\n    process.stderr.write(`Error: ${err}\\n`);\n    return process.exit(1);\n  }\n}\n"],"file":"index.js"}